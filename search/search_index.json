{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OpenAI Agents SDK","text":"<p>The OpenAI Agents SDK enables you to build agentic AI apps in a lightweight, easy-to-use package with very few abstractions. It's a production-ready upgrade of our previous experimentation for agents, Swarm. The Agents SDK has a very small set of primitives:</p> <ul> <li>Agents, which are LLMs equipped with instructions and tools</li> <li>Handoffs, which allow agents to delegate to other agents for specific tasks</li> <li>Guardrails, which enable the inputs to agents to be validated</li> </ul> <p>In combination with Python, these primitives are powerful enough to express complex relationships between tools and agents, and allow you to build real-world applications without a steep learning curve. In addition, the SDK comes with built-in tracing that lets you visualize and debug your agentic flows, as well as evaluate them and even fine-tune models for your application.</p>"},{"location":"#why-use-the-agents-sdk","title":"Why use the Agents SDK","text":"<p>The SDK has two driving design principles:</p> <ol> <li>Enough features to be worth using, but few enough primitives to make it quick to learn.</li> <li>Works great out of the box, but you can customize exactly what happens.</li> </ol> <p>Here are the main features of the SDK:</p> <ul> <li>Agent loop: Built-in agent loop that handles calling tools, sending results to the LLM, and looping until the LLM is done.</li> <li>Python-first: Use built-in language features to orchestrate and chain agents, rather than needing to learn new abstractions.</li> <li>Handoffs: A powerful feature to coordinate and delegate between multiple agents.</li> <li>Guardrails: Run input validations and checks in parallel to your agents, breaking early if the checks fail.</li> <li>Function tools: Turn any Python function into a tool, with automatic schema generation and Pydantic-powered validation.</li> <li>Tracing: Built-in tracing that lets you visualize, debug and monitor your workflows, as well as use the OpenAI suite of evaluation, fine-tuning and distillation tools.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install openai-agents\n</code></pre>"},{"location":"#hello-world-example","title":"Hello world example","text":"<pre><code>from agents import Agent, Runner\n\nagent = Agent(name=\"Assistant\", instructions=\"You are a helpful assistant\")\n\nresult = Runner.run_sync(agent, \"Write a haiku about recursion in programming.\")\nprint(result.final_output)\n\n# Code within the code,\n# Functions calling themselves,\n# Infinite loop's dance.\n</code></pre> <p>(If running this, ensure you set the <code>OPENAI_API_KEY</code> environment variable)</p> <pre><code>export OPENAI_API_KEY=sk-...\n</code></pre>"},{"location":"agents/","title":"Agents","text":"<p>Agents are the core building block in your apps. An agent is a large language model (LLM), configured with instructions and tools.</p>"},{"location":"agents/#basic-configuration","title":"Basic configuration","text":"<p>The most common properties of an agent you'll configure are:</p> <ul> <li><code>instructions</code>: also known as a developer message or system prompt.</li> <li><code>model</code>: which LLM to use, and optional <code>model_settings</code> to configure model tuning parameters like temperature, top_p, etc.</li> <li><code>tools</code>: Tools that the agent can use to achieve its tasks.</li> </ul> <pre><code>from agents import Agent, ModelSettings, function_tool\n\n@function_tool\ndef get_weather(city: str) -&gt; str:\n    return f\"The weather in {city} is sunny\"\n\nagent = Agent(\n    name=\"Haiku agent\",\n    instructions=\"Always respond in haiku form\",\n    model=\"o3-mini\",\n    tools=[get_weather],\n)\n</code></pre>"},{"location":"agents/#context","title":"Context","text":"<p>Agents are generic on their <code>context</code> type. Context is a dependency-injection tool: it's an object you create and pass to <code>Runner.run()</code>, that is passed to every agent, tool, handoff etc, and it serves as a grab bag of dependencies and state for the agent run. You can provide any Python object as the context.</p> <pre><code>@dataclass\nclass UserContext:\n  uid: str\n  is_pro_user: bool\n\n  async def fetch_purchases() -&gt; list[Purchase]:\n     return ...\n\nagent = Agent[UserContext](\n    ...,\n)\n</code></pre>"},{"location":"agents/#output-types","title":"Output types","text":"<p>By default, agents produce plain text (i.e. <code>str</code>) outputs. If you want the agent to produce a particular type of output, you can use the <code>output_type</code> parameter. A common choice is to use Pydantic objects, but we support any type that can be wrapped in a Pydantic TypeAdapter - dataclasses, lists, TypedDict, etc.</p> <pre><code>from pydantic import BaseModel\nfrom agents import Agent\n\n\nclass CalendarEvent(BaseModel):\n    name: str\n    date: str\n    participants: list[str]\n\nagent = Agent(\n    name=\"Calendar extractor\",\n    instructions=\"Extract calendar events from text\",\n    output_type=CalendarEvent,\n)\n</code></pre> <p>Note</p> <p>When you pass an <code>output_type</code>, that tells the model to use structured outputs instead of regular plain text responses.</p>"},{"location":"agents/#handoffs","title":"Handoffs","text":"<p>Handoffs are sub-agents that the agent can delegate to. You provide a list of handoffs, and the agent can choose to delegate to them if relevant. This is a powerful pattern that allows orchestrating modular, specialized agents that excel at a single task. Read more in the handoffs documentation.</p> <pre><code>from agents import Agent\n\nbooking_agent = Agent(...)\nrefund_agent = Agent(...)\n\ntriage_agent = Agent(\n    name=\"Triage agent\",\n    instructions=(\n        \"Help the user with their questions.\"\n        \"If they ask about booking, handoff to the booking agent.\"\n        \"If they ask about refunds, handoff to the refund agent.\"\n    ),\n    handoffs=[booking_agent, refund_agent],\n)\n</code></pre>"},{"location":"agents/#dynamic-instructions","title":"Dynamic instructions","text":"<p>In most cases, you can provide instructions when you create the agent. However, you can also provide dynamic instructions via a function. The function will receive the agent and context, and must return the prompt. Both regular and <code>async</code> functions are accepted.</p> <pre><code>def dynamic_instructions(\n    context: RunContextWrapper[UserContext], agent: Agent[UserContext]\n) -&gt; str:\n    return f\"The user's name is {context.context.name}. Help them with their questions.\"\n\n\nagent = Agent[UserContext](\n    name=\"Triage agent\",\n    instructions=dynamic_instructions,\n)\n</code></pre>"},{"location":"agents/#lifecycle-events-hooks","title":"Lifecycle events (hooks)","text":"<p>Sometimes, you want to observe the lifecycle of an agent. For example, you may want to log events, or pre-fetch data when certain events occur. You can hook into the agent lifecycle with the <code>hooks</code> property. Subclass the <code>AgentHooks</code> class, and override the methods you're interested in.</p>"},{"location":"agents/#guardrails","title":"Guardrails","text":"<p>Guardrails allow you to run checks/validations on user input, in parallel to the agent running. For example, you could screen the user's input for relevance. Read more in the guardrails documentation.</p>"},{"location":"agents/#cloningcopying-agents","title":"Cloning/copying agents","text":"<p>By using the <code>clone()</code> method on an agent, you can duplicate an Agent, and optionally change any properties you like.</p> <pre><code>pirate_agent = Agent(\n    name=\"Pirate\",\n    instructions=\"Write like a pirate\",\n    model=\"o3-mini\",\n)\n\nrobot_agent = pirate_agent.clone(\n    name=\"Robot\",\n    instructions=\"Write like a robot\",\n)\n</code></pre>"},{"location":"config/","title":"Configuring the SDK","text":""},{"location":"config/#api-keys-and-clients","title":"API keys and clients","text":"<p>By default, the SDK looks for the <code>OPENAI_API_KEY</code> environment variable for LLM requests and tracing, as soon as it is imported. If you are unable to set that environment variable before your app starts, you can use the set_default_openai_key() function to set the key.</p> <pre><code>from agents import set_default_openai_key\n\nset_default_openai_key(\"sk-...\")\n</code></pre> <p>Alternatively, you can also configure an OpenAI client to be used. By default, the SDK creates an <code>AsyncOpenAI</code> instance, using the API key from the environment variable or the default key set above. You can change this by using the set_default_openai_client() function.</p> <pre><code>from openai import AsyncOpenAI\nfrom agents import set_default_openai_client\n\ncustom_client = AsyncOpenAI(base_url=\"...\", api_key=\"...\")\nset_default_openai_client(custom_client)\n</code></pre> <p>Finally, you can also customize the OpenAI API that is used. By default, we use the OpenAI Responses API. You can override this to use the Chat Completions API by using the set_default_openai_api() function.</p> <pre><code>from agents import set_default_openai_api\n\nset_default_openai_api(\"chat_completions\")\n</code></pre>"},{"location":"config/#tracing","title":"Tracing","text":"<p>Tracing is enabled by default. It uses the OpenAI API keys from the section above by default (i.e. the environment variable or the default key you set). You can specifically set the API key used for tracing by using the <code>set_tracing_export_api_key</code> function.</p> <pre><code>from agents import set_tracing_export_api_key\n\nset_tracing_export_api_key(\"sk-...\")\n</code></pre> <p>You can also disable tracing entirely by using the <code>set_tracing_disabled()</code> function.</p> <pre><code>from agents import set_tracing_disabled\n\nset_tracing_disabled(True)\n</code></pre>"},{"location":"config/#debug-logging","title":"Debug logging","text":"<p>The SDK has two Python loggers without any handlers set. By default, this means that warnings and errors are sent to <code>stdout</code>, but other logs are suppressed.</p> <p>To enable verbose logging, use the <code>enable_verbose_stdout_logging()</code> function.</p> <pre><code>from agents import enable_verbose_stdout_logging\n\nenable_verbose_stdout_logging()\n</code></pre> <p>Alternatively, you can customize the logs by adding handlers, filters, formatters, etc. You can read more in the Python logging guide.</p> <pre><code>import logging\n\nlogger =  logging.getLogger(\"openai.agents\") # or openai.agents.tracing for the Tracing logger\n\n# To make all logs show up\nlogger.setLevel(logging.DEBUG)\n# To make info and above show up\nlogger.setLevel(logging.INFO)\n# To make warning and above show up\nlogger.setLevel(logging.WARNING)\n# etc\n\n# You can customize this as needed, but this will output to `stderr` by default\nlogger.addHandler(logging.StreamHandler())\n</code></pre>"},{"location":"config/#sensitive-data-in-logs","title":"Sensitive data in logs","text":"<p>Certain logs may contain sensitive data (for example, user data). If you want to disable this data from being logged, set the following environment variables.</p> <p>To disable logging LLM inputs and outputs:</p> <pre><code>export OPENAI_AGENTS_DONT_LOG_MODEL_DATA=1\n</code></pre> <p>To disable logging tool inputs and outputs:</p> <pre><code>export OPENAI_AGENTS_DONT_LOG_TOOL_DATA=1\n</code></pre>"},{"location":"context/","title":"Context management","text":"<p>Context is an overloaded term. There are two main classes of context you might care about:</p> <ol> <li>Context available locally to your code: this is data and dependencies you might need when tool functions run, during callbacks like <code>on_handoff</code>, in lifecycle hooks, etc.</li> <li>Context available to LLMs: this is data the LLM sees when generating a response.</li> </ol>"},{"location":"context/#local-context","title":"Local context","text":"<p>This is represented via the <code>RunContextWrapper</code> class and the <code>context</code> property within it. The way this works is:</p> <ol> <li>You create any Python object you want. A common pattern is to use a dataclass or a Pydantic object.</li> <li>You pass that object to the various run methods (e.g. <code>Runner.run(..., **context=whatever**))</code>.</li> <li>All your tool calls, lifecycle hooks etc will be passed a wrapper object, <code>RunContextWrapper[T]</code>, where <code>T</code> represents your context object type which you can access via <code>wrapper.context</code>.</li> </ol> <p>The most important thing to be aware of: every agent, tool function, lifecycle etc for a given agent run must use the same type of context.</p> <p>You can use the context for things like:</p> <ul> <li>Contextual data for your run (e.g. things like a username/uid or other information about the user)</li> <li>Dependencies (e.g. logger objects, data fetchers, etc)</li> <li>Helper functions</li> </ul> <p>Note</p> <p>The context object is not sent to the LLM. It is purely a local object that you can read from, write to and call methods on it.</p> <pre><code>import asyncio\nfrom dataclasses import dataclass\n\nfrom agents import Agent, RunContextWrapper, Runner, function_tool\n\n@dataclass\nclass UserInfo:  # (1)!\n    name: str\n    uid: int\n\n@function_tool\nasync def fetch_user_age(wrapper: RunContextWrapper[UserInfo]) -&gt; str:  # (2)!\n    return f\"User {wrapper.context.name} is 47 years old\"\n\nasync def main():\n    user_info = UserInfo(name=\"John\", uid=123)  # (3)!\n\n    agent = Agent[UserInfo](  # (4)!\n        name=\"Assistant\",\n        tools=[fetch_user_age],\n    )\n\n    result = await Runner.run(\n        starting_agent=agent,\n        input=\"What is the age of the user?\",\n        context=user_info,\n    )\n\n    print(result.final_output)  # (5)!\n    # The user John is 47 years old.\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <ol> <li>This is the context object. We've used a dataclass here, but you can use any type.</li> <li>This is a tool. You can see it takes a <code>RunContextWrapper[UserInfo]</code>. The tool implementation reads from the context.</li> <li>We mark the agent with the generic <code>UserInfo</code>, so that the typechecker can catch errors (for example, if we tried to pass a tool that took a different context type).</li> <li>The context is passed to the <code>run</code> function.</li> <li>The agent correctly calls the tool and gets the age.</li> </ol>"},{"location":"context/#agentllm-context","title":"Agent/LLM context","text":"<p>When an LLM is called, the only data it can see is from the conversation history. This means that if you want to make some new data available to the LLM, you must do it in a way that makes it available in that history. There are a few ways to do this:</p> <ol> <li>You can add it to the Agent <code>instructions</code>. This is also known as a \"system prompt\" or \"developer message\". System prompts can be static strings, or they can be dynamic functions that receive the context and output a string. This is a common tactic for information that is always useful (for example, the user's name or the current date).</li> <li>Add it to the <code>input</code> when calling the <code>Runner.run</code> functions. This is similar to the <code>instructions</code> tactic, but allows you to have messages that are lower in the chain of command.</li> <li>Expose it via function tools. This is useful for on-demand context - the LLM decides when it needs some data, and can call the tool to fetch that data.</li> <li>Use retrieval or web search. These are special tools that are able to fetch relevant data from files or databases (retrieval), or from the web (web search). This is useful for \"grounding\" the response in relevant contextual data.</li> </ol>"},{"location":"guardrails/","title":"Guardrails","text":"<p>Guardrails run in parallel to your agents, enabling you to do checks and validations of user input. For example, imagine you have an agent that uses a very smart (and hence slow/expensive) model to help with customer requests. You wouldn't want malicious users to ask the model to help them with their math homework. So, you can run a guardrail with a fast/cheap model. If the guardrail detects malicious usage, it can immediately raise an error, which stops the expensive model from running and saves you time/money.</p> <p>There are two kinds of guardrails:</p> <ol> <li>Input guardrails run on the initial user input</li> <li>Output guardrails run on the final agent output</li> </ol>"},{"location":"guardrails/#input-guardrails","title":"Input guardrails","text":"<p>Input guardrails run in 3 steps:</p> <ol> <li>First, the guardrail receives the same input passed to the agent.</li> <li>Next, the guardrail function runs to produce a <code>GuardrailFunctionOutput</code>, which is then wrapped in an <code>InputGuardrailResult</code></li> <li>Finally, we check if <code>.tripwire_triggered</code> is true. If true, an <code>InputGuardrailTripwireTriggered</code> exception is raised, so you can appropriately respond to the user or handle the exception.</li> </ol> <p>Note</p> <p>Input guardrails are intended to run on user input, so an agent's guardrails only run if the agent is the first agent. You might wonder, why is the <code>guardrails</code> property on the agent instead of passed to <code>Runner.run</code>? It's because guardrails tend to be related to the actual Agent - you'd run different guardrails for different agents, so colocating the code is useful for readability.</p>"},{"location":"guardrails/#output-guardrails","title":"Output guardrails","text":"<p>Output guardrails run in 3 steps:</p> <ol> <li>First, the guardrail receives the same input passed to the agent.</li> <li>Next, the guardrail function runs to produce a <code>GuardrailFunctionOutput</code>, which is then wrapped in an <code>OutputGuardrailResult</code></li> <li>Finally, we check if <code>.tripwire_triggered</code> is true. If true, an <code>OutputGuardrailTripwireTriggered</code> exception is raised, so you can appropriately respond to the user or handle the exception.</li> </ol> <p>Note</p> <p>Output guardrails are intended to run on the final agent input, so an agent's guardrails only run if the agent is the last agent. Similar to the input guardrails, we do this because guardrails tend to be related to the actual Agent - you'd run different guardrails for different agents, so colocating the code is useful for readability.</p>"},{"location":"guardrails/#tripwires","title":"Tripwires","text":"<p>If the input or output fails the guardrail, the Guardrail can signal this with a tripwire. As soon as we see a guardrail that has triggered the tripwires, we immediately raise a <code>{Input,Output}GuardrailTripwireTriggered</code> exception and halt the Agent execution.</p>"},{"location":"guardrails/#implementing-a-guardrail","title":"Implementing a guardrail","text":"<p>You need to provide a function that receives input, and returns a <code>GuardrailFunctionOutput</code>. In this example, we'll do this by running an Agent under the hood.</p> <pre><code>from pydantic import BaseModel\nfrom agents import (\n    Agent,\n    GuardrailFunctionOutput,\n    InputGuardrailTripwireTriggered,\n    RunContextWrapper,\n    Runner,\n    TResponseInputItem,\n    input_guardrail,\n)\n\nclass MathHomeworkOutput(BaseModel):\n    is_math_homework: bool\n    reasoning: str\n\nguardrail_agent = Agent( # (1)!\n    name=\"Guardrail check\",\n    instructions=\"Check if the user is asking you to do their math homework.\",\n    output_type=MathHomeworkOutput,\n)\n\n\n@input_guardrail\nasync def math_guardrail( # (2)!\n    ctx: RunContextWrapper[None], agent: Agent, input: str | list[TResponseInputItem]\n) -&gt; GuardrailFunctionOutput:\n    result = await Runner.run(guardrail_agent, input, context=ctx.context)\n\n    return GuardrailFunctionOutput(\n        output_info=result.final_output, # (3)!\n        tripwire_triggered=result.final_output.is_math_homework,\n    )\n\n\nagent = Agent(  # (4)!\n    name=\"Customer support agent\",\n    instructions=\"You are a customer support agent. You help customers with their questions.\",\n    input_guardrails=[math_guardrail],\n)\n\nasync def main():\n    # This should trip the guardrail\n    try:\n        await Runner.run(agent, \"Hello, can you help me solve for x: 2x + 3 = 11?\")\n        print(\"Guardrail didn't trip - this is unexpected\")\n\n    except InputGuardrailTripwireTriggered:\n        print(\"Math homework guardrail tripped\")\n</code></pre> <ol> <li>We'll use this agent in our guardrail function.</li> <li>This is the guardrail function that receives the agent's input/context, and returns the result.</li> <li>We can include extra information in the guardrail result.</li> <li>This is the actual agent that defines the workflow.</li> </ol> <p>Output guardrails are similar.</p> <pre><code>from pydantic import BaseModel\nfrom agents import (\n    Agent,\n    GuardrailFunctionOutput,\n    OutputGuardrailTripwireTriggered,\n    RunContextWrapper,\n    Runner,\n    output_guardrail,\n)\nclass MessageOutput(BaseModel): # (1)!\n    response: str\n\nclass MathOutput(BaseModel): # (2)!\n    is_math: bool\n    reasoning: str\n\nguardrail_agent = Agent(\n    name=\"Guardrail check\",\n    instructions=\"Check if the output includes any math.\",\n    output_type=MathOutput,\n)\n\n@output_guardrail\nasync def math_guardrail(  # (3)!\n    ctx: RunContextWrapper, agent: Agent, output: MessageOutput\n) -&gt; GuardrailFunctionOutput:\n    result = await Runner.run(guardrail_agent, output.response, context=ctx.context)\n\n    return GuardrailFunctionOutput(\n        output_info=result.final_output,\n        tripwire_triggered=result.final_output.is_math,\n    )\n\nagent = Agent( # (4)!\n    name=\"Customer support agent\",\n    instructions=\"You are a customer support agent. You help customers with their questions.\",\n    output_guardrails=[math_guardrail],\n    output_type=MessageOutput,\n)\n\nasync def main():\n    # This should trip the guardrail\n    try:\n        await Runner.run(agent, \"Hello, can you help me solve for x: 2x + 3 = 11?\")\n        print(\"Guardrail didn't trip - this is unexpected\")\n\n    except OutputGuardrailTripwireTriggered:\n        print(\"Math output guardrail tripped\")\n</code></pre> <ol> <li>This is the actual agent's output type.</li> <li>This is the guardrail's output type.</li> <li>This is the guardrail function that receives the agent's output, and returns the result.</li> <li>This is the actual agent that defines the workflow.</li> </ol>"},{"location":"handoffs/","title":"Handoffs","text":"<p>Handoffs allow an agent to delegate tasks to another agent. This is particularly useful in scenarios where different agents specialize in distinct areas. For example, a customer support app might have agents that each specifically handle tasks like order status, refunds, FAQs, etc.</p> <p>Handoffs are represented as tools to the LLM. So if there's a handoff to an agent named <code>Refund Agent</code>, the tool would be called <code>transfer_to_refund_agent</code>.</p>"},{"location":"handoffs/#creating-a-handoff","title":"Creating a handoff","text":"<p>All agents have a <code>handoffs</code> param, which can either take an <code>Agent</code> directly, or a <code>Handoff</code> object that customizes the Handoff.</p> <p>You can create a handoff using the <code>handoff()</code> function provided by the Agents SDK. This function allows you to specify the agent to hand off to, along with optional overrides and input filters.</p>"},{"location":"handoffs/#basic-usage","title":"Basic Usage","text":"<p>Here's how you can create a simple handoff:</p> <pre><code>from agents import Agent, handoff\n\nbilling_agent = Agent(name=\"Billing agent\")\nrefund_agent = Agent(name=\"Refund agent\")\n\n# (1)!\ntriage_agent = Agent(name=\"Triage agent\", handoffs=[billing_agent, handoff(refund_agent)])\n</code></pre> <ol> <li>You can use the agent directly (as in <code>billing_agent</code>), or you can use the <code>handoff()</code> function.</li> </ol>"},{"location":"handoffs/#customizing-handoffs-via-the-handoff-function","title":"Customizing handoffs via the <code>handoff()</code> function","text":"<p>The <code>handoff()</code> function lets you customize things.</p> <ul> <li><code>agent</code>: This is the agent to which things will be handed off.</li> <li><code>tool_name_override</code>: By default, the <code>Handoff.default_tool_name()</code> function is used, which resolves to <code>transfer_to_&lt;agent_name&gt;</code>. You can override this.</li> <li><code>tool_description_override</code>: Override the default tool description from <code>Handoff.default_tool_description()</code></li> <li><code>on_handoff</code>: A callback function executed when the handoff is invoked. This is useful for things like kicking off some data fetching as soon as you know a handoff is being invoked. This function receives the agent context, and can optionally also receive LLM generated input. The input data is controlled by the <code>input_type</code> param.</li> <li><code>input_type</code>: The type of input expected by the handoff (optional).</li> <li><code>input_filter</code>: This lets you filter the input received by the next agent. See below for more.</li> </ul> <pre><code>from agents import Agent, handoff, RunContextWrapper\n\ndef on_handoff(ctx: RunContextWrapper[None]):\n    print(\"Handoff called\")\n\nagent = Agent(name=\"My agent\")\n\nhandoff_obj = handoff(\n    agent=agent,\n    on_handoff=on_handoff,\n    tool_name_override=\"custom_handoff_tool\",\n    tool_description_override=\"Custom description\",\n)\n</code></pre>"},{"location":"handoffs/#handoff-inputs","title":"Handoff inputs","text":"<p>In certain situations, you want the LLM to provide some data when it calls a handoff. For example, imagine a handoff to an \"Escalation agent\". You might want a reason to be provided, so you can log it.</p> <pre><code>from pydantic import BaseModel\n\nfrom agents import Agent, handoff, RunContextWrapper\n\nclass EscalationData(BaseModel):\n    reason: str\n\nasync def on_handoff(ctx: RunContextWrapper[None], input_data: EscalationData):\n    print(f\"Escalation agent called with reason: {input_data.reason}\")\n\nagent = Agent(name=\"Escalation agent\")\n\nhandoff_obj = handoff(\n    agent=agent,\n    on_handoff=on_handoff,\n    input_type=EscalationData,\n)\n</code></pre>"},{"location":"handoffs/#input-filters","title":"Input filters","text":"<p>When a handoff occurs, it's as though the new agent takes over the conversation, and gets to see the entire previous conversation history. If you want to change this, you can set an <code>input_filter</code>. An input filter is a function that receives the existing input via a <code>HandoffInputData</code>, and must return a new <code>HandoffInputData</code>.</p> <p>There are some common patterns (for example removing all tool calls from the history), which are implemented for you in <code>agents.extensions.handoff_filters</code></p> <pre><code>from agents import Agent, handoff\nfrom agents.extensions import handoff_filters\n\nagent = Agent(name=\"FAQ agent\")\n\nhandoff_obj = handoff(\n    agent=agent,\n    input_filter=handoff_filters.remove_all_tools, # (1)!\n)\n</code></pre> <ol> <li>This will automatically remove all tools from the history when <code>FAQ agent</code> is called.</li> </ol>"},{"location":"handoffs/#recommended-prompts","title":"Recommended prompts","text":"<p>To make sure that LLMs understand handoffs properly, we recommend including information about handoffs in your agents. We have a suggested prefix in <code>agents.extensions.handoff_prompt.RECOMMENDED_PROMPT_PREFIX</code>, or you can call <code>agents.extensions.handoff_prompt.prompt_with_handoff_instructions</code> to automatically add recommended data to your prompts.</p> <pre><code>from agents import Agent\nfrom agents.extensions.handoff_prompt import RECOMMENDED_PROMPT_PREFIX\n\nbilling_agent = Agent(\n    name=\"Billing agent\",\n    instructions=f\"\"\"{RECOMMENDED_PROMPT_PREFIX}\n    &lt;Fill in the rest of your prompt here&gt;.\"\"\",\n)\n</code></pre>"},{"location":"models/","title":"Models","text":"<p>The Agents SDK comes with out-of-the-box support for OpenAI models in two flavors:</p> <ul> <li>Recommended: the <code>OpenAIResponsesModel</code>, which calls OpenAI APIs using the new Responses API.</li> <li>The <code>OpenAIChatCompletionsModel</code>, which calls OpenAI APIs using the Chat Completions API.</li> </ul>"},{"location":"models/#mixing-and-matching-models","title":"Mixing and matching models","text":"<p>Within a single workflow, you may want to use different models for each agent. For example, you could use a smaller, faster model for triage, while using a larger, more capable model for complex tasks. When configuring an <code>Agent</code>, you can select a specific model by either:</p> <ol> <li>Passing the name of an OpenAI model.</li> <li>Passing any model name + a <code>ModelProvider</code> that can map that name to a Model instance.</li> <li>Directly providing a <code>Model</code> implementation.</li> </ol> <p>Note</p> <p>While our SDK supports both the <code>OpenAIResponsesModel</code> and the <code>OpenAIChatCompletionsModel</code> shapes, we recommend using a single model shape for each workflow because the two shapes support a different set of features and tools. If your workflow requires mixing and matching model shapes, make sure that all the features you're using are available on both.</p> <pre><code>from agents import Agent, Runner, AsyncOpenAI, OpenAIChatCompletionsModel\nimport asyncio\n\nspanish_agent = Agent(\n    name=\"Spanish agent\",\n    instructions=\"You only speak Spanish.\",\n    model=\"o3-mini\", # (1)!\n)\n\nenglish_agent = Agent(\n    name=\"English agent\",\n    instructions=\"You only speak English\",\n    model=OpenAIChatCompletionsModel( # (2)!\n        model=\"gpt-4o\",\n        openai_client=AsyncOpenAI()\n    ),\n)\n\ntriage_agent = Agent(\n    name=\"Triage agent\",\n    instructions=\"Handoff to the appropriate agent based on the language of the request.\",\n    handoffs=[spanish_agent, english_agent],\n    model=\"gpt-3.5-turbo\",\n)\n\nasync def main():\n    result = await Runner.run(triage_agent, input=\"Hola, \u00bfc\u00f3mo est\u00e1s?\")\n    print(result.final_output)\n</code></pre> <ol> <li>Sets the name of an OpenAI model directly.</li> <li>Provides a <code>Model</code> implementation.</li> </ol>"},{"location":"models/#using-other-llm-providers","title":"Using other LLM providers","text":"<p>You can use other LLM providers in 3 ways (examples here):</p> <ol> <li><code>set_default_openai_client</code> is useful in cases where you want to globally use an instance of <code>AsyncOpenAI</code> as the LLM client. This is for cases where the LLM provider has an OpenAI compatible API endpoint, and you can set the <code>base_url</code> and <code>api_key</code>. See a configurable example in examples/model_providers/custom_example_global.py.</li> <li><code>ModelProvider</code> is at the <code>Runner.run</code> level. This lets you say \"use a custom model provider for all agents in this run\". See a configurable example in examples/model_providers/custom_example_provider.py.</li> <li><code>Agent.model</code> lets you specify the model on a specific Agent instance. This enables you to mix and match different providers for different agents. See a configurable example in examples/model_providers/custom_example_agent.py.</li> </ol> <p>In cases where you do not have an API key from <code>platform.openai.com</code>, we recommend disabling tracing via <code>set_tracing_disabled()</code>, or setting up a different tracing processor.</p> <p>Note</p> <p>In these examples, we use the Chat Completions API/model, because most LLM providers don't yet support the Responses API. If your LLM provider does support it, we recommend using Responses.</p>"},{"location":"models/#common-issues-with-using-other-llm-providers","title":"Common issues with using other LLM providers","text":""},{"location":"models/#tracing-client-error-401","title":"Tracing client error 401","text":"<p>If you get errors related to tracing, this is because traces are uploaded to OpenAI servers, and you don't have an OpenAI API key. You have three options to resolve this:</p> <ol> <li>Disable tracing entirely: <code>set_tracing_disabled(True)</code>.</li> <li>Set an OpenAI key for tracing: <code>set_tracing_export_api_key(...)</code>. This API key will only be used for uploading traces, and must be from platform.openai.com.</li> <li>Use a non-OpenAI trace processor. See the tracing docs.</li> </ol>"},{"location":"models/#responses-api-support","title":"Responses API support","text":"<p>The SDK uses the Responses API by default, but most other LLM providers don't yet support it. You may see 404s or similar issues as a result. To resolve, you have two options:</p> <ol> <li>Call <code>set_default_openai_api(\"chat_completions\")</code>. This works if you are setting <code>OPENAI_API_KEY</code> and <code>OPENAI_BASE_URL</code> via environment vars.</li> <li>Use <code>OpenAIChatCompletionsModel</code>. There are examples here.</li> </ol>"},{"location":"models/#structured-outputs-support","title":"Structured outputs support","text":"<p>Some model providers don't have support for structured outputs. This sometimes results in an error that looks something like this:</p> <pre><code>BadRequestError: Error code: 400 - {'error': {'message': \"'response_format.type' : value is not one of the allowed values ['text','json_object']\", 'type': 'invalid_request_error'}}\n</code></pre> <p>This is a shortcoming of some model providers - they support JSON outputs, but don't allow you to specify the <code>json_schema</code> to use for the output. We are working on a fix for this, but we suggest relying on providers that do have support for JSON schema output, because otherwise your app will often break because of malformed JSON.</p>"},{"location":"multi_agent/","title":"Orchestrating multiple agents","text":"<p>Orchestration refers to the flow of agents in your app. Which agents run, in what order, and how do they decide what happens next? There are two main ways to orchestrate agents:</p> <ol> <li>Allowing the LLM to make decisions: this uses the intelligence of an LLM to plan, reason, and decide on what steps to take based on that.</li> <li>Orchestrating via code: determining the flow of agents via your code.</li> </ol> <p>You can mix and match these patterns. Each has their own tradeoffs, described below.</p>"},{"location":"multi_agent/#orchestrating-via-llm","title":"Orchestrating via LLM","text":"<p>An agent is an LLM equipped with instructions, tools and handoffs. This means that given an open-ended task, the LLM can autonomously plan how it will tackle the task, using tools to take actions and acquire data, and using handoffs to delegate tasks to sub-agents. For example, a research agent could be equipped with tools like:</p> <ul> <li>Web search to find information online</li> <li>File search and retrieval to search through proprietary data and connections</li> <li>Computer use to take actions on a computer</li> <li>Code execution to do data analysis</li> <li>Handoffs to specialized agents that are great at planning, report writing and more.</li> </ul> <p>This pattern is great when the task is open-ended and you want to rely on the intelligence of an LLM. The most important tactics here are:</p> <ol> <li>Invest in good prompts. Make it clear what tools are available, how to use them, and what parameters it must operate within.</li> <li>Monitor your app and iterate on it. See where things go wrong, and iterate on your prompts.</li> <li>Allow the agent to introspect and improve. For example, run it in a loop, and let it critique itself; or, provide error messages and let it improve.</li> <li>Have specialized agents that excel in one task, rather than having a general purpose agent that is expected to be good at anything.</li> <li>Invest in evals. This lets you train your agents to improve and get better at tasks.</li> </ol>"},{"location":"multi_agent/#orchestrating-via-code","title":"Orchestrating via code","text":"<p>While orchestrating via LLM is powerful, orchestrating via code makes tasks more deterministic and predictable, in terms of speed, cost and performance. Common patterns here are:</p> <ul> <li>Using structured outputs to generate well formed data that you can inspect with your code. For example, you might ask an agent to classify the task into a few categories, and then pick the next agent based on the category.</li> <li>Chaining multiple agents by transforming the output of one into the input of the next. You can decompose a task like writing a blog post into a series of steps - do research, write an outline, write the blog post, critique it, and then improve it.</li> <li>Running the agent that performs the task in a <code>while</code> loop with an agent that evaluates and provides feedback, until the evaluator says the output passes certain criteria.</li> <li>Running multiple agents in parallel, e.g. via Python primitives like <code>asyncio.gather</code>. This is useful for speed when you have multiple tasks that don't depend on each other.</li> </ul> <p>We have a number of examples in <code>examples/agent_patterns</code>.</p>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#create-a-project-and-virtual-environment","title":"Create a project and virtual environment","text":"<p>You'll only need to do this once.</p> <pre><code>mkdir my_project\ncd my_project\npython -m venv .venv\n</code></pre>"},{"location":"quickstart/#activate-the-virtual-environment","title":"Activate the virtual environment","text":"<p>Do this every time you start a new terminal session.</p> <pre><code>source .venv/bin/activate\n</code></pre>"},{"location":"quickstart/#install-the-agents-sdk","title":"Install the Agents SDK","text":"<pre><code>pip install openai-agents # or `uv add openai-agents`, etc\n</code></pre>"},{"location":"quickstart/#set-an-openai-api-key","title":"Set an OpenAI API key","text":"<p>If you don't have one, follow these instructions to create an OpenAI API key.</p> <pre><code>export OPENAI_API_KEY=sk-...\n</code></pre>"},{"location":"quickstart/#create-your-first-agent","title":"Create your first agent","text":"<p>Agents are defined with instructions, a name, and optional config (such as <code>model_config</code>)</p> <pre><code>from agents import Agent\n\nagent = Agent(\n    name=\"Math Tutor\",\n    instructions=\"You provide help with math problems. Explain your reasoning at each step and include examples\",\n)\n</code></pre>"},{"location":"quickstart/#add-a-few-more-agents","title":"Add a few more agents","text":"<p>Additional agents can be defined in the same way. <code>handoff_descriptions</code> provide additional context for determining handoff routing</p> <pre><code>from agents import Agent\n\nhistory_tutor_agent = Agent(\n    name=\"History Tutor\",\n    handoff_description=\"Specialist agent for historical questions\",\n    instructions=\"You provide assistance with historical queries. Explain important events and context clearly.\",\n)\n\nmath_tutor_agent = Agent(\n    name=\"Math Tutor\",\n    handoff_description=\"Specialist agent for math questions\",\n    instructions=\"You provide help with math problems. Explain your reasoning at each step and include examples\",\n)\n</code></pre>"},{"location":"quickstart/#define-your-handoffs","title":"Define your handoffs","text":"<p>On each agent, you can define an inventory of outgoing handoff options that the agent can choose from to decide how to make progress on their task.</p> <pre><code>triage_agent = Agent(\n    name=\"Triage Agent\",\n    instructions=\"You determine which agent to use based on the user's homework question\",\n    handoffs=[history_tutor_agent, math_tutor_agent]\n)\n</code></pre>"},{"location":"quickstart/#run-the-agent-orchestration","title":"Run the agent orchestration","text":"<p>Let's check that the workflow runs and the triage agent correctly routes between the two specialist agents.</p> <pre><code>from agents import Runner\n\nasync def main():\n    result = await Runner.run(triage_agent, \"What is the capital of France?\")\n    print(result.final_output)\n</code></pre>"},{"location":"quickstart/#add-a-guardrail","title":"Add a guardrail","text":"<p>You can define custom guardrails to run on the input or output.</p> <pre><code>from agents import GuardrailFunctionOutput, Agent, Runner\nfrom pydantic import BaseModel\n\nclass HomeworkOutput(BaseModel):\n    is_homework: bool\n    reasoning: str\n\nguardrail_agent = Agent(\n    name=\"Guardrail check\",\n    instructions=\"Check if the user is asking about homework.\",\n    output_type=HomeworkOutput,\n)\n\nasync def homework_guardrail(ctx, agent, input_data):\n    result = await Runner.run(guardrail_agent, input_data, context=ctx.context)\n    final_output = result.final_output_as(HomeworkOutput)\n    return GuardrailFunctionOutput(\n        output_info=final_output,\n        tripwire_triggered=not final_output.is_homework,\n    )\n</code></pre>"},{"location":"quickstart/#put-it-all-together","title":"Put it all together","text":"<p>Let's put it all together and run the entire workflow, using handoffs and the input guardrail.</p> <pre><code>from agents import Agent, InputGuardrail,GuardrailFunctionOutput, Runner\nfrom pydantic import BaseModel\nimport asyncio\n\nclass HomeworkOutput(BaseModel):\n    is_homework: bool\n    reasoning: str\n\nguardrail_agent = Agent(\n    name=\"Guardrail check\",\n    instructions=\"Check if the user is asking about homework.\",\n    output_type=HomeworkOutput,\n)\n\nmath_tutor_agent = Agent(\n    name=\"Math Tutor\",\n    handoff_description=\"Specialist agent for math questions\",\n    instructions=\"You provide help with math problems. Explain your reasoning at each step and include examples\",\n)\n\nhistory_tutor_agent = Agent(\n    name=\"History Tutor\",\n    handoff_description=\"Specialist agent for historical questions\",\n    instructions=\"You provide assistance with historical queries. Explain important events and context clearly.\",\n)\n\n\nasync def homework_guardrail(ctx, agent, input_data):\n    result = await Runner.run(guardrail_agent, input_data, context=ctx.context)\n    final_output = result.final_output_as(HomeworkOutput)\n    return GuardrailFunctionOutput(\n        output_info=final_output,\n        tripwire_triggered=not final_output.is_homework,\n    )\n\ntriage_agent = Agent(\n    name=\"Triage Agent\",\n    instructions=\"You determine which agent to use based on the user's homework question\",\n    handoffs=[history_tutor_agent, math_tutor_agent],\n    input_guardrails=[\n        InputGuardrail(guardrail_function=homework_guardrail),\n    ],\n)\n\nasync def main():\n    result = await Runner.run(triage_agent, \"who was the first president of the united states?\")\n    print(result.final_output)\n\n    result = await Runner.run(triage_agent, \"what is life\")\n    print(result.final_output)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"quickstart/#view-your-traces","title":"View your traces","text":"<p>To review what happened during your agent run, navigate to the Trace viewer in the OpenAI Dashboard to view traces of your agent runs.</p>"},{"location":"quickstart/#next-steps","title":"Next steps","text":"<p>Learn how to build more complex agentic flows:</p> <ul> <li>Learn about how to configure Agents.</li> <li>Learn about running agents.</li> <li>Learn about tools, guardrails and models.</li> </ul>"},{"location":"results/","title":"Results","text":"<p>When you call the <code>Runner.run</code> methods, you either get a:</p> <ul> <li><code>RunResult</code> if you call <code>run</code> or <code>run_sync</code></li> <li><code>RunResultStreaming</code> if you call <code>run_streamed</code></li> </ul> <p>Both of these inherit from <code>RunResultBase</code>, which is where most useful information is present.</p>"},{"location":"results/#final-output","title":"Final output","text":"<p>The <code>final_output</code> property contains the final output of the last agent that ran. This is either:</p> <ul> <li>a <code>str</code>, if the last agent didn't have an <code>output_type</code> defined</li> <li>an object of type <code>last_agent.output_type</code>, if the agent had an output type defined.</li> </ul> <p>Note</p> <p><code>final_output</code> is of type <code>Any</code>. We can't statically type this, because of handoffs. If handoffs occur, that means any Agent might be the last agent, so we don't statically know the set of possible output types.</p>"},{"location":"results/#inputs-for-the-next-turn","title":"Inputs for the next turn","text":"<p>You can use <code>result.to_input_list()</code> to turn the result into an input list that concatenates the original input you provided, to the items generated during the agent run. This makes it convenient to take the outputs of one agent run and pass them into another run, or to run it in a loop and append new user inputs each time.</p>"},{"location":"results/#last-agent","title":"Last agent","text":"<p>The <code>last_agent</code> property contains the last agent that ran. Depending on your application, this is often useful for the next time the user inputs something. For example, if you have a frontline triage agent that hands off to a language-specific agent, you can store the last agent, and re-use it the next time the user messages the agent.</p>"},{"location":"results/#new-items","title":"New items","text":"<p>The <code>new_items</code> property contains the new items generated during the run. The items are <code>RunItem</code>s. A run item wraps the raw item generated by the LLM.</p> <ul> <li><code>MessageOutputItem</code> indicates a message from the LLM. The raw item is the message generated.</li> <li><code>HandoffCallItem</code> indicates that the LLM called the handoff tool. The raw item is the tool call item from the LLM.</li> <li><code>HandoffOutputItem</code> indicates that a handoff occurred. The raw item is the tool response to the handoff tool call. You can also access the source/target agents from the item.</li> <li><code>ToolCallItem</code> indicates that the LLM invoked a tool.</li> <li><code>ToolCallOutputItem</code> indicates that a tool was called. The raw item is the tool response. You can also access the tool output from the item.</li> <li><code>ReasoningItem</code> indicates a reasoning item from the LLM. The raw item is the reasoning generated.</li> </ul>"},{"location":"results/#other-information","title":"Other information","text":""},{"location":"results/#guardrail-results","title":"Guardrail results","text":"<p>The <code>input_guardrail_results</code> and <code>output_guardrail_results</code> properties contain the results of the guardrails, if any. Guardrail results can sometimes contain useful information you want to log or store, so we make these available to you.</p>"},{"location":"results/#raw-responses","title":"Raw responses","text":"<p>The <code>raw_responses</code> property contains the <code>ModelResponse</code>s generated by the LLM.</p>"},{"location":"results/#original-input","title":"Original input","text":"<p>The <code>input</code> property contains the original input you provided to the <code>run</code> method. In most cases you won't need this, but it's available in case you do.</p>"},{"location":"running_agents/","title":"Running agents","text":"<p>You can run agents via the <code>Runner</code> class. You have 3 options:</p> <ol> <li><code>Runner.run()</code>, which runs async and returns a <code>RunResult</code>.</li> <li><code>Runner.run_sync()</code>, which is a sync method and just runs <code>.run()</code> under the hood.</li> <li><code>Runner.run_streamed()</code>, which runs async and returns a <code>RunResultStreaming</code>. It calls the LLM in streaming mode, and streams those events to you as they are received.</li> </ol> <pre><code>from agents import Agent, Runner\n\nasync def main():\n    agent = Agent(name=\"Assistant\", instructions=\"You are a helpful assistant\")\n\n    result = await Runner.run(agent, \"Write a haiku about recursion in programming.\")\n    print(result.final_output)\n    # Code within the code,\n    # Functions calling themselves,\n    # Infinite loop's dance.\n</code></pre> <p>Read more in the results guide.</p>"},{"location":"running_agents/#the-agent-loop","title":"The agent loop","text":"<p>When you use the run method in <code>Runner</code>, you pass in a starting agent and input. The input can either be a string (which is considered a user message), or a list of input items, which are the items in the OpenAI Responses API.</p> <p>The runner then runs a loop:</p> <ol> <li>We call the LLM for the current agent, with the current input.</li> <li>The LLM produces its output.<ol> <li>If the LLM returns a <code>final_output</code>, the loop ends and we return the result.</li> <li>If the LLM does a handoff, we update the current agent and input, and re-run the loop.</li> <li>If the LLM produces tool calls, we run those tool calls, append the results, and re-run the loop.</li> </ol> </li> <li>If we exceed the <code>max_turns</code> passed, we raise a <code>MaxTurnsExceeded</code> exception.</li> </ol> <p>Note</p> <p>The rule for whether the LLM output is considered as a \"final output\" is that it produces text output with the desired type, and there are no tool calls.</p>"},{"location":"running_agents/#streaming","title":"Streaming","text":"<p>Streaming allows you to additionally receive streaming events as the LLM runs. Once the stream is done, the <code>RunResultStreaming</code> will contain the complete information about the run, including all the new outputs produces. You can call <code>.stream_events()</code> for the streaming events. Read more in the streaming guide.</p>"},{"location":"running_agents/#run-config","title":"Run config","text":"<p>The <code>run_config</code> parameter lets you configure some global settings for the agent run:</p> <ul> <li><code>model</code>: Allows setting a global LLM model to use, irrespective of what <code>model</code> each Agent has.</li> <li><code>model_provider</code>: A model provider for looking up model names, which defaults to OpenAI.</li> <li><code>model_settings</code>: Overrides agent-specific settings. For example, you can set a global <code>temperature</code> or <code>top_p</code>.</li> <li><code>input_guardrails</code>, <code>output_guardrails</code>: A list of input or output guardrails to include on all runs.</li> <li><code>handoff_input_filter</code>: A global input filter to apply to all handoffs, if the handoff doesn't already have one. The input filter allows you to edit the inputs that are sent to the new agent. See the documentation in <code>Handoff.input_filter</code> for more details.</li> <li><code>tracing_disabled</code>: Allows you to disable tracing for the entire run.</li> <li><code>trace_include_sensitive_data</code>: Configures whether traces will include potentially sensitive data, such as LLM and tool call inputs/outputs.</li> <li><code>workflow_name</code>, <code>trace_id</code>, <code>group_id</code>: Sets the tracing workflow name, trace ID and trace group ID for the run. We recommend at least setting <code>workflow_name</code>. The session ID is an optional field that lets you link traces across multiple runs.</li> <li><code>trace_metadata</code>: Metadata to include on all traces.</li> </ul>"},{"location":"running_agents/#conversationschat-threads","title":"Conversations/chat threads","text":"<p>Calling any of the run methods can result in one or more agents running (and hence one or more LLM calls), but it represents a single logical turn in a chat conversation. For example:</p> <ol> <li>User turn: user enter text</li> <li>Runner run: first agent calls LLM, runs tools, does a handoff to a second agent, second agent runs more tools, and then produces an output.</li> </ol> <p>At the end of the agent run, you can choose what to show to the user. For example, you might show the user every new item generated by the agents, or just the final output. Either way, the user might then ask a followup question, in which case you can call the run method again.</p> <p>You can use the base <code>RunResultBase.to_input_list()</code> method to get the inputs for the next turn.</p> <pre><code>async def main():\n    agent = Agent(name=\"Assistant\", instructions=\"Reply very concisely.\")\n\n    with trace(workflow_name=\"Conversation\", group_id=thread_id):\n        # First turn\n        result = await Runner.run(agent, \"What city is the Golden Gate Bridge in?\")\n        print(result.final_output)\n        # San Francisco\n\n        # Second turn\n        new_input = result.to_input_list() + [{\"role\": \"user\", \"content\": \"What state is it in?\"}]\n        result = await Runner.run(agent, new_input)\n        print(result.final_output)\n        # California\n</code></pre>"},{"location":"running_agents/#exceptions","title":"Exceptions","text":"<p>The SDK raises exceptions in certain cases. The full list is in <code>agents.exceptions</code>. As an overview:</p> <ul> <li><code>AgentsException</code> is the base class for all exceptions raised in the SDK.</li> <li><code>MaxTurnsExceeded</code> is raised when the run exceeds the <code>max_turns</code> passed to the run methods.</li> <li><code>ModelBehaviorError</code> is raised when the model produces invalid outputs, e.g. malformed JSON or using non-existent tools.</li> <li><code>UserError</code> is raised when you (the person writing code using the SDK) make an error using the SDK.</li> <li><code>InputGuardrailTripwireTriggered</code>, <code>OutputGuardrailTripwireTriggered</code> is raised when a guardrail is tripped.</li> </ul>"},{"location":"streaming/","title":"Streaming","text":"<p>Streaming lets you subscribe to updates of the agent run as it proceeds. This can be useful for showing the end-user progress updates and partial responses.</p> <p>To stream, you can call <code>Runner.run_streamed()</code>, which will give you a <code>RunResultStreaming</code>. Calling <code>result.stream_events()</code> gives you an async stream of <code>StreamEvent</code> objects, which are described below.</p>"},{"location":"streaming/#raw-response-events","title":"Raw response events","text":"<p><code>RawResponsesStreamEvent</code> are raw events passed directly from the LLM. They are in OpenAI Responses API format, which means each event has a type (like <code>response.created</code>, <code>response.output_text.delta</code>, etc) and data. These events are useful if you want to stream response messages to the user as soon as they are generated.</p> <p>For example, this will output the text generated by the LLM token-by-token.</p> <pre><code>import asyncio\nfrom openai.types.responses import ResponseTextDeltaEvent\nfrom agents import Agent, Runner\n\nasync def main():\n    agent = Agent(\n        name=\"Joker\",\n        instructions=\"You are a helpful assistant.\",\n    )\n\n    result = Runner.run_streamed(agent, input=\"Please tell me 5 jokes.\")\n    async for event in result.stream_events():\n        if event.type == \"raw_response_event\" and isinstance(event.data, ResponseTextDeltaEvent):\n            print(event.data.delta, end=\"\", flush=True)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"streaming/#run-item-events-and-agent-events","title":"Run item events and agent events","text":"<p><code>RunItemStreamEvent</code>s are higher level events. They inform you when an item has been fully generated. This allows you to push progress updates at the level of \"message generated\", \"tool ran\", etc, instead of each token. Similarly, <code>AgentUpdatedStreamEvent</code> gives you updates when the current agent changes (e.g. as the result of a handoff).</p> <p>For example, this will ignore raw events and stream updates to the user.</p> <pre><code>import asyncio\nimport random\nfrom agents import Agent, ItemHelpers, Runner, function_tool\n\n@function_tool\ndef how_many_jokes() -&gt; int:\n    return random.randint(1, 10)\n\n\nasync def main():\n    agent = Agent(\n        name=\"Joker\",\n        instructions=\"First call the `how_many_jokes` tool, then tell that many jokes.\",\n        tools=[how_many_jokes],\n    )\n\n    result = Runner.run_streamed(\n        agent,\n        input=\"Hello\",\n    )\n    print(\"=== Run starting ===\")\n\n    async for event in result.stream_events():\n        # We'll ignore the raw responses event deltas\n        if event.type == \"raw_response_event\":\n            continue\n        # When the agent updates, print that\n        elif event.type == \"agent_updated_stream_event\":\n            print(f\"Agent updated: {event.new_agent.name}\")\n            continue\n        # When items are generated, print them\n        elif event.type == \"run_item_stream_event\":\n            if event.item.type == \"tool_call_item\":\n                print(\"-- Tool was called\")\n            elif event.item.type == \"tool_call_output_item\":\n                print(f\"-- Tool output: {event.item.output}\")\n            elif event.item.type == \"message_output_item\":\n                print(f\"-- Message output:\\n {ItemHelpers.text_message_output(event.item)}\")\n            else:\n                pass  # Ignore other event types\n\n    print(\"=== Run complete ===\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"tools/","title":"Tools","text":"<p>Tools let agents take actions: things like fetching data, running code, calling external APIs, and even using a computer. There are three classes of tools in the Agent SDK:</p> <ul> <li>Hosted tools: these run on LLM servers alongside the AI models. OpenAI offers retrieval, web search and computer use as hosted tools.</li> <li>Function calling: these allow you to use any Python function as a tool.</li> <li>Agents as tools: this allows you to use an agent as a tool, allowing Agents to call other agents without handing off to them.</li> </ul>"},{"location":"tools/#hosted-tools","title":"Hosted tools","text":"<p>OpenAI offers a few built-in tools when using the <code>OpenAIResponsesModel</code>:</p> <ul> <li>The <code>WebSearchTool</code> lets an agent search the web.</li> <li>The <code>FileSearchTool</code> allows retrieving information from your OpenAI Vector Stores.</li> <li>The <code>ComputerTool</code> allows automating computer use tasks.</li> </ul> <pre><code>from agents import Agent, FileSearchTool, Runner, WebSearchTool\n\nagent = Agent(\n    name=\"Assistant\",\n    tools=[\n        WebSearchTool(),\n        FileSearchTool(\n            max_num_results=3,\n            vector_store_ids=[\"VECTOR_STORE_ID\"],\n        ),\n    ],\n)\n\nasync def main():\n    result = await Runner.run(agent, \"Which coffee shop should I go to, taking into account my preferences and the weather today in SF?\")\n    print(result.final_output)\n</code></pre>"},{"location":"tools/#function-tools","title":"Function tools","text":"<p>You can use any Python function as a tool. The Agents SDK will setup the tool automatically:</p> <ul> <li>The name of the tool will be the name of the Python function (or you can provide a name)</li> <li>Tool description will be taken from the docstring of the function (or you can provide a description)</li> <li>The schema for the function inputs is automatically created from the function's arguments</li> <li>Descriptions for each input are taken from the docstring of the function, unless disabled</li> </ul> <p>We use Python's <code>inspect</code> module to extract the function signature, along with <code>griffe</code> to parse docstrings and <code>pydantic</code> for schema creation.</p> <pre><code>import json\n\nfrom typing_extensions import TypedDict, Any\n\nfrom agents import Agent, FunctionTool, RunContextWrapper, function_tool\n\n\nclass Location(TypedDict):\n    lat: float\n    long: float\n\n@function_tool  # (1)!\nasync def fetch_weather(location: Location) -&gt; str:\n    # (2)!\n    \"\"\"Fetch the weather for a given location.\n\n    Args:\n        location: The location to fetch the weather for.\n    \"\"\"\n    # In real life, we'd fetch the weather from a weather API\n    return \"sunny\"\n\n\n@function_tool(name_override=\"fetch_data\")  # (3)!\ndef read_file(ctx: RunContextWrapper[Any], path: str, directory: str | None = None) -&gt; str:\n    \"\"\"Read the contents of a file.\n\n    Args:\n        path: The path to the file to read.\n        directory: The directory to read the file from.\n    \"\"\"\n    # In real life, we'd read the file from the file system\n    return \"&lt;file contents&gt;\"\n\n\nagent = Agent(\n    name=\"Assistant\",\n    tools=[fetch_weather, read_file],  # (4)!\n)\n\nfor tool in agent.tools:\n    if isinstance(tool, FunctionTool):\n        print(tool.name)\n        print(tool.description)\n        print(json.dumps(tool.params_json_schema, indent=2))\n        print()\n</code></pre> <ol> <li>You can use any Python types as arguments to your functions, and the function can be sync or async.</li> <li>Docstrings, if present, are used to capture descriptions and argument descriptions</li> <li>Functions can optionally take the <code>context</code> (must be the first argument). You can also set overrides, like the name of the tool, description, which docstring style to use, etc.</li> <li>You can pass the decorated functions to the list of tools.</li> </ol> Expand to see output <pre><code>fetch_weather\nFetch the weather for a given location.\n{\n\"$defs\": {\n  \"Location\": {\n    \"properties\": {\n      \"lat\": {\n        \"title\": \"Lat\",\n        \"type\": \"number\"\n      },\n      \"long\": {\n        \"title\": \"Long\",\n        \"type\": \"number\"\n      }\n    },\n    \"required\": [\n      \"lat\",\n      \"long\"\n    ],\n    \"title\": \"Location\",\n    \"type\": \"object\"\n  }\n},\n\"properties\": {\n  \"location\": {\n    \"$ref\": \"#/$defs/Location\",\n    \"description\": \"The location to fetch the weather for.\"\n  }\n},\n\"required\": [\n  \"location\"\n],\n\"title\": \"fetch_weather_args\",\n\"type\": \"object\"\n}\n\nfetch_data\nRead the contents of a file.\n{\n\"properties\": {\n  \"path\": {\n    \"description\": \"The path to the file to read.\",\n    \"title\": \"Path\",\n    \"type\": \"string\"\n  },\n  \"directory\": {\n    \"anyOf\": [\n      {\n        \"type\": \"string\"\n      },\n      {\n        \"type\": \"null\"\n      }\n    ],\n    \"default\": null,\n    \"description\": \"The directory to read the file from.\",\n    \"title\": \"Directory\"\n  }\n},\n\"required\": [\n  \"path\"\n],\n\"title\": \"fetch_data_args\",\n\"type\": \"object\"\n}\n</code></pre>"},{"location":"tools/#custom-function-tools","title":"Custom function tools","text":"<p>Sometimes, you don't want to use a Python function as a tool. You can directly create a <code>FunctionTool</code> if you prefer. You'll need to provide:</p> <ul> <li><code>name</code></li> <li><code>description</code></li> <li><code>params_json_schema</code>, which is the JSON schema for the arguments</li> <li><code>on_invoke_tool</code>, which is an async function that receives the context and the arguments as a JSON string, and must return the tool output as a string.</li> </ul> <pre><code>from typing import Any\n\nfrom pydantic import BaseModel\n\nfrom agents import RunContextWrapper, FunctionTool\n\n\n\ndef do_some_work(data: str) -&gt; str:\n    return \"done\"\n\n\nclass FunctionArgs(BaseModel):\n    username: str\n    age: int\n\n\nasync def run_function(ctx: RunContextWrapper[Any], args: str) -&gt; str:\n    parsed = FunctionArgs.model_validate_json(args)\n    return do_some_work(data=f\"{parsed.username} is {parsed.age} years old\")\n\n\ntool = FunctionTool(\n    name=\"process_user\",\n    description=\"Processes extracted user data\",\n    params_json_schema=FunctionArgs.model_json_schema(),\n    on_invoke_tool=run_function,\n)\n</code></pre>"},{"location":"tools/#automatic-argument-and-docstring-parsing","title":"Automatic argument and docstring parsing","text":"<p>As mentioned before, we automatically parse the function signature to extract the schema for the tool, and we parse the docstring to extract descriptions for the tool and for individual arguments. Some notes on that:</p> <ol> <li>The signature parsing is done via the <code>inspect</code> module. We use type annotations to understand the types for the arguments, and dynamically build a Pydantic model to represent the overall schema. It supports most types, including Python primitives, Pydantic models, TypedDicts, and more.</li> <li>We use <code>griffe</code> to parse docstrings. Supported docstring formats are <code>google</code>, <code>sphinx</code> and <code>numpy</code>. We attempt to automatically detect the docstring format, but this is best-effort and you can explicitly set it when calling <code>function_tool</code>. You can also disable docstring parsing by setting <code>use_docstring_info</code> to <code>False</code>.</li> </ol> <p>The code for the schema extraction lives in <code>agents.function_schema</code>.</p>"},{"location":"tools/#agents-as-tools","title":"Agents as tools","text":"<p>In some workflows, you may want a central agent to orchestrate a network of specialized agents, instead of handing off control. You can do this by modeling agents as tools.</p> <pre><code>from agents import Agent, Runner\nimport asyncio\n\nspanish_agent = Agent(\n    name=\"Spanish agent\",\n    instructions=\"You translate the user's message to Spanish\",\n)\n\nfrench_agent = Agent(\n    name=\"French agent\",\n    instructions=\"You translate the user's message to French\",\n)\n\norchestrator_agent = Agent(\n    name=\"orchestrator_agent\",\n    instructions=(\n        \"You are a translation agent. You use the tools given to you to translate.\"\n        \"If asked for multiple translations, you call the relevant tools.\"\n    ),\n    tools=[\n        spanish_agent.as_tool(\n            tool_name=\"translate_to_spanish\",\n            tool_description=\"Translate the user's message to Spanish\",\n        ),\n        french_agent.as_tool(\n            tool_name=\"translate_to_french\",\n            tool_description=\"Translate the user's message to French\",\n        ),\n    ],\n)\n\nasync def main():\n    result = await Runner.run(orchestrator_agent, input=\"Say 'Hello, how are you?' in Spanish.\")\n    print(result.final_output)\n</code></pre>"},{"location":"tools/#handling-errors-in-function-tools","title":"Handling errors in function tools","text":"<p>When you create a function tool via <code>@function_tool</code>, you can pass a <code>failure_error_function</code>. This is a function that provides an error response to the LLM in case the tool call crashes.</p> <ul> <li>By default (i.e. if you don't pass anything), it runs a <code>default_tool_error_function</code> which tells the LLM an error occurred.</li> <li>If you pass your own error function, it runs that instead, and sends the response to the LLM.</li> <li>If you explicitly pass <code>None</code>, then any tool call errors will be re-raised for you to handle. This could be a <code>ModelBehaviorError</code> if the model produced invalid JSON, or a <code>UserError</code> if your code crashed, etc.</li> </ul> <p>If you are manually creating a <code>FunctionTool</code> object, then you must handle errors inside the <code>on_invoke_tool</code> function.</p>"},{"location":"tracing/","title":"Tracing","text":"<p>The Agents SDK includes built-in tracing, collecting a comprehensive record of events during an agent run: LLM generations, tool calls, handoffs, guardrails, and even custom events that occur. Using the Traces dashboard, you can debug, visualize, and monitor your workflows during development and in production.</p> <p>Note</p> <p>Tracing is enabled by default. There are two ways to disable tracing:</p> <ol> <li>You can globally disable tracing by setting the env var <code>OPENAI_AGENTS_DISABLE_TRACING=1</code></li> <li>You can disable tracing for a single run by setting <code>agents.run.RunConfig.tracing_disabled</code> to <code>True</code></li> </ol> <p>For organizations operating under a Zero Data Retention (ZDR) policy using OpenAI's APIs, tracing is unavailable.</p>"},{"location":"tracing/#traces-and-spans","title":"Traces and spans","text":"<ul> <li>Traces represent a single end-to-end operation of a \"workflow\". They're composed of Spans. Traces have the following properties:<ul> <li><code>workflow_name</code>: This is the logical workflow or app. For example \"Code generation\" or \"Customer service\".</li> <li><code>trace_id</code>: A unique ID for the trace. Automatically generated if you don't pass one. Must have the format <code>trace_&lt;32_alphanumeric&gt;</code>.</li> <li><code>group_id</code>: Optional group ID, to link multiple traces from the same conversation. For example, you might use a chat thread ID.</li> <li><code>disabled</code>: If True, the trace will not be recorded.</li> <li><code>metadata</code>: Optional metadata for the trace.</li> </ul> </li> <li>Spans represent operations that have a start and end time. Spans have:<ul> <li><code>started_at</code> and <code>ended_at</code> timestamps.</li> <li><code>trace_id</code>, to represent the trace they belong to</li> <li><code>parent_id</code>, which points to the parent Span of this Span (if any)</li> <li><code>span_data</code>, which is information about the Span. For example, <code>AgentSpanData</code> contains information about the Agent, <code>GenerationSpanData</code> contains information about the LLM generation, etc.</li> </ul> </li> </ul>"},{"location":"tracing/#default-tracing","title":"Default tracing","text":"<p>By default, the SDK traces the following:</p> <ul> <li>The entire <code>Runner.{run, run_sync, run_streamed}()</code> is wrapped in a <code>trace()</code>.</li> <li>Each time an agent runs, it is wrapped in <code>agent_span()</code></li> <li>LLM generations are wrapped in <code>generation_span()</code></li> <li>Function tool calls are each wrapped in <code>function_span()</code></li> <li>Guardrails are wrapped in <code>guardrail_span()</code></li> <li>Handoffs are wrapped in <code>handoff_span()</code></li> </ul> <p>By default, the trace is named \"Agent trace\". You can set this name if you use <code>trace</code>, or you can can configure the name and other properties with the <code>RunConfig</code>.</p> <p>In addition, you can set up custom trace processors to push traces to other destinations (as a replacement, or secondary destination).</p>"},{"location":"tracing/#higher-level-traces","title":"Higher level traces","text":"<p>Sometimes, you might want multiple calls to <code>run()</code> to be part of a single trace. You can do this by wrapping the entire code in a <code>trace()</code>.</p> <pre><code>from agents import Agent, Runner, trace\n\nasync def main():\n    agent = Agent(name=\"Joke generator\", instructions=\"Tell funny jokes.\")\n\n    with trace(\"Joke workflow\"): # (1)!\n        first_result = await Runner.run(agent, \"Tell me a joke\")\n        second_result = await Runner.run(agent, f\"Rate this joke: {first_result.final_output}\")\n        print(f\"Joke: {first_result.final_output}\")\n        print(f\"Rating: {second_result.final_output}\")\n</code></pre> <ol> <li>Because the two calls to <code>Runner.run</code> are wrapped in a <code>with trace()</code>, the individual runs will be part of the overall trace rather than creating two traces.</li> </ol>"},{"location":"tracing/#creating-traces","title":"Creating traces","text":"<p>You can use the <code>trace()</code> function to create a trace. Traces need to be started and finished. You have two options to do so:</p> <ol> <li>Recommended: use the trace as a context manager, i.e. <code>with trace(...) as my_trace</code>. This will automatically start and end the trace at the right time.</li> <li>You can also manually call <code>trace.start()</code> and <code>trace.finish()</code>.</li> </ol> <p>The current trace is tracked via a Python <code>contextvar</code>. This means that it works with concurrency automatically. If you manually start/end a trace, you'll need to pass <code>mark_as_current</code> and <code>reset_current</code> to <code>start()</code>/<code>finish()</code> to update the current trace.</p>"},{"location":"tracing/#creating-spans","title":"Creating spans","text":"<p>You can use the various <code>*_span()</code> methods to create a span. In general, you don't need to manually create spans. A <code>custom_span()</code> function is available for tracking custom span information.</p> <p>Spans are automatically part of the current trace, and are nested under the nearest current span, which is tracked via a Python <code>contextvar</code>.</p>"},{"location":"tracing/#sensitive-data","title":"Sensitive data","text":"<p>Some spans track potentially sensitive data. For example, the <code>generation_span()</code> stores the inputs/outputs of the LLM generation, and <code>function_span()</code> stores the inputs/outputs of function calls. These may contain sensitive data, so you can disable capturing that data via <code>RunConfig.trace_include_sensitive_data</code>.</p>"},{"location":"tracing/#custom-tracing-processors","title":"Custom tracing processors","text":"<p>The high level architecture for tracing is:</p> <ul> <li>At initialization, we create a global <code>TraceProvider</code>, which is responsible for creating traces.</li> <li>We configure the <code>TraceProvider</code> with a <code>BatchTraceProcessor</code> that sends traces/spans in batches to a <code>BackendSpanExporter</code>, which exports the spans and traces to the OpenAI backend in batches.</li> </ul> <p>To customize this default setup, to send traces to alternative or additional backends or modifying exporter behavior, you have two options:</p> <ol> <li><code>add_trace_processor()</code> lets you add an additional trace processor that will receive traces and spans as they are ready. This lets you do your own processing in addition to sending traces to OpenAI's backend.</li> <li><code>set_trace_processors()</code> lets you replace the default processors with your own trace processors. This means traces will not be sent to the OpenAI backend unless you include a <code>TracingProcessor</code> that does so.</li> </ol>"},{"location":"tracing/#external-tracing-processors-list","title":"External tracing processors list","text":"<ul> <li>Arize-Phoenix</li> <li>Braintrust</li> <li>Pydantic Logfire</li> <li>AgentOps</li> <li>Scorecard</li> <li>Keywords AI</li> <li>LangSmith</li> </ul>"},{"location":"ref/","title":"Agents module","text":""},{"location":"ref/#agents.set_default_openai_key","title":"set_default_openai_key","text":"<pre><code>set_default_openai_key(\n    key: str, use_for_tracing: bool = True\n) -&gt; None\n</code></pre> <p>Set the default OpenAI API key to use for LLM requests (and optionally tracing(). This is only necessary if the OPENAI_API_KEY environment variable is not already set.</p> <p>If provided, this key will be used instead of the OPENAI_API_KEY environment variable.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The OpenAI key to use.</p> required <code>use_for_tracing</code> <code>bool</code> <p>Whether to also use this key to send traces to OpenAI. Defaults to True If False, you'll either need to set the OPENAI_API_KEY environment variable or call set_tracing_export_api_key() with the API key you want to use for tracing.</p> <code>True</code> Source code in <code>src/agents/__init__.py</code> <pre><code>def set_default_openai_key(key: str, use_for_tracing: bool = True) -&gt; None:\n    \"\"\"Set the default OpenAI API key to use for LLM requests (and optionally tracing(). This is\n    only necessary if the OPENAI_API_KEY environment variable is not already set.\n\n    If provided, this key will be used instead of the OPENAI_API_KEY environment variable.\n\n    Args:\n        key: The OpenAI key to use.\n        use_for_tracing: Whether to also use this key to send traces to OpenAI. Defaults to True\n            If False, you'll either need to set the OPENAI_API_KEY environment variable or call\n            set_tracing_export_api_key() with the API key you want to use for tracing.\n    \"\"\"\n    _config.set_default_openai_key(key, use_for_tracing)\n</code></pre>"},{"location":"ref/#agents.set_default_openai_client","title":"set_default_openai_client","text":"<pre><code>set_default_openai_client(\n    client: AsyncOpenAI, use_for_tracing: bool = True\n) -&gt; None\n</code></pre> <p>Set the default OpenAI client to use for LLM requests and/or tracing. If provided, this client will be used instead of the default OpenAI client.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>AsyncOpenAI</code> <p>The OpenAI client to use.</p> required <code>use_for_tracing</code> <code>bool</code> <p>Whether to use the API key from this client for uploading traces. If False, you'll either need to set the OPENAI_API_KEY environment variable or call set_tracing_export_api_key() with the API key you want to use for tracing.</p> <code>True</code> Source code in <code>src/agents/__init__.py</code> <pre><code>def set_default_openai_client(client: AsyncOpenAI, use_for_tracing: bool = True) -&gt; None:\n    \"\"\"Set the default OpenAI client to use for LLM requests and/or tracing. If provided, this\n    client will be used instead of the default OpenAI client.\n\n    Args:\n        client: The OpenAI client to use.\n        use_for_tracing: Whether to use the API key from this client for uploading traces. If False,\n            you'll either need to set the OPENAI_API_KEY environment variable or call\n            set_tracing_export_api_key() with the API key you want to use for tracing.\n    \"\"\"\n    _config.set_default_openai_client(client, use_for_tracing)\n</code></pre>"},{"location":"ref/#agents.set_default_openai_api","title":"set_default_openai_api","text":"<pre><code>set_default_openai_api(\n    api: Literal[\"chat_completions\", \"responses\"],\n) -&gt; None\n</code></pre> <p>Set the default API to use for OpenAI LLM requests. By default, we will use the responses API but you can set this to use the chat completions API instead.</p> Source code in <code>src/agents/__init__.py</code> <pre><code>def set_default_openai_api(api: Literal[\"chat_completions\", \"responses\"]) -&gt; None:\n    \"\"\"Set the default API to use for OpenAI LLM requests. By default, we will use the responses API\n    but you can set this to use the chat completions API instead.\n    \"\"\"\n    _config.set_default_openai_api(api)\n</code></pre>"},{"location":"ref/#agents.set_tracing_export_api_key","title":"set_tracing_export_api_key","text":"<pre><code>set_tracing_export_api_key(api_key: str) -&gt; None\n</code></pre> <p>Set the OpenAI API key for the backend exporter.</p> Source code in <code>src/agents/tracing/__init__.py</code> <pre><code>def set_tracing_export_api_key(api_key: str) -&gt; None:\n    \"\"\"\n    Set the OpenAI API key for the backend exporter.\n    \"\"\"\n    default_exporter().set_api_key(api_key)\n</code></pre>"},{"location":"ref/#agents.set_tracing_disabled","title":"set_tracing_disabled","text":"<pre><code>set_tracing_disabled(disabled: bool) -&gt; None\n</code></pre> <p>Set whether tracing is globally disabled.</p> Source code in <code>src/agents/tracing/__init__.py</code> <pre><code>def set_tracing_disabled(disabled: bool) -&gt; None:\n    \"\"\"\n    Set whether tracing is globally disabled.\n    \"\"\"\n    GLOBAL_TRACE_PROVIDER.set_disabled(disabled)\n</code></pre>"},{"location":"ref/#agents.set_trace_processors","title":"set_trace_processors","text":"<pre><code>set_trace_processors(\n    processors: list[TracingProcessor],\n) -&gt; None\n</code></pre> <p>Set the list of trace processors. This will replace the current list of processors.</p> Source code in <code>src/agents/tracing/__init__.py</code> <pre><code>def set_trace_processors(processors: list[TracingProcessor]) -&gt; None:\n    \"\"\"\n    Set the list of trace processors. This will replace the current list of processors.\n    \"\"\"\n    GLOBAL_TRACE_PROVIDER.set_processors(processors)\n</code></pre>"},{"location":"ref/#agents.enable_verbose_stdout_logging","title":"enable_verbose_stdout_logging","text":"<pre><code>enable_verbose_stdout_logging()\n</code></pre> <p>Enables verbose logging to stdout. This is useful for debugging.</p> Source code in <code>src/agents/__init__.py</code> <pre><code>def enable_verbose_stdout_logging():\n    \"\"\"Enables verbose logging to stdout. This is useful for debugging.\"\"\"\n    logger = logging.getLogger(\"openai.agents\")\n    logger.setLevel(logging.DEBUG)\n    logger.addHandler(logging.StreamHandler(sys.stdout))\n</code></pre>"},{"location":"ref/agent/","title":"<code>Agents</code>","text":""},{"location":"ref/agent/#agents.agent.Agent","title":"Agent  <code>dataclass</code>","text":"<p>               Bases: <code>Generic[TContext]</code></p> <p>An agent is an AI model configured with instructions, tools, guardrails, handoffs and more.</p> <p>We strongly recommend passing <code>instructions</code>, which is the \"system prompt\" for the agent. In addition, you can pass <code>handoff_description</code>, which is a human-readable description of the agent, used when the agent is used inside tools/handoffs.</p> <p>Agents are generic on the context type. The context is a (mutable) object you create. It is passed to tool functions, handoffs, guardrails, etc.</p> Source code in <code>src/agents/agent.py</code> <pre><code>@dataclass\nclass Agent(Generic[TContext]):\n    \"\"\"An agent is an AI model configured with instructions, tools, guardrails, handoffs and more.\n\n    We strongly recommend passing `instructions`, which is the \"system prompt\" for the agent. In\n    addition, you can pass `handoff_description`, which is a human-readable description of the\n    agent, used when the agent is used inside tools/handoffs.\n\n    Agents are generic on the context type. The context is a (mutable) object you create. It is\n    passed to tool functions, handoffs, guardrails, etc.\n    \"\"\"\n\n    name: str\n    \"\"\"The name of the agent.\"\"\"\n\n    instructions: (\n        str\n        | Callable[\n            [RunContextWrapper[TContext], Agent[TContext]],\n            MaybeAwaitable[str],\n        ]\n        | None\n    ) = None\n    \"\"\"The instructions for the agent. Will be used as the \"system prompt\" when this agent is\n    invoked. Describes what the agent should do, and how it responds.\n\n    Can either be a string, or a function that dynamically generates instructions for the agent. If\n    you provide a function, it will be called with the context and the agent instance. It must\n    return a string.\n    \"\"\"\n\n    handoff_description: str | None = None\n    \"\"\"A description of the agent. This is used when the agent is used as a handoff, so that an\n    LLM knows what it does and when to invoke it.\n    \"\"\"\n\n    handoffs: list[Agent[Any] | Handoff[TContext]] = field(default_factory=list)\n    \"\"\"Handoffs are sub-agents that the agent can delegate to. You can provide a list of handoffs,\n    and the agent can choose to delegate to them if relevant. Allows for separation of concerns and\n    modularity.\n    \"\"\"\n\n    model: str | Model | None = None\n    \"\"\"The model implementation to use when invoking the LLM.\n\n    By default, if not set, the agent will use the default model configured in\n    `model_settings.DEFAULT_MODEL`.\n    \"\"\"\n\n    model_settings: ModelSettings = field(default_factory=ModelSettings)\n    \"\"\"Configures model-specific tuning parameters (e.g. temperature, top_p).\n    \"\"\"\n\n    tools: list[Tool] = field(default_factory=list)\n    \"\"\"A list of tools that the agent can use.\"\"\"\n\n    input_guardrails: list[InputGuardrail[TContext]] = field(default_factory=list)\n    \"\"\"A list of checks that run in parallel to the agent's execution, before generating a\n    response. Runs only if the agent is the first agent in the chain.\n    \"\"\"\n\n    output_guardrails: list[OutputGuardrail[TContext]] = field(default_factory=list)\n    \"\"\"A list of checks that run on the final output of the agent, after generating a response.\n    Runs only if the agent produces a final output.\n    \"\"\"\n\n    output_type: type[Any] | None = None\n    \"\"\"The type of the output object. If not provided, the output will be `str`.\"\"\"\n\n    hooks: AgentHooks[TContext] | None = None\n    \"\"\"A class that receives callbacks on various lifecycle events for this agent.\n    \"\"\"\n\n    def clone(self, **kwargs: Any) -&gt; Agent[TContext]:\n        \"\"\"Make a copy of the agent, with the given arguments changed. For example, you could do:\n        ```\n        new_agent = agent.clone(instructions=\"New instructions\")\n        ```\n        \"\"\"\n        return dataclasses.replace(self, **kwargs)\n\n    def as_tool(\n        self,\n        tool_name: str | None,\n        tool_description: str | None,\n        custom_output_extractor: Callable[[RunResult], Awaitable[str]] | None = None,\n    ) -&gt; Tool:\n        \"\"\"Transform this agent into a tool, callable by other agents.\n\n        This is different from handoffs in two ways:\n        1. In handoffs, the new agent receives the conversation history. In this tool, the new agent\n           receives generated input.\n        2. In handoffs, the new agent takes over the conversation. In this tool, the new agent is\n           called as a tool, and the conversation is continued by the original agent.\n\n        Args:\n            tool_name: The name of the tool. If not provided, the agent's name will be used.\n            tool_description: The description of the tool, which should indicate what it does and\n                when to use it.\n            custom_output_extractor: A function that extracts the output from the agent. If not\n                provided, the last message from the agent will be used.\n        \"\"\"\n\n        @function_tool(\n            name_override=tool_name or _transforms.transform_string_function_style(self.name),\n            description_override=tool_description or \"\",\n        )\n        async def run_agent(context: RunContextWrapper, input: str) -&gt; str:\n            from .run import Runner\n\n            output = await Runner.run(\n                starting_agent=self,\n                input=input,\n                context=context.context,\n            )\n            if custom_output_extractor:\n                return await custom_output_extractor(output)\n\n            return ItemHelpers.text_message_outputs(output.new_items)\n\n        return run_agent\n\n    async def get_system_prompt(self, run_context: RunContextWrapper[TContext]) -&gt; str | None:\n        \"\"\"Get the system prompt for the agent.\"\"\"\n        if isinstance(self.instructions, str):\n            return self.instructions\n        elif callable(self.instructions):\n            if inspect.iscoroutinefunction(self.instructions):\n                return await cast(Awaitable[str], self.instructions(run_context, self))\n            else:\n                return cast(str, self.instructions(run_context, self))\n        elif self.instructions is not None:\n            logger.error(f\"Instructions must be a string or a function, got {self.instructions}\")\n\n        return None\n</code></pre>"},{"location":"ref/agent/#agents.agent.Agent.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the agent.</p>"},{"location":"ref/agent/#agents.agent.Agent.instructions","title":"instructions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>instructions: (\n    str\n    | Callable[\n        [RunContextWrapper[TContext], Agent[TContext]],\n        MaybeAwaitable[str],\n    ]\n    | None\n) = None\n</code></pre> <p>The instructions for the agent. Will be used as the \"system prompt\" when this agent is invoked. Describes what the agent should do, and how it responds.</p> <p>Can either be a string, or a function that dynamically generates instructions for the agent. If you provide a function, it will be called with the context and the agent instance. It must return a string.</p>"},{"location":"ref/agent/#agents.agent.Agent.handoff_description","title":"handoff_description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>handoff_description: str | None = None\n</code></pre> <p>A description of the agent. This is used when the agent is used as a handoff, so that an LLM knows what it does and when to invoke it.</p>"},{"location":"ref/agent/#agents.agent.Agent.handoffs","title":"handoffs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>handoffs: list[Agent[Any] | Handoff[TContext]] = field(\n    default_factory=list\n)\n</code></pre> <p>Handoffs are sub-agents that the agent can delegate to. You can provide a list of handoffs, and the agent can choose to delegate to them if relevant. Allows for separation of concerns and modularity.</p>"},{"location":"ref/agent/#agents.agent.Agent.model","title":"model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model: str | Model | None = None\n</code></pre> <p>The model implementation to use when invoking the LLM.</p> <p>By default, if not set, the agent will use the default model configured in <code>model_settings.DEFAULT_MODEL</code>.</p>"},{"location":"ref/agent/#agents.agent.Agent.model_settings","title":"model_settings  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_settings: ModelSettings = field(\n    default_factory=ModelSettings\n)\n</code></pre> <p>Configures model-specific tuning parameters (e.g. temperature, top_p).</p>"},{"location":"ref/agent/#agents.agent.Agent.tools","title":"tools  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tools: list[Tool] = field(default_factory=list)\n</code></pre> <p>A list of tools that the agent can use.</p>"},{"location":"ref/agent/#agents.agent.Agent.input_guardrails","title":"input_guardrails  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>input_guardrails: list[InputGuardrail[TContext]] = field(\n    default_factory=list\n)\n</code></pre> <p>A list of checks that run in parallel to the agent's execution, before generating a response. Runs only if the agent is the first agent in the chain.</p>"},{"location":"ref/agent/#agents.agent.Agent.output_guardrails","title":"output_guardrails  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output_guardrails: list[OutputGuardrail[TContext]] = field(\n    default_factory=list\n)\n</code></pre> <p>A list of checks that run on the final output of the agent, after generating a response. Runs only if the agent produces a final output.</p>"},{"location":"ref/agent/#agents.agent.Agent.output_type","title":"output_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output_type: type[Any] | None = None\n</code></pre> <p>The type of the output object. If not provided, the output will be <code>str</code>.</p>"},{"location":"ref/agent/#agents.agent.Agent.hooks","title":"hooks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>hooks: AgentHooks[TContext] | None = None\n</code></pre> <p>A class that receives callbacks on various lifecycle events for this agent.</p>"},{"location":"ref/agent/#agents.agent.Agent.clone","title":"clone","text":"<pre><code>clone(**kwargs: Any) -&gt; Agent[TContext]\n</code></pre> <p>Make a copy of the agent, with the given arguments changed. For example, you could do: <pre><code>new_agent = agent.clone(instructions=\"New instructions\")\n</code></pre></p> Source code in <code>src/agents/agent.py</code> <pre><code>def clone(self, **kwargs: Any) -&gt; Agent[TContext]:\n    \"\"\"Make a copy of the agent, with the given arguments changed. For example, you could do:\n    ```\n    new_agent = agent.clone(instructions=\"New instructions\")\n    ```\n    \"\"\"\n    return dataclasses.replace(self, **kwargs)\n</code></pre>"},{"location":"ref/agent/#agents.agent.Agent.as_tool","title":"as_tool","text":"<pre><code>as_tool(\n    tool_name: str | None,\n    tool_description: str | None,\n    custom_output_extractor: Callable[\n        [RunResult], Awaitable[str]\n    ]\n    | None = None,\n) -&gt; Tool\n</code></pre> <p>Transform this agent into a tool, callable by other agents.</p> <p>This is different from handoffs in two ways: 1. In handoffs, the new agent receives the conversation history. In this tool, the new agent    receives generated input. 2. In handoffs, the new agent takes over the conversation. In this tool, the new agent is    called as a tool, and the conversation is continued by the original agent.</p> <p>Parameters:</p> Name Type Description Default <code>tool_name</code> <code>str | None</code> <p>The name of the tool. If not provided, the agent's name will be used.</p> required <code>tool_description</code> <code>str | None</code> <p>The description of the tool, which should indicate what it does and when to use it.</p> required <code>custom_output_extractor</code> <code>Callable[[RunResult], Awaitable[str]] | None</code> <p>A function that extracts the output from the agent. If not provided, the last message from the agent will be used.</p> <code>None</code> Source code in <code>src/agents/agent.py</code> <pre><code>def as_tool(\n    self,\n    tool_name: str | None,\n    tool_description: str | None,\n    custom_output_extractor: Callable[[RunResult], Awaitable[str]] | None = None,\n) -&gt; Tool:\n    \"\"\"Transform this agent into a tool, callable by other agents.\n\n    This is different from handoffs in two ways:\n    1. In handoffs, the new agent receives the conversation history. In this tool, the new agent\n       receives generated input.\n    2. In handoffs, the new agent takes over the conversation. In this tool, the new agent is\n       called as a tool, and the conversation is continued by the original agent.\n\n    Args:\n        tool_name: The name of the tool. If not provided, the agent's name will be used.\n        tool_description: The description of the tool, which should indicate what it does and\n            when to use it.\n        custom_output_extractor: A function that extracts the output from the agent. If not\n            provided, the last message from the agent will be used.\n    \"\"\"\n\n    @function_tool(\n        name_override=tool_name or _transforms.transform_string_function_style(self.name),\n        description_override=tool_description or \"\",\n    )\n    async def run_agent(context: RunContextWrapper, input: str) -&gt; str:\n        from .run import Runner\n\n        output = await Runner.run(\n            starting_agent=self,\n            input=input,\n            context=context.context,\n        )\n        if custom_output_extractor:\n            return await custom_output_extractor(output)\n\n        return ItemHelpers.text_message_outputs(output.new_items)\n\n    return run_agent\n</code></pre>"},{"location":"ref/agent/#agents.agent.Agent.get_system_prompt","title":"get_system_prompt  <code>async</code>","text":"<pre><code>get_system_prompt(\n    run_context: RunContextWrapper[TContext],\n) -&gt; str | None\n</code></pre> <p>Get the system prompt for the agent.</p> Source code in <code>src/agents/agent.py</code> <pre><code>async def get_system_prompt(self, run_context: RunContextWrapper[TContext]) -&gt; str | None:\n    \"\"\"Get the system prompt for the agent.\"\"\"\n    if isinstance(self.instructions, str):\n        return self.instructions\n    elif callable(self.instructions):\n        if inspect.iscoroutinefunction(self.instructions):\n            return await cast(Awaitable[str], self.instructions(run_context, self))\n        else:\n            return cast(str, self.instructions(run_context, self))\n    elif self.instructions is not None:\n        logger.error(f\"Instructions must be a string or a function, got {self.instructions}\")\n\n    return None\n</code></pre>"},{"location":"ref/agent_output/","title":"<code>Agent output</code>","text":""},{"location":"ref/agent_output/#agents.agent_output.AgentOutputSchema","title":"AgentOutputSchema  <code>dataclass</code>","text":"<p>An object that captures the JSON schema of the output, as well as validating/parsing JSON produced by the LLM into the output type.</p> Source code in <code>src/agents/agent_output.py</code> <pre><code>@dataclass(init=False)\nclass AgentOutputSchema:\n    \"\"\"An object that captures the JSON schema of the output, as well as validating/parsing JSON\n    produced by the LLM into the output type.\n    \"\"\"\n\n    output_type: type[Any]\n    \"\"\"The type of the output.\"\"\"\n\n    _type_adapter: TypeAdapter[Any]\n    \"\"\"A type adapter that wraps the output type, so that we can validate JSON.\"\"\"\n\n    _is_wrapped: bool\n    \"\"\"Whether the output type is wrapped in a dictionary. This is generally done if the base\n    output type cannot be represented as a JSON Schema object.\n    \"\"\"\n\n    _output_schema: dict[str, Any]\n    \"\"\"The JSON schema of the output.\"\"\"\n\n    strict_json_schema: bool\n    \"\"\"Whether the JSON schema is in strict mode. We **strongly** recommend setting this to True,\n    as it increases the likelihood of correct JSON input.\n    \"\"\"\n\n    def __init__(self, output_type: type[Any], strict_json_schema: bool = True):\n        \"\"\"\n        Args:\n            output_type: The type of the output.\n            strict_json_schema: Whether the JSON schema is in strict mode. We **strongly** recommend\n                setting this to True, as it increases the likelihood of correct JSON input.\n        \"\"\"\n        self.output_type = output_type\n        self.strict_json_schema = strict_json_schema\n\n        if output_type is None or output_type is str:\n            self._is_wrapped = False\n            self._type_adapter = TypeAdapter(output_type)\n            self._output_schema = self._type_adapter.json_schema()\n            return\n\n        # We should wrap for things that are not plain text, and for things that would definitely\n        # not be a JSON Schema object.\n        self._is_wrapped = not _is_subclass_of_base_model_or_dict(output_type)\n\n        if self._is_wrapped:\n            OutputType = TypedDict(\n                \"OutputType\",\n                {\n                    _WRAPPER_DICT_KEY: output_type,  # type: ignore\n                },\n            )\n            self._type_adapter = TypeAdapter(OutputType)\n            self._output_schema = self._type_adapter.json_schema()\n        else:\n            self._type_adapter = TypeAdapter(output_type)\n            self._output_schema = self._type_adapter.json_schema()\n\n        if self.strict_json_schema:\n            self._output_schema = ensure_strict_json_schema(self._output_schema)\n\n    def is_plain_text(self) -&gt; bool:\n        \"\"\"Whether the output type is plain text (versus a JSON object).\"\"\"\n        return self.output_type is None or self.output_type is str\n\n    def json_schema(self) -&gt; dict[str, Any]:\n        \"\"\"The JSON schema of the output type.\"\"\"\n        if self.is_plain_text():\n            raise UserError(\"Output type is plain text, so no JSON schema is available\")\n        return self._output_schema\n\n    def validate_json(self, json_str: str, partial: bool = False) -&gt; Any:\n        \"\"\"Validate a JSON string against the output type. Returns the validated object, or raises\n        a `ModelBehaviorError` if the JSON is invalid.\n        \"\"\"\n        validated = _json.validate_json(json_str, self._type_adapter, partial)\n        if self._is_wrapped:\n            if not isinstance(validated, dict):\n                _error_tracing.attach_error_to_current_span(\n                    SpanError(\n                        message=\"Invalid JSON\",\n                        data={\"details\": f\"Expected a dict, got {type(validated)}\"},\n                    )\n                )\n                raise ModelBehaviorError(\n                    f\"Expected a dict, got {type(validated)} for JSON: {json_str}\"\n                )\n\n            if _WRAPPER_DICT_KEY not in validated:\n                _error_tracing.attach_error_to_current_span(\n                    SpanError(\n                        message=\"Invalid JSON\",\n                        data={\"details\": f\"Could not find key {_WRAPPER_DICT_KEY} in JSON\"},\n                    )\n                )\n                raise ModelBehaviorError(\n                    f\"Could not find key {_WRAPPER_DICT_KEY} in JSON: {json_str}\"\n                )\n            return validated[_WRAPPER_DICT_KEY]\n        return validated\n\n    def output_type_name(self) -&gt; str:\n        \"\"\"The name of the output type.\"\"\"\n        return _type_to_str(self.output_type)\n</code></pre>"},{"location":"ref/agent_output/#agents.agent_output.AgentOutputSchema._type_adapter","title":"_type_adapter  <code>instance-attribute</code>","text":"<pre><code>_type_adapter: TypeAdapter[Any]\n</code></pre> <p>A type adapter that wraps the output type, so that we can validate JSON.</p>"},{"location":"ref/agent_output/#agents.agent_output.AgentOutputSchema._output_schema","title":"_output_schema  <code>instance-attribute</code>","text":"<pre><code>_output_schema: dict[str, Any]\n</code></pre> <p>The JSON schema of the output.</p>"},{"location":"ref/agent_output/#agents.agent_output.AgentOutputSchema.output_type","title":"output_type  <code>instance-attribute</code>","text":"<pre><code>output_type: type[Any] = output_type\n</code></pre> <p>The type of the output.</p>"},{"location":"ref/agent_output/#agents.agent_output.AgentOutputSchema.strict_json_schema","title":"strict_json_schema  <code>instance-attribute</code>","text":"<pre><code>strict_json_schema: bool = strict_json_schema\n</code></pre> <p>Whether the JSON schema is in strict mode. We strongly recommend setting this to True, as it increases the likelihood of correct JSON input.</p>"},{"location":"ref/agent_output/#agents.agent_output.AgentOutputSchema._is_wrapped","title":"_is_wrapped  <code>instance-attribute</code>","text":"<pre><code>_is_wrapped: bool = not _is_subclass_of_base_model_or_dict(\n    output_type\n)\n</code></pre> <p>Whether the output type is wrapped in a dictionary. This is generally done if the base output type cannot be represented as a JSON Schema object.</p>"},{"location":"ref/agent_output/#agents.agent_output.AgentOutputSchema.__init__","title":"__init__","text":"<pre><code>__init__(\n    output_type: type[Any], strict_json_schema: bool = True\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>output_type</code> <code>type[Any]</code> <p>The type of the output.</p> required <code>strict_json_schema</code> <code>bool</code> <p>Whether the JSON schema is in strict mode. We strongly recommend setting this to True, as it increases the likelihood of correct JSON input.</p> <code>True</code> Source code in <code>src/agents/agent_output.py</code> <pre><code>def __init__(self, output_type: type[Any], strict_json_schema: bool = True):\n    \"\"\"\n    Args:\n        output_type: The type of the output.\n        strict_json_schema: Whether the JSON schema is in strict mode. We **strongly** recommend\n            setting this to True, as it increases the likelihood of correct JSON input.\n    \"\"\"\n    self.output_type = output_type\n    self.strict_json_schema = strict_json_schema\n\n    if output_type is None or output_type is str:\n        self._is_wrapped = False\n        self._type_adapter = TypeAdapter(output_type)\n        self._output_schema = self._type_adapter.json_schema()\n        return\n\n    # We should wrap for things that are not plain text, and for things that would definitely\n    # not be a JSON Schema object.\n    self._is_wrapped = not _is_subclass_of_base_model_or_dict(output_type)\n\n    if self._is_wrapped:\n        OutputType = TypedDict(\n            \"OutputType\",\n            {\n                _WRAPPER_DICT_KEY: output_type,  # type: ignore\n            },\n        )\n        self._type_adapter = TypeAdapter(OutputType)\n        self._output_schema = self._type_adapter.json_schema()\n    else:\n        self._type_adapter = TypeAdapter(output_type)\n        self._output_schema = self._type_adapter.json_schema()\n\n    if self.strict_json_schema:\n        self._output_schema = ensure_strict_json_schema(self._output_schema)\n</code></pre>"},{"location":"ref/agent_output/#agents.agent_output.AgentOutputSchema.is_plain_text","title":"is_plain_text","text":"<pre><code>is_plain_text() -&gt; bool\n</code></pre> <p>Whether the output type is plain text (versus a JSON object).</p> Source code in <code>src/agents/agent_output.py</code> <pre><code>def is_plain_text(self) -&gt; bool:\n    \"\"\"Whether the output type is plain text (versus a JSON object).\"\"\"\n    return self.output_type is None or self.output_type is str\n</code></pre>"},{"location":"ref/agent_output/#agents.agent_output.AgentOutputSchema.json_schema","title":"json_schema","text":"<pre><code>json_schema() -&gt; dict[str, Any]\n</code></pre> <p>The JSON schema of the output type.</p> Source code in <code>src/agents/agent_output.py</code> <pre><code>def json_schema(self) -&gt; dict[str, Any]:\n    \"\"\"The JSON schema of the output type.\"\"\"\n    if self.is_plain_text():\n        raise UserError(\"Output type is plain text, so no JSON schema is available\")\n    return self._output_schema\n</code></pre>"},{"location":"ref/agent_output/#agents.agent_output.AgentOutputSchema.validate_json","title":"validate_json","text":"<pre><code>validate_json(json_str: str, partial: bool = False) -&gt; Any\n</code></pre> <p>Validate a JSON string against the output type. Returns the validated object, or raises a <code>ModelBehaviorError</code> if the JSON is invalid.</p> Source code in <code>src/agents/agent_output.py</code> <pre><code>def validate_json(self, json_str: str, partial: bool = False) -&gt; Any:\n    \"\"\"Validate a JSON string against the output type. Returns the validated object, or raises\n    a `ModelBehaviorError` if the JSON is invalid.\n    \"\"\"\n    validated = _json.validate_json(json_str, self._type_adapter, partial)\n    if self._is_wrapped:\n        if not isinstance(validated, dict):\n            _error_tracing.attach_error_to_current_span(\n                SpanError(\n                    message=\"Invalid JSON\",\n                    data={\"details\": f\"Expected a dict, got {type(validated)}\"},\n                )\n            )\n            raise ModelBehaviorError(\n                f\"Expected a dict, got {type(validated)} for JSON: {json_str}\"\n            )\n\n        if _WRAPPER_DICT_KEY not in validated:\n            _error_tracing.attach_error_to_current_span(\n                SpanError(\n                    message=\"Invalid JSON\",\n                    data={\"details\": f\"Could not find key {_WRAPPER_DICT_KEY} in JSON\"},\n                )\n            )\n            raise ModelBehaviorError(\n                f\"Could not find key {_WRAPPER_DICT_KEY} in JSON: {json_str}\"\n            )\n        return validated[_WRAPPER_DICT_KEY]\n    return validated\n</code></pre>"},{"location":"ref/agent_output/#agents.agent_output.AgentOutputSchema.output_type_name","title":"output_type_name","text":"<pre><code>output_type_name() -&gt; str\n</code></pre> <p>The name of the output type.</p> Source code in <code>src/agents/agent_output.py</code> <pre><code>def output_type_name(self) -&gt; str:\n    \"\"\"The name of the output type.\"\"\"\n    return _type_to_str(self.output_type)\n</code></pre>"},{"location":"ref/exceptions/","title":"<code>Exceptions</code>","text":""},{"location":"ref/exceptions/#agents.exceptions.AgentsException","title":"AgentsException","text":"<p>               Bases: <code>Exception</code></p> <p>Base class for all exceptions in the Agents SDK.</p> Source code in <code>src/agents/exceptions.py</code> <pre><code>class AgentsException(Exception):\n    \"\"\"Base class for all exceptions in the Agents SDK.\"\"\"\n</code></pre>"},{"location":"ref/exceptions/#agents.exceptions.MaxTurnsExceeded","title":"MaxTurnsExceeded","text":"<p>               Bases: <code>AgentsException</code></p> <p>Exception raised when the maximum number of turns is exceeded.</p> Source code in <code>src/agents/exceptions.py</code> <pre><code>class MaxTurnsExceeded(AgentsException):\n    \"\"\"Exception raised when the maximum number of turns is exceeded.\"\"\"\n\n    message: str\n\n    def __init__(self, message: str):\n        self.message = message\n</code></pre>"},{"location":"ref/exceptions/#agents.exceptions.ModelBehaviorError","title":"ModelBehaviorError","text":"<p>               Bases: <code>AgentsException</code></p> <p>Exception raised when the model does something unexpected, e.g. calling a tool that doesn't exist, or providing malformed JSON.</p> Source code in <code>src/agents/exceptions.py</code> <pre><code>class ModelBehaviorError(AgentsException):\n    \"\"\"Exception raised when the model does something unexpected, e.g. calling a tool that doesn't\n    exist, or providing malformed JSON.\n    \"\"\"\n\n    message: str\n\n    def __init__(self, message: str):\n        self.message = message\n</code></pre>"},{"location":"ref/exceptions/#agents.exceptions.UserError","title":"UserError","text":"<p>               Bases: <code>AgentsException</code></p> <p>Exception raised when the user makes an error using the SDK.</p> Source code in <code>src/agents/exceptions.py</code> <pre><code>class UserError(AgentsException):\n    \"\"\"Exception raised when the user makes an error using the SDK.\"\"\"\n\n    message: str\n\n    def __init__(self, message: str):\n        self.message = message\n</code></pre>"},{"location":"ref/exceptions/#agents.exceptions.InputGuardrailTripwireTriggered","title":"InputGuardrailTripwireTriggered","text":"<p>               Bases: <code>AgentsException</code></p> <p>Exception raised when a guardrail tripwire is triggered.</p> Source code in <code>src/agents/exceptions.py</code> <pre><code>class InputGuardrailTripwireTriggered(AgentsException):\n    \"\"\"Exception raised when a guardrail tripwire is triggered.\"\"\"\n\n    guardrail_result: \"InputGuardrailResult\"\n    \"\"\"The result data of the guardrail that was triggered.\"\"\"\n\n    def __init__(self, guardrail_result: \"InputGuardrailResult\"):\n        self.guardrail_result = guardrail_result\n        super().__init__(\n            f\"Guardrail {guardrail_result.guardrail.__class__.__name__} triggered tripwire\"\n        )\n</code></pre>"},{"location":"ref/exceptions/#agents.exceptions.InputGuardrailTripwireTriggered.guardrail_result","title":"guardrail_result  <code>instance-attribute</code>","text":"<pre><code>guardrail_result: InputGuardrailResult = guardrail_result\n</code></pre> <p>The result data of the guardrail that was triggered.</p>"},{"location":"ref/exceptions/#agents.exceptions.OutputGuardrailTripwireTriggered","title":"OutputGuardrailTripwireTriggered","text":"<p>               Bases: <code>AgentsException</code></p> <p>Exception raised when a guardrail tripwire is triggered.</p> Source code in <code>src/agents/exceptions.py</code> <pre><code>class OutputGuardrailTripwireTriggered(AgentsException):\n    \"\"\"Exception raised when a guardrail tripwire is triggered.\"\"\"\n\n    guardrail_result: \"OutputGuardrailResult\"\n    \"\"\"The result data of the guardrail that was triggered.\"\"\"\n\n    def __init__(self, guardrail_result: \"OutputGuardrailResult\"):\n        self.guardrail_result = guardrail_result\n        super().__init__(\n            f\"Guardrail {guardrail_result.guardrail.__class__.__name__} triggered tripwire\"\n        )\n</code></pre>"},{"location":"ref/exceptions/#agents.exceptions.OutputGuardrailTripwireTriggered.guardrail_result","title":"guardrail_result  <code>instance-attribute</code>","text":"<pre><code>guardrail_result: OutputGuardrailResult = guardrail_result\n</code></pre> <p>The result data of the guardrail that was triggered.</p>"},{"location":"ref/function_schema/","title":"<code>Function schema</code>","text":""},{"location":"ref/function_schema/#agents.function_schema.FuncSchema","title":"FuncSchema  <code>dataclass</code>","text":"<p>Captures the schema for a python function, in preparation for sending it to an LLM as a tool.</p> Source code in <code>src/agents/function_schema.py</code> <pre><code>@dataclass\nclass FuncSchema:\n    \"\"\"\n    Captures the schema for a python function, in preparation for sending it to an LLM as a tool.\n    \"\"\"\n\n    name: str\n    \"\"\"The name of the function.\"\"\"\n    description: str | None\n    \"\"\"The description of the function.\"\"\"\n    params_pydantic_model: type[BaseModel]\n    \"\"\"A Pydantic model that represents the function's parameters.\"\"\"\n    params_json_schema: dict[str, Any]\n    \"\"\"The JSON schema for the function's parameters, derived from the Pydantic model.\"\"\"\n    signature: inspect.Signature\n    \"\"\"The signature of the function.\"\"\"\n    takes_context: bool = False\n    \"\"\"Whether the function takes a RunContextWrapper argument (must be the first argument).\"\"\"\n    strict_json_schema: bool = True\n    \"\"\"Whether the JSON schema is in strict mode. We **strongly** recommend setting this to True,\n    as it increases the likelihood of correct JSON input.\"\"\"\n\n    def to_call_args(self, data: BaseModel) -&gt; tuple[list[Any], dict[str, Any]]:\n        \"\"\"\n        Converts validated data from the Pydantic model into (args, kwargs), suitable for calling\n        the original function.\n        \"\"\"\n        positional_args: list[Any] = []\n        keyword_args: dict[str, Any] = {}\n        seen_var_positional = False\n\n        # Use enumerate() so we can skip the first parameter if it's context.\n        for idx, (name, param) in enumerate(self.signature.parameters.items()):\n            # If the function takes a RunContextWrapper and this is the first parameter, skip it.\n            if self.takes_context and idx == 0:\n                continue\n\n            value = getattr(data, name, None)\n            if param.kind == param.VAR_POSITIONAL:\n                # e.g. *args: extend positional args and mark that *args is now seen\n                positional_args.extend(value or [])\n                seen_var_positional = True\n            elif param.kind == param.VAR_KEYWORD:\n                # e.g. **kwargs handling\n                keyword_args.update(value or {})\n            elif param.kind in (param.POSITIONAL_ONLY, param.POSITIONAL_OR_KEYWORD):\n                # Before *args, add to positional args. After *args, add to keyword args.\n                if not seen_var_positional:\n                    positional_args.append(value)\n                else:\n                    keyword_args[name] = value\n            else:\n                # For KEYWORD_ONLY parameters, always use keyword args.\n                keyword_args[name] = value\n        return positional_args, keyword_args\n</code></pre>"},{"location":"ref/function_schema/#agents.function_schema.FuncSchema.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the function.</p>"},{"location":"ref/function_schema/#agents.function_schema.FuncSchema.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str | None\n</code></pre> <p>The description of the function.</p>"},{"location":"ref/function_schema/#agents.function_schema.FuncSchema.params_pydantic_model","title":"params_pydantic_model  <code>instance-attribute</code>","text":"<pre><code>params_pydantic_model: type[BaseModel]\n</code></pre> <p>A Pydantic model that represents the function's parameters.</p>"},{"location":"ref/function_schema/#agents.function_schema.FuncSchema.params_json_schema","title":"params_json_schema  <code>instance-attribute</code>","text":"<pre><code>params_json_schema: dict[str, Any]\n</code></pre> <p>The JSON schema for the function's parameters, derived from the Pydantic model.</p>"},{"location":"ref/function_schema/#agents.function_schema.FuncSchema.signature","title":"signature  <code>instance-attribute</code>","text":"<pre><code>signature: Signature\n</code></pre> <p>The signature of the function.</p>"},{"location":"ref/function_schema/#agents.function_schema.FuncSchema.takes_context","title":"takes_context  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>takes_context: bool = False\n</code></pre> <p>Whether the function takes a RunContextWrapper argument (must be the first argument).</p>"},{"location":"ref/function_schema/#agents.function_schema.FuncSchema.strict_json_schema","title":"strict_json_schema  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>strict_json_schema: bool = True\n</code></pre> <p>Whether the JSON schema is in strict mode. We strongly recommend setting this to True, as it increases the likelihood of correct JSON input.</p>"},{"location":"ref/function_schema/#agents.function_schema.FuncSchema.to_call_args","title":"to_call_args","text":"<pre><code>to_call_args(\n    data: BaseModel,\n) -&gt; tuple[list[Any], dict[str, Any]]\n</code></pre> <p>Converts validated data from the Pydantic model into (args, kwargs), suitable for calling the original function.</p> Source code in <code>src/agents/function_schema.py</code> <pre><code>def to_call_args(self, data: BaseModel) -&gt; tuple[list[Any], dict[str, Any]]:\n    \"\"\"\n    Converts validated data from the Pydantic model into (args, kwargs), suitable for calling\n    the original function.\n    \"\"\"\n    positional_args: list[Any] = []\n    keyword_args: dict[str, Any] = {}\n    seen_var_positional = False\n\n    # Use enumerate() so we can skip the first parameter if it's context.\n    for idx, (name, param) in enumerate(self.signature.parameters.items()):\n        # If the function takes a RunContextWrapper and this is the first parameter, skip it.\n        if self.takes_context and idx == 0:\n            continue\n\n        value = getattr(data, name, None)\n        if param.kind == param.VAR_POSITIONAL:\n            # e.g. *args: extend positional args and mark that *args is now seen\n            positional_args.extend(value or [])\n            seen_var_positional = True\n        elif param.kind == param.VAR_KEYWORD:\n            # e.g. **kwargs handling\n            keyword_args.update(value or {})\n        elif param.kind in (param.POSITIONAL_ONLY, param.POSITIONAL_OR_KEYWORD):\n            # Before *args, add to positional args. After *args, add to keyword args.\n            if not seen_var_positional:\n                positional_args.append(value)\n            else:\n                keyword_args[name] = value\n        else:\n            # For KEYWORD_ONLY parameters, always use keyword args.\n            keyword_args[name] = value\n    return positional_args, keyword_args\n</code></pre>"},{"location":"ref/function_schema/#agents.function_schema.FuncDocumentation","title":"FuncDocumentation  <code>dataclass</code>","text":"<p>Contains metadata about a python function, extracted from its docstring.</p> Source code in <code>src/agents/function_schema.py</code> <pre><code>@dataclass\nclass FuncDocumentation:\n    \"\"\"Contains metadata about a python function, extracted from its docstring.\"\"\"\n\n    name: str\n    \"\"\"The name of the function, via `__name__`.\"\"\"\n    description: str | None\n    \"\"\"The description of the function, derived from the docstring.\"\"\"\n    param_descriptions: dict[str, str] | None\n    \"\"\"The parameter descriptions of the function, derived from the docstring.\"\"\"\n</code></pre>"},{"location":"ref/function_schema/#agents.function_schema.FuncDocumentation.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the function, via <code>__name__</code>.</p>"},{"location":"ref/function_schema/#agents.function_schema.FuncDocumentation.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str | None\n</code></pre> <p>The description of the function, derived from the docstring.</p>"},{"location":"ref/function_schema/#agents.function_schema.FuncDocumentation.param_descriptions","title":"param_descriptions  <code>instance-attribute</code>","text":"<pre><code>param_descriptions: dict[str, str] | None\n</code></pre> <p>The parameter descriptions of the function, derived from the docstring.</p>"},{"location":"ref/function_schema/#agents.function_schema.generate_func_documentation","title":"generate_func_documentation","text":"<pre><code>generate_func_documentation(\n    func: Callable[..., Any],\n    style: DocstringStyle | None = None,\n) -&gt; FuncDocumentation\n</code></pre> <p>Extracts metadata from a function docstring, in preparation for sending it to an LLM as a tool.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable[..., Any]</code> <p>The function to extract documentation from.</p> required <code>style</code> <code>DocstringStyle | None</code> <p>The style of the docstring to use for parsing. If not provided, we will attempt to auto-detect the style.</p> <code>None</code> <p>Returns:</p> Type Description <code>FuncDocumentation</code> <p>A FuncDocumentation object containing the function's name, description, and parameter</p> <code>FuncDocumentation</code> <p>descriptions.</p> Source code in <code>src/agents/function_schema.py</code> <pre><code>def generate_func_documentation(\n    func: Callable[..., Any], style: DocstringStyle | None = None\n) -&gt; FuncDocumentation:\n    \"\"\"\n    Extracts metadata from a function docstring, in preparation for sending it to an LLM as a tool.\n\n    Args:\n        func: The function to extract documentation from.\n        style: The style of the docstring to use for parsing. If not provided, we will attempt to\n            auto-detect the style.\n\n    Returns:\n        A FuncDocumentation object containing the function's name, description, and parameter\n        descriptions.\n    \"\"\"\n    name = func.__name__\n    doc = inspect.getdoc(func)\n    if not doc:\n        return FuncDocumentation(name=name, description=None, param_descriptions=None)\n\n    with _suppress_griffe_logging():\n        docstring = Docstring(doc, lineno=1, parser=style or _detect_docstring_style(doc))\n        parsed = docstring.parse()\n\n    description: str | None = next(\n        (section.value for section in parsed if section.kind == DocstringSectionKind.text), None\n    )\n\n    param_descriptions: dict[str, str] = {\n        param.name: param.description\n        for section in parsed\n        if section.kind == DocstringSectionKind.parameters\n        for param in section.value\n    }\n\n    return FuncDocumentation(\n        name=func.__name__,\n        description=description,\n        param_descriptions=param_descriptions or None,\n    )\n</code></pre>"},{"location":"ref/function_schema/#agents.function_schema.function_schema","title":"function_schema","text":"<pre><code>function_schema(\n    func: Callable[..., Any],\n    docstring_style: DocstringStyle | None = None,\n    name_override: str | None = None,\n    description_override: str | None = None,\n    use_docstring_info: bool = True,\n    strict_json_schema: bool = True,\n) -&gt; FuncSchema\n</code></pre> <p>Given a python function, extracts a <code>FuncSchema</code> from it, capturing the name, description, parameter descriptions, and other metadata.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable[..., Any]</code> <p>The function to extract the schema from.</p> required <code>docstring_style</code> <code>DocstringStyle | None</code> <p>The style of the docstring to use for parsing. If not provided, we will attempt to auto-detect the style.</p> <code>None</code> <code>name_override</code> <code>str | None</code> <p>If provided, use this name instead of the function's <code>__name__</code>.</p> <code>None</code> <code>description_override</code> <code>str | None</code> <p>If provided, use this description instead of the one derived from the docstring.</p> <code>None</code> <code>use_docstring_info</code> <code>bool</code> <p>If True, uses the docstring to generate the description and parameter descriptions.</p> <code>True</code> <code>strict_json_schema</code> <code>bool</code> <p>Whether the JSON schema is in strict mode. If True, we'll ensure that the schema adheres to the \"strict\" standard the OpenAI API expects. We strongly recommend setting this to True, as it increases the likelihood of the LLM providing correct JSON input.</p> <code>True</code> <p>Returns:</p> Type Description <code>FuncSchema</code> <p>A <code>FuncSchema</code> object containing the function's name, description, parameter descriptions,</p> <code>FuncSchema</code> <p>and other metadata.</p> Source code in <code>src/agents/function_schema.py</code> <pre><code>def function_schema(\n    func: Callable[..., Any],\n    docstring_style: DocstringStyle | None = None,\n    name_override: str | None = None,\n    description_override: str | None = None,\n    use_docstring_info: bool = True,\n    strict_json_schema: bool = True,\n) -&gt; FuncSchema:\n    \"\"\"\n    Given a python function, extracts a `FuncSchema` from it, capturing the name, description,\n    parameter descriptions, and other metadata.\n\n    Args:\n        func: The function to extract the schema from.\n        docstring_style: The style of the docstring to use for parsing. If not provided, we will\n            attempt to auto-detect the style.\n        name_override: If provided, use this name instead of the function's `__name__`.\n        description_override: If provided, use this description instead of the one derived from the\n            docstring.\n        use_docstring_info: If True, uses the docstring to generate the description and parameter\n            descriptions.\n        strict_json_schema: Whether the JSON schema is in strict mode. If True, we'll ensure that\n            the schema adheres to the \"strict\" standard the OpenAI API expects. We **strongly**\n            recommend setting this to True, as it increases the likelihood of the LLM providing\n            correct JSON input.\n\n    Returns:\n        A `FuncSchema` object containing the function's name, description, parameter descriptions,\n        and other metadata.\n    \"\"\"\n\n    # 1. Grab docstring info\n    if use_docstring_info:\n        doc_info = generate_func_documentation(func, docstring_style)\n        param_descs = doc_info.param_descriptions or {}\n    else:\n        doc_info = None\n        param_descs = {}\n\n    func_name = name_override or doc_info.name if doc_info else func.__name__\n\n    # 2. Inspect function signature and get type hints\n    sig = inspect.signature(func)\n    type_hints = get_type_hints(func)\n    params = list(sig.parameters.items())\n    takes_context = False\n    filtered_params = []\n\n    if params:\n        first_name, first_param = params[0]\n        # Prefer the evaluated type hint if available\n        ann = type_hints.get(first_name, first_param.annotation)\n        if ann != inspect._empty:\n            origin = get_origin(ann) or ann\n            if origin is RunContextWrapper:\n                takes_context = True  # Mark that the function takes context\n            else:\n                filtered_params.append((first_name, first_param))\n        else:\n            filtered_params.append((first_name, first_param))\n\n    # For parameters other than the first, raise error if any use RunContextWrapper.\n    for name, param in params[1:]:\n        ann = type_hints.get(name, param.annotation)\n        if ann != inspect._empty:\n            origin = get_origin(ann) or ann\n            if origin is RunContextWrapper:\n                raise UserError(\n                    f\"RunContextWrapper param found at non-first position in function\"\n                    f\" {func.__name__}\"\n                )\n        filtered_params.append((name, param))\n\n    # We will collect field definitions for create_model as a dict:\n    #   field_name -&gt; (type_annotation, default_value_or_Field(...))\n    fields: dict[str, Any] = {}\n\n    for name, param in filtered_params:\n        ann = type_hints.get(name, param.annotation)\n        default = param.default\n\n        # If there's no type hint, assume `Any`\n        if ann == inspect._empty:\n            ann = Any\n\n        # If a docstring param description exists, use it\n        field_description = param_descs.get(name, None)\n\n        # Handle different parameter kinds\n        if param.kind == param.VAR_POSITIONAL:\n            # e.g. *args: extend positional args\n            if get_origin(ann) is tuple:\n                # e.g. def foo(*args: tuple[int, ...]) -&gt; treat as List[int]\n                args_of_tuple = get_args(ann)\n                if len(args_of_tuple) == 2 and args_of_tuple[1] is Ellipsis:\n                    ann = list[args_of_tuple[0]]  # type: ignore\n                else:\n                    ann = list[Any]\n            else:\n                # If user wrote *args: int, treat as List[int]\n                ann = list[ann]  # type: ignore\n\n            # Default factory to empty list\n            fields[name] = (\n                ann,\n                Field(default_factory=list, description=field_description),  # type: ignore\n            )\n\n        elif param.kind == param.VAR_KEYWORD:\n            # **kwargs handling\n            if get_origin(ann) is dict:\n                # e.g. def foo(**kwargs: dict[str, int])\n                dict_args = get_args(ann)\n                if len(dict_args) == 2:\n                    ann = dict[dict_args[0], dict_args[1]]  # type: ignore\n                else:\n                    ann = dict[str, Any]\n            else:\n                # e.g. def foo(**kwargs: int) -&gt; Dict[str, int]\n                ann = dict[str, ann]  # type: ignore\n\n            fields[name] = (\n                ann,\n                Field(default_factory=dict, description=field_description),  # type: ignore\n            )\n\n        else:\n            # Normal parameter\n            if default == inspect._empty:\n                # Required field\n                fields[name] = (\n                    ann,\n                    Field(..., description=field_description),\n                )\n            else:\n                # Parameter with a default value\n                fields[name] = (\n                    ann,\n                    Field(default=default, description=field_description),\n                )\n\n    # 3. Dynamically build a Pydantic model\n    dynamic_model = create_model(f\"{func_name}_args\", __base__=BaseModel, **fields)\n\n    # 4. Build JSON schema from that model\n    json_schema = dynamic_model.model_json_schema()\n    if strict_json_schema:\n        json_schema = ensure_strict_json_schema(json_schema)\n\n    # 5. Return as a FuncSchema dataclass\n    return FuncSchema(\n        name=func_name,\n        description=description_override or doc_info.description if doc_info else None,\n        params_pydantic_model=dynamic_model,\n        params_json_schema=json_schema,\n        signature=sig,\n        takes_context=takes_context,\n        strict_json_schema=strict_json_schema,\n    )\n</code></pre>"},{"location":"ref/guardrail/","title":"<code>Guardrails</code>","text":""},{"location":"ref/guardrail/#agents.guardrail.GuardrailFunctionOutput","title":"GuardrailFunctionOutput  <code>dataclass</code>","text":"<p>The output of a guardrail function.</p> Source code in <code>src/agents/guardrail.py</code> <pre><code>@dataclass\nclass GuardrailFunctionOutput:\n    \"\"\"The output of a guardrail function.\"\"\"\n\n    output_info: Any\n    \"\"\"\n    Optional information about the guardrail's output. For example, the guardrail could include\n    information about the checks it performed and granular results.\n    \"\"\"\n\n    tripwire_triggered: bool\n    \"\"\"\n    Whether the tripwire was triggered. If triggered, the agent's execution will be halted.\n    \"\"\"\n</code></pre>"},{"location":"ref/guardrail/#agents.guardrail.GuardrailFunctionOutput.output_info","title":"output_info  <code>instance-attribute</code>","text":"<pre><code>output_info: Any\n</code></pre> <p>Optional information about the guardrail's output. For example, the guardrail could include information about the checks it performed and granular results.</p>"},{"location":"ref/guardrail/#agents.guardrail.GuardrailFunctionOutput.tripwire_triggered","title":"tripwire_triggered  <code>instance-attribute</code>","text":"<pre><code>tripwire_triggered: bool\n</code></pre> <p>Whether the tripwire was triggered. If triggered, the agent's execution will be halted.</p>"},{"location":"ref/guardrail/#agents.guardrail.InputGuardrailResult","title":"InputGuardrailResult  <code>dataclass</code>","text":"<p>The result of a guardrail run.</p> Source code in <code>src/agents/guardrail.py</code> <pre><code>@dataclass\nclass InputGuardrailResult:\n    \"\"\"The result of a guardrail run.\"\"\"\n\n    guardrail: InputGuardrail[Any]\n    \"\"\"\n    The guardrail that was run.\n    \"\"\"\n\n    output: GuardrailFunctionOutput\n    \"\"\"The output of the guardrail function.\"\"\"\n</code></pre>"},{"location":"ref/guardrail/#agents.guardrail.InputGuardrailResult.guardrail","title":"guardrail  <code>instance-attribute</code>","text":"<pre><code>guardrail: InputGuardrail[Any]\n</code></pre> <p>The guardrail that was run.</p>"},{"location":"ref/guardrail/#agents.guardrail.InputGuardrailResult.output","title":"output  <code>instance-attribute</code>","text":"<pre><code>output: GuardrailFunctionOutput\n</code></pre> <p>The output of the guardrail function.</p>"},{"location":"ref/guardrail/#agents.guardrail.OutputGuardrailResult","title":"OutputGuardrailResult  <code>dataclass</code>","text":"<p>The result of a guardrail run.</p> Source code in <code>src/agents/guardrail.py</code> <pre><code>@dataclass\nclass OutputGuardrailResult:\n    \"\"\"The result of a guardrail run.\"\"\"\n\n    guardrail: OutputGuardrail[Any]\n    \"\"\"\n    The guardrail that was run.\n    \"\"\"\n\n    agent_output: Any\n    \"\"\"\n    The output of the agent that was checked by the guardrail.\n    \"\"\"\n\n    agent: Agent[Any]\n    \"\"\"\n    The agent that was checked by the guardrail.\n    \"\"\"\n\n    output: GuardrailFunctionOutput\n    \"\"\"The output of the guardrail function.\"\"\"\n</code></pre>"},{"location":"ref/guardrail/#agents.guardrail.OutputGuardrailResult.guardrail","title":"guardrail  <code>instance-attribute</code>","text":"<pre><code>guardrail: OutputGuardrail[Any]\n</code></pre> <p>The guardrail that was run.</p>"},{"location":"ref/guardrail/#agents.guardrail.OutputGuardrailResult.agent_output","title":"agent_output  <code>instance-attribute</code>","text":"<pre><code>agent_output: Any\n</code></pre> <p>The output of the agent that was checked by the guardrail.</p>"},{"location":"ref/guardrail/#agents.guardrail.OutputGuardrailResult.agent","title":"agent  <code>instance-attribute</code>","text":"<pre><code>agent: Agent[Any]\n</code></pre> <p>The agent that was checked by the guardrail.</p>"},{"location":"ref/guardrail/#agents.guardrail.OutputGuardrailResult.output","title":"output  <code>instance-attribute</code>","text":"<pre><code>output: GuardrailFunctionOutput\n</code></pre> <p>The output of the guardrail function.</p>"},{"location":"ref/guardrail/#agents.guardrail.InputGuardrail","title":"InputGuardrail  <code>dataclass</code>","text":"<p>               Bases: <code>Generic[TContext]</code></p> <p>Input guardrails are checks that run in parallel to the agent's execution. They can be used to do things like: - Check if input messages are off-topic - Take over control of the agent's execution if an unexpected input is detected</p> <p>You can use the <code>@input_guardrail()</code> decorator to turn a function into an <code>InputGuardrail</code>, or create an <code>InputGuardrail</code> manually.</p> <p>Guardrails return a <code>GuardrailResult</code>. If <code>result.tripwire_triggered</code> is <code>True</code>, the agent execution will immediately stop and a <code>InputGuardrailTripwireTriggered</code> exception will be raised</p> Source code in <code>src/agents/guardrail.py</code> <pre><code>@dataclass\nclass InputGuardrail(Generic[TContext]):\n    \"\"\"Input guardrails are checks that run in parallel to the agent's execution.\n    They can be used to do things like:\n    - Check if input messages are off-topic\n    - Take over control of the agent's execution if an unexpected input is detected\n\n    You can use the `@input_guardrail()` decorator to turn a function into an `InputGuardrail`, or\n    create an `InputGuardrail` manually.\n\n    Guardrails return a `GuardrailResult`. If `result.tripwire_triggered` is `True`, the agent\n    execution will immediately stop and a `InputGuardrailTripwireTriggered` exception will be raised\n    \"\"\"\n\n    guardrail_function: Callable[\n        [RunContextWrapper[TContext], Agent[Any], str | list[TResponseInputItem]],\n        MaybeAwaitable[GuardrailFunctionOutput],\n    ]\n    \"\"\"A function that receives the agent input and the context, and returns a\n     `GuardrailResult`. The result marks whether the tripwire was triggered, and can optionally\n     include information about the guardrail's output.\n    \"\"\"\n\n    name: str | None = None\n    \"\"\"The name of the guardrail, used for tracing. If not provided, we'll use the guardrail\n    function's name.\n    \"\"\"\n\n    def get_name(self) -&gt; str:\n        if self.name:\n            return self.name\n\n        return self.guardrail_function.__name__\n\n    async def run(\n        self,\n        agent: Agent[Any],\n        input: str | list[TResponseInputItem],\n        context: RunContextWrapper[TContext],\n    ) -&gt; InputGuardrailResult:\n        if not callable(self.guardrail_function):\n            raise UserError(f\"Guardrail function must be callable, got {self.guardrail_function}\")\n\n        output = self.guardrail_function(context, agent, input)\n        if inspect.isawaitable(output):\n            return InputGuardrailResult(\n                guardrail=self,\n                output=await output,\n            )\n\n        return InputGuardrailResult(\n            guardrail=self,\n            output=output,\n        )\n</code></pre>"},{"location":"ref/guardrail/#agents.guardrail.InputGuardrail.guardrail_function","title":"guardrail_function  <code>instance-attribute</code>","text":"<pre><code>guardrail_function: Callable[\n    [\n        RunContextWrapper[TContext],\n        Agent[Any],\n        str | list[TResponseInputItem],\n    ],\n    MaybeAwaitable[GuardrailFunctionOutput],\n]\n</code></pre> <p>A function that receives the agent input and the context, and returns a <code>GuardrailResult</code>. The result marks whether the tripwire was triggered, and can optionally include information about the guardrail's output.</p>"},{"location":"ref/guardrail/#agents.guardrail.InputGuardrail.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str | None = None\n</code></pre> <p>The name of the guardrail, used for tracing. If not provided, we'll use the guardrail function's name.</p>"},{"location":"ref/guardrail/#agents.guardrail.OutputGuardrail","title":"OutputGuardrail  <code>dataclass</code>","text":"<p>               Bases: <code>Generic[TContext]</code></p> <p>Output guardrails are checks that run on the final output of an agent. They can be used to do check if the output passes certain validation criteria</p> <p>You can use the <code>@output_guardrail()</code> decorator to turn a function into an <code>OutputGuardrail</code>, or create an <code>OutputGuardrail</code> manually.</p> <p>Guardrails return a <code>GuardrailResult</code>. If <code>result.tripwire_triggered</code> is <code>True</code>, a <code>OutputGuardrailTripwireTriggered</code> exception will be raised.</p> Source code in <code>src/agents/guardrail.py</code> <pre><code>@dataclass\nclass OutputGuardrail(Generic[TContext]):\n    \"\"\"Output guardrails are checks that run on the final output of an agent.\n    They can be used to do check if the output passes certain validation criteria\n\n    You can use the `@output_guardrail()` decorator to turn a function into an `OutputGuardrail`,\n    or create an `OutputGuardrail` manually.\n\n    Guardrails return a `GuardrailResult`. If `result.tripwire_triggered` is `True`, a\n    `OutputGuardrailTripwireTriggered` exception will be raised.\n    \"\"\"\n\n    guardrail_function: Callable[\n        [RunContextWrapper[TContext], Agent[Any], Any],\n        MaybeAwaitable[GuardrailFunctionOutput],\n    ]\n    \"\"\"A function that receives the final agent, its output, and the context, and returns a\n     `GuardrailResult`. The result marks whether the tripwire was triggered, and can optionally\n     include information about the guardrail's output.\n    \"\"\"\n\n    name: str | None = None\n    \"\"\"The name of the guardrail, used for tracing. If not provided, we'll use the guardrail\n    function's name.\n    \"\"\"\n\n    def get_name(self) -&gt; str:\n        if self.name:\n            return self.name\n\n        return self.guardrail_function.__name__\n\n    async def run(\n        self, context: RunContextWrapper[TContext], agent: Agent[Any], agent_output: Any\n    ) -&gt; OutputGuardrailResult:\n        if not callable(self.guardrail_function):\n            raise UserError(f\"Guardrail function must be callable, got {self.guardrail_function}\")\n\n        output = self.guardrail_function(context, agent, agent_output)\n        if inspect.isawaitable(output):\n            return OutputGuardrailResult(\n                guardrail=self,\n                agent=agent,\n                agent_output=agent_output,\n                output=await output,\n            )\n\n        return OutputGuardrailResult(\n            guardrail=self,\n            agent=agent,\n            agent_output=agent_output,\n            output=output,\n        )\n</code></pre>"},{"location":"ref/guardrail/#agents.guardrail.OutputGuardrail.guardrail_function","title":"guardrail_function  <code>instance-attribute</code>","text":"<pre><code>guardrail_function: Callable[\n    [RunContextWrapper[TContext], Agent[Any], Any],\n    MaybeAwaitable[GuardrailFunctionOutput],\n]\n</code></pre> <p>A function that receives the final agent, its output, and the context, and returns a <code>GuardrailResult</code>. The result marks whether the tripwire was triggered, and can optionally include information about the guardrail's output.</p>"},{"location":"ref/guardrail/#agents.guardrail.OutputGuardrail.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str | None = None\n</code></pre> <p>The name of the guardrail, used for tracing. If not provided, we'll use the guardrail function's name.</p>"},{"location":"ref/guardrail/#agents.guardrail.input_guardrail","title":"input_guardrail","text":"<pre><code>input_guardrail(\n    func: _InputGuardrailFuncSync[TContext_co],\n) -&gt; InputGuardrail[TContext_co]\n</code></pre><pre><code>input_guardrail(\n    func: _InputGuardrailFuncAsync[TContext_co],\n) -&gt; InputGuardrail[TContext_co]\n</code></pre><pre><code>input_guardrail(\n    *, name: str | None = None\n) -&gt; Callable[\n    [\n        _InputGuardrailFuncSync[TContext_co]\n        | _InputGuardrailFuncAsync[TContext_co]\n    ],\n    InputGuardrail[TContext_co],\n]\n</code></pre> <pre><code>input_guardrail(\n    func: _InputGuardrailFuncSync[TContext_co]\n    | _InputGuardrailFuncAsync[TContext_co]\n    | None = None,\n    *,\n    name: str | None = None,\n) -&gt; (\n    InputGuardrail[TContext_co]\n    | Callable[\n        [\n            _InputGuardrailFuncSync[TContext_co]\n            | _InputGuardrailFuncAsync[TContext_co]\n        ],\n        InputGuardrail[TContext_co],\n    ]\n)\n</code></pre> <p>Decorator that transforms a sync or async function into an <code>InputGuardrail</code>. It can be used directly (no parentheses) or with keyword args, e.g.:</p> <pre><code>@input_guardrail\ndef my_sync_guardrail(...): ...\n\n@input_guardrail(name=\"guardrail_name\")\nasync def my_async_guardrail(...): ...\n</code></pre> Source code in <code>src/agents/guardrail.py</code> <pre><code>def input_guardrail(\n    func: _InputGuardrailFuncSync[TContext_co]\n    | _InputGuardrailFuncAsync[TContext_co]\n    | None = None,\n    *,\n    name: str | None = None,\n) -&gt; (\n    InputGuardrail[TContext_co]\n    | Callable[\n        [_InputGuardrailFuncSync[TContext_co] | _InputGuardrailFuncAsync[TContext_co]],\n        InputGuardrail[TContext_co],\n    ]\n):\n    \"\"\"\n    Decorator that transforms a sync or async function into an `InputGuardrail`.\n    It can be used directly (no parentheses) or with keyword args, e.g.:\n\n        @input_guardrail\n        def my_sync_guardrail(...): ...\n\n        @input_guardrail(name=\"guardrail_name\")\n        async def my_async_guardrail(...): ...\n    \"\"\"\n\n    def decorator(\n        f: _InputGuardrailFuncSync[TContext_co] | _InputGuardrailFuncAsync[TContext_co],\n    ) -&gt; InputGuardrail[TContext_co]:\n        return InputGuardrail(guardrail_function=f, name=name)\n\n    if func is not None:\n        # Decorator was used without parentheses\n        return decorator(func)\n\n    # Decorator used with keyword arguments\n    return decorator\n</code></pre>"},{"location":"ref/guardrail/#agents.guardrail.output_guardrail","title":"output_guardrail","text":"<pre><code>output_guardrail(\n    func: _OutputGuardrailFuncSync[TContext_co],\n) -&gt; OutputGuardrail[TContext_co]\n</code></pre><pre><code>output_guardrail(\n    func: _OutputGuardrailFuncAsync[TContext_co],\n) -&gt; OutputGuardrail[TContext_co]\n</code></pre><pre><code>output_guardrail(\n    *, name: str | None = None\n) -&gt; Callable[\n    [\n        _OutputGuardrailFuncSync[TContext_co]\n        | _OutputGuardrailFuncAsync[TContext_co]\n    ],\n    OutputGuardrail[TContext_co],\n]\n</code></pre> <pre><code>output_guardrail(\n    func: _OutputGuardrailFuncSync[TContext_co]\n    | _OutputGuardrailFuncAsync[TContext_co]\n    | None = None,\n    *,\n    name: str | None = None,\n) -&gt; (\n    OutputGuardrail[TContext_co]\n    | Callable[\n        [\n            _OutputGuardrailFuncSync[TContext_co]\n            | _OutputGuardrailFuncAsync[TContext_co]\n        ],\n        OutputGuardrail[TContext_co],\n    ]\n)\n</code></pre> <p>Decorator that transforms a sync or async function into an <code>OutputGuardrail</code>. It can be used directly (no parentheses) or with keyword args, e.g.:</p> <pre><code>@output_guardrail\ndef my_sync_guardrail(...): ...\n\n@output_guardrail(name=\"guardrail_name\")\nasync def my_async_guardrail(...): ...\n</code></pre> Source code in <code>src/agents/guardrail.py</code> <pre><code>def output_guardrail(\n    func: _OutputGuardrailFuncSync[TContext_co]\n    | _OutputGuardrailFuncAsync[TContext_co]\n    | None = None,\n    *,\n    name: str | None = None,\n) -&gt; (\n    OutputGuardrail[TContext_co]\n    | Callable[\n        [_OutputGuardrailFuncSync[TContext_co] | _OutputGuardrailFuncAsync[TContext_co]],\n        OutputGuardrail[TContext_co],\n    ]\n):\n    \"\"\"\n    Decorator that transforms a sync or async function into an `OutputGuardrail`.\n    It can be used directly (no parentheses) or with keyword args, e.g.:\n\n        @output_guardrail\n        def my_sync_guardrail(...): ...\n\n        @output_guardrail(name=\"guardrail_name\")\n        async def my_async_guardrail(...): ...\n    \"\"\"\n\n    def decorator(\n        f: _OutputGuardrailFuncSync[TContext_co] | _OutputGuardrailFuncAsync[TContext_co],\n    ) -&gt; OutputGuardrail[TContext_co]:\n        return OutputGuardrail(guardrail_function=f, name=name)\n\n    if func is not None:\n        # Decorator was used without parentheses\n        return decorator(func)\n\n    # Decorator used with keyword arguments\n    return decorator\n</code></pre>"},{"location":"ref/handoffs/","title":"<code>Handoffs</code>","text":""},{"location":"ref/handoffs/#agents.handoffs.HandoffInputFilter","title":"HandoffInputFilter  <code>module-attribute</code>","text":"<pre><code>HandoffInputFilter: TypeAlias = Callable[\n    [HandoffInputData], HandoffInputData\n]\n</code></pre> <p>A function that filters the input data passed to the next agent.</p>"},{"location":"ref/handoffs/#agents.handoffs.HandoffInputData","title":"HandoffInputData  <code>dataclass</code>","text":"Source code in <code>src/agents/handoffs.py</code> <pre><code>@dataclass(frozen=True)\nclass HandoffInputData:\n    input_history: str | tuple[TResponseInputItem, ...]\n    \"\"\"\n    The input history before `Runner.run()` was called.\n    \"\"\"\n\n    pre_handoff_items: tuple[RunItem, ...]\n    \"\"\"\n    The items generated before the agent turn where the handoff was invoked.\n    \"\"\"\n\n    new_items: tuple[RunItem, ...]\n    \"\"\"\n    The new items generated during the current agent turn, including the item that triggered the\n    handoff and the tool output message representing the response from the handoff output.\n    \"\"\"\n</code></pre>"},{"location":"ref/handoffs/#agents.handoffs.HandoffInputData.input_history","title":"input_history  <code>instance-attribute</code>","text":"<pre><code>input_history: str | tuple[TResponseInputItem, ...]\n</code></pre> <p>The input history before <code>Runner.run()</code> was called.</p>"},{"location":"ref/handoffs/#agents.handoffs.HandoffInputData.pre_handoff_items","title":"pre_handoff_items  <code>instance-attribute</code>","text":"<pre><code>pre_handoff_items: tuple[RunItem, ...]\n</code></pre> <p>The items generated before the agent turn where the handoff was invoked.</p>"},{"location":"ref/handoffs/#agents.handoffs.HandoffInputData.new_items","title":"new_items  <code>instance-attribute</code>","text":"<pre><code>new_items: tuple[RunItem, ...]\n</code></pre> <p>The new items generated during the current agent turn, including the item that triggered the handoff and the tool output message representing the response from the handoff output.</p>"},{"location":"ref/handoffs/#agents.handoffs.Handoff","title":"Handoff  <code>dataclass</code>","text":"<p>               Bases: <code>Generic[TContext]</code></p> <p>A handoff is when an agent delegates a task to another agent. For example, in a customer support scenario you might have a \"triage agent\" that determines which agent should handle the user's request, and sub-agents that specialize in different areas like billing, account management, etc.</p> Source code in <code>src/agents/handoffs.py</code> <pre><code>@dataclass\nclass Handoff(Generic[TContext]):\n    \"\"\"A handoff is when an agent delegates a task to another agent.\n    For example, in a customer support scenario you might have a \"triage agent\" that determines\n    which agent should handle the user's request, and sub-agents that specialize in different\n    areas like billing, account management, etc.\n    \"\"\"\n\n    tool_name: str\n    \"\"\"The name of the tool that represents the handoff.\"\"\"\n\n    tool_description: str\n    \"\"\"The description of the tool that represents the handoff.\"\"\"\n\n    input_json_schema: dict[str, Any]\n    \"\"\"The JSON schema for the handoff input. Can be empty if the handoff does not take an input.\n    \"\"\"\n\n    on_invoke_handoff: Callable[[RunContextWrapper[Any], str], Awaitable[Agent[TContext]]]\n    \"\"\"The function that invokes the handoff. The parameters passed are:\n    1. The handoff run context\n    2. The arguments from the LLM, as a JSON string. Empty string if input_json_schema is empty.\n\n    Must return an agent.\n    \"\"\"\n\n    agent_name: str\n    \"\"\"The name of the agent that is being handed off to.\"\"\"\n\n    input_filter: HandoffInputFilter | None = None\n    \"\"\"A function that filters the inputs that are passed to the next agent. By default, the new\n    agent sees the entire conversation history. In some cases, you may want to filter inputs e.g.\n    to remove older inputs, or remove tools from existing inputs.\n\n    The function will receive the entire conversation history so far, including the input item\n    that triggered the handoff and a tool call output item representing the handoff tool's output.\n\n    You are free to modify the input history or new items as you see fit. The next agent that\n    runs will receive `handoff_input_data.all_items`.\n\n    IMPORTANT: in streaming mode, we will not stream anything as a result of this function. The\n    items generated before will already have been streamed.\n    \"\"\"\n\n    strict_json_schema: bool = True\n    \"\"\"Whether the input JSON schema is in strict mode. We **strongly** recommend setting this to\n    True, as it increases the likelihood of correct JSON input.\n    \"\"\"\n\n    def get_transfer_message(self, agent: Agent[Any]) -&gt; str:\n        base = f\"{{'assistant': '{agent.name}'}}\"\n        return base\n\n    @classmethod\n    def default_tool_name(cls, agent: Agent[Any]) -&gt; str:\n        return _transforms.transform_string_function_style(f\"transfer_to_{agent.name}\")\n\n    @classmethod\n    def default_tool_description(cls, agent: Agent[Any]) -&gt; str:\n        return (\n            f\"Handoff to the {agent.name} agent to handle the request. \"\n            f\"{agent.handoff_description or ''}\"\n        )\n</code></pre>"},{"location":"ref/handoffs/#agents.handoffs.Handoff.tool_name","title":"tool_name  <code>instance-attribute</code>","text":"<pre><code>tool_name: str\n</code></pre> <p>The name of the tool that represents the handoff.</p>"},{"location":"ref/handoffs/#agents.handoffs.Handoff.tool_description","title":"tool_description  <code>instance-attribute</code>","text":"<pre><code>tool_description: str\n</code></pre> <p>The description of the tool that represents the handoff.</p>"},{"location":"ref/handoffs/#agents.handoffs.Handoff.input_json_schema","title":"input_json_schema  <code>instance-attribute</code>","text":"<pre><code>input_json_schema: dict[str, Any]\n</code></pre> <p>The JSON schema for the handoff input. Can be empty if the handoff does not take an input.</p>"},{"location":"ref/handoffs/#agents.handoffs.Handoff.on_invoke_handoff","title":"on_invoke_handoff  <code>instance-attribute</code>","text":"<pre><code>on_invoke_handoff: Callable[\n    [RunContextWrapper[Any], str],\n    Awaitable[Agent[TContext]],\n]\n</code></pre> <p>The function that invokes the handoff. The parameters passed are: 1. The handoff run context 2. The arguments from the LLM, as a JSON string. Empty string if input_json_schema is empty.</p> <p>Must return an agent.</p>"},{"location":"ref/handoffs/#agents.handoffs.Handoff.agent_name","title":"agent_name  <code>instance-attribute</code>","text":"<pre><code>agent_name: str\n</code></pre> <p>The name of the agent that is being handed off to.</p>"},{"location":"ref/handoffs/#agents.handoffs.Handoff.input_filter","title":"input_filter  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>input_filter: HandoffInputFilter | None = None\n</code></pre> <p>A function that filters the inputs that are passed to the next agent. By default, the new agent sees the entire conversation history. In some cases, you may want to filter inputs e.g. to remove older inputs, or remove tools from existing inputs.</p> <p>The function will receive the entire conversation history so far, including the input item that triggered the handoff and a tool call output item representing the handoff tool's output.</p> <p>You are free to modify the input history or new items as you see fit. The next agent that runs will receive <code>handoff_input_data.all_items</code>.</p> <p>IMPORTANT: in streaming mode, we will not stream anything as a result of this function. The items generated before will already have been streamed.</p>"},{"location":"ref/handoffs/#agents.handoffs.Handoff.strict_json_schema","title":"strict_json_schema  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>strict_json_schema: bool = True\n</code></pre> <p>Whether the input JSON schema is in strict mode. We strongly recommend setting this to True, as it increases the likelihood of correct JSON input.</p>"},{"location":"ref/handoffs/#agents.handoffs.handoff","title":"handoff","text":"<pre><code>handoff(\n    agent: Agent[TContext],\n    *,\n    tool_name_override: str | None = None,\n    tool_description_override: str | None = None,\n    input_filter: Callable[\n        [HandoffInputData], HandoffInputData\n    ]\n    | None = None,\n) -&gt; Handoff[TContext]\n</code></pre><pre><code>handoff(\n    agent: Agent[TContext],\n    *,\n    on_handoff: OnHandoffWithInput[THandoffInput],\n    input_type: type[THandoffInput],\n    tool_description_override: str | None = None,\n    tool_name_override: str | None = None,\n    input_filter: Callable[\n        [HandoffInputData], HandoffInputData\n    ]\n    | None = None,\n) -&gt; Handoff[TContext]\n</code></pre><pre><code>handoff(\n    agent: Agent[TContext],\n    *,\n    on_handoff: OnHandoffWithoutInput,\n    tool_description_override: str | None = None,\n    tool_name_override: str | None = None,\n    input_filter: Callable[\n        [HandoffInputData], HandoffInputData\n    ]\n    | None = None,\n) -&gt; Handoff[TContext]\n</code></pre> <pre><code>handoff(\n    agent: Agent[TContext],\n    tool_name_override: str | None = None,\n    tool_description_override: str | None = None,\n    on_handoff: OnHandoffWithInput[THandoffInput]\n    | OnHandoffWithoutInput\n    | None = None,\n    input_type: type[THandoffInput] | None = None,\n    input_filter: Callable[\n        [HandoffInputData], HandoffInputData\n    ]\n    | None = None,\n) -&gt; Handoff[TContext]\n</code></pre> <p>Create a handoff from an agent.</p> <p>Parameters:</p> Name Type Description Default <code>agent</code> <code>Agent[TContext]</code> <p>The agent to handoff to, or a function that returns an agent.</p> required <code>tool_name_override</code> <code>str | None</code> <p>Optional override for the name of the tool that represents the handoff.</p> <code>None</code> <code>tool_description_override</code> <code>str | None</code> <p>Optional override for the description of the tool that represents the handoff.</p> <code>None</code> <code>on_handoff</code> <code>OnHandoffWithInput[THandoffInput] | OnHandoffWithoutInput | None</code> <p>A function that runs when the handoff is invoked.</p> <code>None</code> <code>input_type</code> <code>type[THandoffInput] | None</code> <p>the type of the input to the handoff. If provided, the input will be validated against this type. Only relevant if you pass a function that takes an input.</p> <code>None</code> <code>input_filter</code> <code>Callable[[HandoffInputData], HandoffInputData] | None</code> <p>a function that filters the inputs that are passed to the next agent.</p> <code>None</code> Source code in <code>src/agents/handoffs.py</code> <pre><code>def handoff(\n    agent: Agent[TContext],\n    tool_name_override: str | None = None,\n    tool_description_override: str | None = None,\n    on_handoff: OnHandoffWithInput[THandoffInput] | OnHandoffWithoutInput | None = None,\n    input_type: type[THandoffInput] | None = None,\n    input_filter: Callable[[HandoffInputData], HandoffInputData] | None = None,\n) -&gt; Handoff[TContext]:\n    \"\"\"Create a handoff from an agent.\n\n    Args:\n        agent: The agent to handoff to, or a function that returns an agent.\n        tool_name_override: Optional override for the name of the tool that represents the handoff.\n        tool_description_override: Optional override for the description of the tool that\n            represents the handoff.\n        on_handoff: A function that runs when the handoff is invoked.\n        input_type: the type of the input to the handoff. If provided, the input will be validated\n            against this type. Only relevant if you pass a function that takes an input.\n        input_filter: a function that filters the inputs that are passed to the next agent.\n    \"\"\"\n    assert (on_handoff and input_type) or not (on_handoff and input_type), (\n        \"You must provide either both on_input and input_type, or neither\"\n    )\n    type_adapter: TypeAdapter[Any] | None\n    if input_type is not None:\n        assert callable(on_handoff), \"on_handoff must be callable\"\n        sig = inspect.signature(on_handoff)\n        if len(sig.parameters) != 2:\n            raise UserError(\"on_handoff must take two arguments: context and input\")\n\n        type_adapter = TypeAdapter(input_type)\n        input_json_schema = type_adapter.json_schema()\n    else:\n        type_adapter = None\n        input_json_schema = {}\n        if on_handoff is not None:\n            sig = inspect.signature(on_handoff)\n            if len(sig.parameters) != 1:\n                raise UserError(\"on_handoff must take one argument: context\")\n\n    async def _invoke_handoff(\n        ctx: RunContextWrapper[Any], input_json: str | None = None\n    ) -&gt; Agent[Any]:\n        if input_type is not None and type_adapter is not None:\n            if input_json is None:\n                _error_tracing.attach_error_to_current_span(\n                    SpanError(\n                        message=\"Handoff function expected non-null input, but got None\",\n                        data={\"details\": \"input_json is None\"},\n                    )\n                )\n                raise ModelBehaviorError(\"Handoff function expected non-null input, but got None\")\n\n            validated_input = _json.validate_json(\n                json_str=input_json,\n                type_adapter=type_adapter,\n                partial=False,\n            )\n            input_func = cast(OnHandoffWithInput[THandoffInput], on_handoff)\n            if inspect.iscoroutinefunction(input_func):\n                await input_func(ctx, validated_input)\n            else:\n                input_func(ctx, validated_input)\n        elif on_handoff is not None:\n            no_input_func = cast(OnHandoffWithoutInput, on_handoff)\n            if inspect.iscoroutinefunction(no_input_func):\n                await no_input_func(ctx)\n            else:\n                no_input_func(ctx)\n\n        return agent\n\n    tool_name = tool_name_override or Handoff.default_tool_name(agent)\n    tool_description = tool_description_override or Handoff.default_tool_description(agent)\n\n    # Always ensure the input JSON schema is in strict mode\n    # If there is a need, we can make this configurable in the future\n    input_json_schema = ensure_strict_json_schema(input_json_schema)\n\n    return Handoff(\n        tool_name=tool_name,\n        tool_description=tool_description,\n        input_json_schema=input_json_schema,\n        on_invoke_handoff=_invoke_handoff,\n        input_filter=input_filter,\n        agent_name=agent.name,\n    )\n</code></pre>"},{"location":"ref/items/","title":"<code>Items</code>","text":""},{"location":"ref/items/#agents.items.TResponse","title":"TResponse  <code>module-attribute</code>","text":"<pre><code>TResponse = Response\n</code></pre> <p>A type alias for the Response type from the OpenAI SDK.</p>"},{"location":"ref/items/#agents.items.TResponseInputItem","title":"TResponseInputItem  <code>module-attribute</code>","text":"<pre><code>TResponseInputItem = ResponseInputItemParam\n</code></pre> <p>A type alias for the ResponseInputItemParam type from the OpenAI SDK.</p>"},{"location":"ref/items/#agents.items.TResponseOutputItem","title":"TResponseOutputItem  <code>module-attribute</code>","text":"<pre><code>TResponseOutputItem = ResponseOutputItem\n</code></pre> <p>A type alias for the ResponseOutputItem type from the OpenAI SDK.</p>"},{"location":"ref/items/#agents.items.TResponseStreamEvent","title":"TResponseStreamEvent  <code>module-attribute</code>","text":"<pre><code>TResponseStreamEvent = ResponseStreamEvent\n</code></pre> <p>A type alias for the ResponseStreamEvent type from the OpenAI SDK.</p>"},{"location":"ref/items/#agents.items.ToolCallItemTypes","title":"ToolCallItemTypes  <code>module-attribute</code>","text":"<pre><code>ToolCallItemTypes: TypeAlias = Union[\n    ResponseFunctionToolCall,\n    ResponseComputerToolCall,\n    ResponseFileSearchToolCall,\n    ResponseFunctionWebSearch,\n]\n</code></pre> <p>A type that represents a tool call item.</p>"},{"location":"ref/items/#agents.items.RunItem","title":"RunItem  <code>module-attribute</code>","text":"<pre><code>RunItem: TypeAlias = Union[\n    MessageOutputItem,\n    HandoffCallItem,\n    HandoffOutputItem,\n    ToolCallItem,\n    ToolCallOutputItem,\n    ReasoningItem,\n]\n</code></pre> <p>An item generated by an agent.</p>"},{"location":"ref/items/#agents.items.RunItemBase","title":"RunItemBase  <code>dataclass</code>","text":"<p>               Bases: <code>Generic[T]</code>, <code>ABC</code></p> Source code in <code>src/agents/items.py</code> <pre><code>@dataclass\nclass RunItemBase(Generic[T], abc.ABC):\n    agent: Agent[Any]\n    \"\"\"The agent whose run caused this item to be generated.\"\"\"\n\n    raw_item: T\n    \"\"\"The raw Responses item from the run. This will always be a either an output item (i.e.\n    `openai.types.responses.ResponseOutputItem` or an input item\n    (i.e. `openai.types.responses.ResponseInputItemParam`).\n    \"\"\"\n\n    def to_input_item(self) -&gt; TResponseInputItem:\n        \"\"\"Converts this item into an input item suitable for passing to the model.\"\"\"\n        if isinstance(self.raw_item, dict):\n            # We know that input items are dicts, so we can ignore the type error\n            return self.raw_item  # type: ignore\n        elif isinstance(self.raw_item, BaseModel):\n            # All output items are Pydantic models that can be converted to input items.\n            return self.raw_item.model_dump(exclude_unset=True)  # type: ignore\n        else:\n            raise AgentsException(f\"Unexpected raw item type: {type(self.raw_item)}\")\n</code></pre>"},{"location":"ref/items/#agents.items.RunItemBase.agent","title":"agent  <code>instance-attribute</code>","text":"<pre><code>agent: Agent[Any]\n</code></pre> <p>The agent whose run caused this item to be generated.</p>"},{"location":"ref/items/#agents.items.RunItemBase.raw_item","title":"raw_item  <code>instance-attribute</code>","text":"<pre><code>raw_item: T\n</code></pre> <p>The raw Responses item from the run. This will always be a either an output item (i.e. <code>openai.types.responses.ResponseOutputItem</code> or an input item (i.e. <code>openai.types.responses.ResponseInputItemParam</code>).</p>"},{"location":"ref/items/#agents.items.RunItemBase.to_input_item","title":"to_input_item","text":"<pre><code>to_input_item() -&gt; TResponseInputItem\n</code></pre> <p>Converts this item into an input item suitable for passing to the model.</p> Source code in <code>src/agents/items.py</code> <pre><code>def to_input_item(self) -&gt; TResponseInputItem:\n    \"\"\"Converts this item into an input item suitable for passing to the model.\"\"\"\n    if isinstance(self.raw_item, dict):\n        # We know that input items are dicts, so we can ignore the type error\n        return self.raw_item  # type: ignore\n    elif isinstance(self.raw_item, BaseModel):\n        # All output items are Pydantic models that can be converted to input items.\n        return self.raw_item.model_dump(exclude_unset=True)  # type: ignore\n    else:\n        raise AgentsException(f\"Unexpected raw item type: {type(self.raw_item)}\")\n</code></pre>"},{"location":"ref/items/#agents.items.MessageOutputItem","title":"MessageOutputItem  <code>dataclass</code>","text":"<p>               Bases: <code>RunItemBase[ResponseOutputMessage]</code></p> <p>Represents a message from the LLM.</p> Source code in <code>src/agents/items.py</code> <pre><code>@dataclass\nclass MessageOutputItem(RunItemBase[ResponseOutputMessage]):\n    \"\"\"Represents a message from the LLM.\"\"\"\n\n    raw_item: ResponseOutputMessage\n    \"\"\"The raw response output message.\"\"\"\n\n    type: Literal[\"message_output_item\"] = \"message_output_item\"\n</code></pre>"},{"location":"ref/items/#agents.items.MessageOutputItem.raw_item","title":"raw_item  <code>instance-attribute</code>","text":"<pre><code>raw_item: ResponseOutputMessage\n</code></pre> <p>The raw response output message.</p>"},{"location":"ref/items/#agents.items.HandoffCallItem","title":"HandoffCallItem  <code>dataclass</code>","text":"<p>               Bases: <code>RunItemBase[ResponseFunctionToolCall]</code></p> <p>Represents a tool call for a handoff from one agent to another.</p> Source code in <code>src/agents/items.py</code> <pre><code>@dataclass\nclass HandoffCallItem(RunItemBase[ResponseFunctionToolCall]):\n    \"\"\"Represents a tool call for a handoff from one agent to another.\"\"\"\n\n    raw_item: ResponseFunctionToolCall\n    \"\"\"The raw response function tool call that represents the handoff.\"\"\"\n\n    type: Literal[\"handoff_call_item\"] = \"handoff_call_item\"\n</code></pre>"},{"location":"ref/items/#agents.items.HandoffCallItem.raw_item","title":"raw_item  <code>instance-attribute</code>","text":"<pre><code>raw_item: ResponseFunctionToolCall\n</code></pre> <p>The raw response function tool call that represents the handoff.</p>"},{"location":"ref/items/#agents.items.HandoffOutputItem","title":"HandoffOutputItem  <code>dataclass</code>","text":"<p>               Bases: <code>RunItemBase[TResponseInputItem]</code></p> <p>Represents the output of a handoff.</p> Source code in <code>src/agents/items.py</code> <pre><code>@dataclass\nclass HandoffOutputItem(RunItemBase[TResponseInputItem]):\n    \"\"\"Represents the output of a handoff.\"\"\"\n\n    raw_item: TResponseInputItem\n    \"\"\"The raw input item that represents the handoff taking place.\"\"\"\n\n    source_agent: Agent[Any]\n    \"\"\"The agent that made the handoff.\"\"\"\n\n    target_agent: Agent[Any]\n    \"\"\"The agent that is being handed off to.\"\"\"\n\n    type: Literal[\"handoff_output_item\"] = \"handoff_output_item\"\n</code></pre>"},{"location":"ref/items/#agents.items.HandoffOutputItem.raw_item","title":"raw_item  <code>instance-attribute</code>","text":"<pre><code>raw_item: TResponseInputItem\n</code></pre> <p>The raw input item that represents the handoff taking place.</p>"},{"location":"ref/items/#agents.items.HandoffOutputItem.source_agent","title":"source_agent  <code>instance-attribute</code>","text":"<pre><code>source_agent: Agent[Any]\n</code></pre> <p>The agent that made the handoff.</p>"},{"location":"ref/items/#agents.items.HandoffOutputItem.target_agent","title":"target_agent  <code>instance-attribute</code>","text":"<pre><code>target_agent: Agent[Any]\n</code></pre> <p>The agent that is being handed off to.</p>"},{"location":"ref/items/#agents.items.ToolCallItem","title":"ToolCallItem  <code>dataclass</code>","text":"<p>               Bases: <code>RunItemBase[ToolCallItemTypes]</code></p> <p>Represents a tool call e.g. a function call or computer action call.</p> Source code in <code>src/agents/items.py</code> <pre><code>@dataclass\nclass ToolCallItem(RunItemBase[ToolCallItemTypes]):\n    \"\"\"Represents a tool call e.g. a function call or computer action call.\"\"\"\n\n    raw_item: ToolCallItemTypes\n    \"\"\"The raw tool call item.\"\"\"\n\n    type: Literal[\"tool_call_item\"] = \"tool_call_item\"\n</code></pre>"},{"location":"ref/items/#agents.items.ToolCallItem.raw_item","title":"raw_item  <code>instance-attribute</code>","text":"<pre><code>raw_item: ToolCallItemTypes\n</code></pre> <p>The raw tool call item.</p>"},{"location":"ref/items/#agents.items.ToolCallOutputItem","title":"ToolCallOutputItem  <code>dataclass</code>","text":"<p>               Bases: <code>RunItemBase[Union[FunctionCallOutput, ComputerCallOutput]]</code></p> <p>Represents the output of a tool call.</p> Source code in <code>src/agents/items.py</code> <pre><code>@dataclass\nclass ToolCallOutputItem(RunItemBase[Union[FunctionCallOutput, ComputerCallOutput]]):\n    \"\"\"Represents the output of a tool call.\"\"\"\n\n    raw_item: FunctionCallOutput | ComputerCallOutput\n    \"\"\"The raw item from the model.\"\"\"\n\n    output: str\n    \"\"\"The output of the tool call.\"\"\"\n\n    type: Literal[\"tool_call_output_item\"] = \"tool_call_output_item\"\n</code></pre>"},{"location":"ref/items/#agents.items.ToolCallOutputItem.raw_item","title":"raw_item  <code>instance-attribute</code>","text":"<pre><code>raw_item: FunctionCallOutput | ComputerCallOutput\n</code></pre> <p>The raw item from the model.</p>"},{"location":"ref/items/#agents.items.ToolCallOutputItem.output","title":"output  <code>instance-attribute</code>","text":"<pre><code>output: str\n</code></pre> <p>The output of the tool call.</p>"},{"location":"ref/items/#agents.items.ReasoningItem","title":"ReasoningItem  <code>dataclass</code>","text":"<p>               Bases: <code>RunItemBase[ResponseReasoningItem]</code></p> <p>Represents a reasoning item.</p> Source code in <code>src/agents/items.py</code> <pre><code>@dataclass\nclass ReasoningItem(RunItemBase[ResponseReasoningItem]):\n    \"\"\"Represents a reasoning item.\"\"\"\n\n    raw_item: ResponseReasoningItem\n    \"\"\"The raw reasoning item.\"\"\"\n\n    type: Literal[\"reasoning_item\"] = \"reasoning_item\"\n</code></pre>"},{"location":"ref/items/#agents.items.ReasoningItem.raw_item","title":"raw_item  <code>instance-attribute</code>","text":"<pre><code>raw_item: ResponseReasoningItem\n</code></pre> <p>The raw reasoning item.</p>"},{"location":"ref/items/#agents.items.ModelResponse","title":"ModelResponse  <code>dataclass</code>","text":"Source code in <code>src/agents/items.py</code> <pre><code>@dataclass\nclass ModelResponse:\n    output: list[TResponseOutputItem]\n    \"\"\"A list of outputs (messages, tool calls, etc) generated by the model\"\"\"\n\n    usage: Usage\n    \"\"\"The usage information for the response.\"\"\"\n\n    referenceable_id: str | None\n    \"\"\"An ID for the response which can be used to refer to the response in subsequent calls to the\n    model. Not supported by all model providers.\n    \"\"\"\n\n    def to_input_items(self) -&gt; list[TResponseInputItem]:\n        \"\"\"Convert the output into a list of input items suitable for passing to the model.\"\"\"\n        # We happen to know that the shape of the Pydantic output items are the same as the\n        # equivalent TypedDict input items, so we can just convert each one.\n        # This is also tested via unit tests.\n        return [it.model_dump(exclude_unset=True) for it in self.output]  # type: ignore\n</code></pre>"},{"location":"ref/items/#agents.items.ModelResponse.output","title":"output  <code>instance-attribute</code>","text":"<pre><code>output: list[TResponseOutputItem]\n</code></pre> <p>A list of outputs (messages, tool calls, etc) generated by the model</p>"},{"location":"ref/items/#agents.items.ModelResponse.usage","title":"usage  <code>instance-attribute</code>","text":"<pre><code>usage: Usage\n</code></pre> <p>The usage information for the response.</p>"},{"location":"ref/items/#agents.items.ModelResponse.referenceable_id","title":"referenceable_id  <code>instance-attribute</code>","text":"<pre><code>referenceable_id: str | None\n</code></pre> <p>An ID for the response which can be used to refer to the response in subsequent calls to the model. Not supported by all model providers.</p>"},{"location":"ref/items/#agents.items.ModelResponse.to_input_items","title":"to_input_items","text":"<pre><code>to_input_items() -&gt; list[TResponseInputItem]\n</code></pre> <p>Convert the output into a list of input items suitable for passing to the model.</p> Source code in <code>src/agents/items.py</code> <pre><code>def to_input_items(self) -&gt; list[TResponseInputItem]:\n    \"\"\"Convert the output into a list of input items suitable for passing to the model.\"\"\"\n    # We happen to know that the shape of the Pydantic output items are the same as the\n    # equivalent TypedDict input items, so we can just convert each one.\n    # This is also tested via unit tests.\n    return [it.model_dump(exclude_unset=True) for it in self.output]  # type: ignore\n</code></pre>"},{"location":"ref/items/#agents.items.ItemHelpers","title":"ItemHelpers","text":"Source code in <code>src/agents/items.py</code> <pre><code>class ItemHelpers:\n    @classmethod\n    def extract_last_content(cls, message: TResponseOutputItem) -&gt; str:\n        \"\"\"Extracts the last text content or refusal from a message.\"\"\"\n        if not isinstance(message, ResponseOutputMessage):\n            return \"\"\n\n        last_content = message.content[-1]\n        if isinstance(last_content, ResponseOutputText):\n            return last_content.text\n        elif isinstance(last_content, ResponseOutputRefusal):\n            return last_content.refusal\n        else:\n            raise ModelBehaviorError(f\"Unexpected content type: {type(last_content)}\")\n\n    @classmethod\n    def extract_last_text(cls, message: TResponseOutputItem) -&gt; str | None:\n        \"\"\"Extracts the last text content from a message, if any. Ignores refusals.\"\"\"\n        if isinstance(message, ResponseOutputMessage):\n            last_content = message.content[-1]\n            if isinstance(last_content, ResponseOutputText):\n                return last_content.text\n\n        return None\n\n    @classmethod\n    def input_to_new_input_list(\n        cls, input: str | list[TResponseInputItem]\n    ) -&gt; list[TResponseInputItem]:\n        \"\"\"Converts a string or list of input items into a list of input items.\"\"\"\n        if isinstance(input, str):\n            return [\n                {\n                    \"content\": input,\n                    \"role\": \"user\",\n                }\n            ]\n        return copy.deepcopy(input)\n\n    @classmethod\n    def text_message_outputs(cls, items: list[RunItem]) -&gt; str:\n        \"\"\"Concatenates all the text content from a list of message output items.\"\"\"\n        text = \"\"\n        for item in items:\n            if isinstance(item, MessageOutputItem):\n                text += cls.text_message_output(item)\n        return text\n\n    @classmethod\n    def text_message_output(cls, message: MessageOutputItem) -&gt; str:\n        \"\"\"Extracts all the text content from a single message output item.\"\"\"\n        text = \"\"\n        for item in message.raw_item.content:\n            if isinstance(item, ResponseOutputText):\n                text += item.text\n        return text\n\n    @classmethod\n    def tool_call_output_item(\n        cls, tool_call: ResponseFunctionToolCall, output: str\n    ) -&gt; FunctionCallOutput:\n        \"\"\"Creates a tool call output item from a tool call and its output.\"\"\"\n        return {\n            \"call_id\": tool_call.call_id,\n            \"output\": output,\n            \"type\": \"function_call_output\",\n        }\n</code></pre>"},{"location":"ref/items/#agents.items.ItemHelpers.extract_last_content","title":"extract_last_content  <code>classmethod</code>","text":"<pre><code>extract_last_content(message: TResponseOutputItem) -&gt; str\n</code></pre> <p>Extracts the last text content or refusal from a message.</p> Source code in <code>src/agents/items.py</code> <pre><code>@classmethod\ndef extract_last_content(cls, message: TResponseOutputItem) -&gt; str:\n    \"\"\"Extracts the last text content or refusal from a message.\"\"\"\n    if not isinstance(message, ResponseOutputMessage):\n        return \"\"\n\n    last_content = message.content[-1]\n    if isinstance(last_content, ResponseOutputText):\n        return last_content.text\n    elif isinstance(last_content, ResponseOutputRefusal):\n        return last_content.refusal\n    else:\n        raise ModelBehaviorError(f\"Unexpected content type: {type(last_content)}\")\n</code></pre>"},{"location":"ref/items/#agents.items.ItemHelpers.extract_last_text","title":"extract_last_text  <code>classmethod</code>","text":"<pre><code>extract_last_text(\n    message: TResponseOutputItem,\n) -&gt; str | None\n</code></pre> <p>Extracts the last text content from a message, if any. Ignores refusals.</p> Source code in <code>src/agents/items.py</code> <pre><code>@classmethod\ndef extract_last_text(cls, message: TResponseOutputItem) -&gt; str | None:\n    \"\"\"Extracts the last text content from a message, if any. Ignores refusals.\"\"\"\n    if isinstance(message, ResponseOutputMessage):\n        last_content = message.content[-1]\n        if isinstance(last_content, ResponseOutputText):\n            return last_content.text\n\n    return None\n</code></pre>"},{"location":"ref/items/#agents.items.ItemHelpers.input_to_new_input_list","title":"input_to_new_input_list  <code>classmethod</code>","text":"<pre><code>input_to_new_input_list(\n    input: str | list[TResponseInputItem],\n) -&gt; list[TResponseInputItem]\n</code></pre> <p>Converts a string or list of input items into a list of input items.</p> Source code in <code>src/agents/items.py</code> <pre><code>@classmethod\ndef input_to_new_input_list(\n    cls, input: str | list[TResponseInputItem]\n) -&gt; list[TResponseInputItem]:\n    \"\"\"Converts a string or list of input items into a list of input items.\"\"\"\n    if isinstance(input, str):\n        return [\n            {\n                \"content\": input,\n                \"role\": \"user\",\n            }\n        ]\n    return copy.deepcopy(input)\n</code></pre>"},{"location":"ref/items/#agents.items.ItemHelpers.text_message_outputs","title":"text_message_outputs  <code>classmethod</code>","text":"<pre><code>text_message_outputs(items: list[RunItem]) -&gt; str\n</code></pre> <p>Concatenates all the text content from a list of message output items.</p> Source code in <code>src/agents/items.py</code> <pre><code>@classmethod\ndef text_message_outputs(cls, items: list[RunItem]) -&gt; str:\n    \"\"\"Concatenates all the text content from a list of message output items.\"\"\"\n    text = \"\"\n    for item in items:\n        if isinstance(item, MessageOutputItem):\n            text += cls.text_message_output(item)\n    return text\n</code></pre>"},{"location":"ref/items/#agents.items.ItemHelpers.text_message_output","title":"text_message_output  <code>classmethod</code>","text":"<pre><code>text_message_output(message: MessageOutputItem) -&gt; str\n</code></pre> <p>Extracts all the text content from a single message output item.</p> Source code in <code>src/agents/items.py</code> <pre><code>@classmethod\ndef text_message_output(cls, message: MessageOutputItem) -&gt; str:\n    \"\"\"Extracts all the text content from a single message output item.\"\"\"\n    text = \"\"\n    for item in message.raw_item.content:\n        if isinstance(item, ResponseOutputText):\n            text += item.text\n    return text\n</code></pre>"},{"location":"ref/items/#agents.items.ItemHelpers.tool_call_output_item","title":"tool_call_output_item  <code>classmethod</code>","text":"<pre><code>tool_call_output_item(\n    tool_call: ResponseFunctionToolCall, output: str\n) -&gt; FunctionCallOutput\n</code></pre> <p>Creates a tool call output item from a tool call and its output.</p> Source code in <code>src/agents/items.py</code> <pre><code>@classmethod\ndef tool_call_output_item(\n    cls, tool_call: ResponseFunctionToolCall, output: str\n) -&gt; FunctionCallOutput:\n    \"\"\"Creates a tool call output item from a tool call and its output.\"\"\"\n    return {\n        \"call_id\": tool_call.call_id,\n        \"output\": output,\n        \"type\": \"function_call_output\",\n    }\n</code></pre>"},{"location":"ref/lifecycle/","title":"<code>Lifecycle</code>","text":""},{"location":"ref/lifecycle/#agents.lifecycle.RunHooks","title":"RunHooks","text":"<p>               Bases: <code>Generic[TContext]</code></p> <p>A class that receives callbacks on various lifecycle events in an agent run. Subclass and override the methods you need.</p>"},{"location":"ref/lifecycle/#agents.lifecycle.RunHooks.on_agent_start","title":"on_agent_start  <code>async</code>","text":"<pre><code>on_agent_start(\n    context: RunContextWrapper[TContext],\n    agent: Agent[TContext],\n) -&gt; None\n</code></pre> <p>Called before the agent is invoked. Called each time the current agent changes.</p>"},{"location":"ref/lifecycle/#agents.lifecycle.RunHooks.on_agent_end","title":"on_agent_end  <code>async</code>","text":"<pre><code>on_agent_end(\n    context: RunContextWrapper[TContext],\n    agent: Agent[TContext],\n    output: Any,\n) -&gt; None\n</code></pre> <p>Called when the agent produces a final output.</p>"},{"location":"ref/lifecycle/#agents.lifecycle.RunHooks.on_handoff","title":"on_handoff  <code>async</code>","text":"<pre><code>on_handoff(\n    context: RunContextWrapper[TContext],\n    from_agent: Agent[TContext],\n    to_agent: Agent[TContext],\n) -&gt; None\n</code></pre> <p>Called when a handoff occurs.</p>"},{"location":"ref/lifecycle/#agents.lifecycle.RunHooks.on_tool_start","title":"on_tool_start  <code>async</code>","text":"<pre><code>on_tool_start(\n    context: RunContextWrapper[TContext],\n    agent: Agent[TContext],\n    tool: Tool,\n) -&gt; None\n</code></pre> <p>Called before a tool is invoked.</p>"},{"location":"ref/lifecycle/#agents.lifecycle.RunHooks.on_tool_end","title":"on_tool_end  <code>async</code>","text":"<pre><code>on_tool_end(\n    context: RunContextWrapper[TContext],\n    agent: Agent[TContext],\n    tool: Tool,\n    result: str,\n) -&gt; None\n</code></pre> <p>Called after a tool is invoked.</p>"},{"location":"ref/lifecycle/#agents.lifecycle.AgentHooks","title":"AgentHooks","text":"<p>               Bases: <code>Generic[TContext]</code></p> <p>A class that receives callbacks on various lifecycle events for a specific agent. You can set this on <code>agent.hooks</code> to receive events for that specific agent.</p> <p>Subclass and override the methods you need.</p>"},{"location":"ref/lifecycle/#agents.lifecycle.AgentHooks.on_start","title":"on_start  <code>async</code>","text":"<pre><code>on_start(\n    context: RunContextWrapper[TContext],\n    agent: Agent[TContext],\n) -&gt; None\n</code></pre> <p>Called before the agent is invoked. Called each time the running agent is changed to this agent.</p>"},{"location":"ref/lifecycle/#agents.lifecycle.AgentHooks.on_end","title":"on_end  <code>async</code>","text":"<pre><code>on_end(\n    context: RunContextWrapper[TContext],\n    agent: Agent[TContext],\n    output: Any,\n) -&gt; None\n</code></pre> <p>Called when the agent produces a final output.</p>"},{"location":"ref/lifecycle/#agents.lifecycle.AgentHooks.on_handoff","title":"on_handoff  <code>async</code>","text":"<pre><code>on_handoff(\n    context: RunContextWrapper[TContext],\n    agent: Agent[TContext],\n    source: Agent[TContext],\n) -&gt; None\n</code></pre> <p>Called when the agent is being handed off to. The <code>source</code> is the agent that is handing off to this agent.</p>"},{"location":"ref/lifecycle/#agents.lifecycle.AgentHooks.on_tool_start","title":"on_tool_start  <code>async</code>","text":"<pre><code>on_tool_start(\n    context: RunContextWrapper[TContext],\n    agent: Agent[TContext],\n    tool: Tool,\n) -&gt; None\n</code></pre> <p>Called before a tool is invoked.</p>"},{"location":"ref/lifecycle/#agents.lifecycle.AgentHooks.on_tool_end","title":"on_tool_end  <code>async</code>","text":"<pre><code>on_tool_end(\n    context: RunContextWrapper[TContext],\n    agent: Agent[TContext],\n    tool: Tool,\n    result: str,\n) -&gt; None\n</code></pre> <p>Called after a tool is invoked.</p>"},{"location":"ref/model_settings/","title":"<code>Model settings</code>","text":""},{"location":"ref/model_settings/#agents.model_settings.ModelSettings","title":"ModelSettings  <code>dataclass</code>","text":"<p>Settings to use when calling an LLM.</p> <p>This class holds optional model configuration parameters (e.g. temperature, top_p, penalties, truncation, etc.).</p> <p>Not all models/providers support all of these parameters, so please check the API documentation for the specific model and provider you are using.</p> Source code in <code>src/agents/model_settings.py</code> <pre><code>@dataclass\nclass ModelSettings:\n    \"\"\"Settings to use when calling an LLM.\n\n    This class holds optional model configuration parameters (e.g. temperature,\n    top_p, penalties, truncation, etc.).\n\n    Not all models/providers support all of these parameters, so please check the API documentation\n    for the specific model and provider you are using.\n    \"\"\"\n\n    temperature: float | None = None\n    \"\"\"The temperature to use when calling the model.\"\"\"\n\n    top_p: float | None = None\n    \"\"\"The top_p to use when calling the model.\"\"\"\n\n    frequency_penalty: float | None = None\n    \"\"\"The frequency penalty to use when calling the model.\"\"\"\n\n    presence_penalty: float | None = None\n    \"\"\"The presence penalty to use when calling the model.\"\"\"\n\n    tool_choice: Literal[\"auto\", \"required\", \"none\"] | str | None = None\n    \"\"\"The tool choice to use when calling the model.\"\"\"\n\n    parallel_tool_calls: bool | None = False\n    \"\"\"Whether to use parallel tool calls when calling the model.\"\"\"\n\n    truncation: Literal[\"auto\", \"disabled\"] | None = None\n    \"\"\"The truncation strategy to use when calling the model.\"\"\"\n\n    max_tokens: int | None = None\n    \"\"\"The maximum number of output tokens to generate.\"\"\"\n\n    def resolve(self, override: ModelSettings | None) -&gt; ModelSettings:\n        \"\"\"Produce a new ModelSettings by overlaying any non-None values from the\n        override on top of this instance.\"\"\"\n        if override is None:\n            return self\n        return ModelSettings(\n            temperature=override.temperature or self.temperature,\n            top_p=override.top_p or self.top_p,\n            frequency_penalty=override.frequency_penalty or self.frequency_penalty,\n            presence_penalty=override.presence_penalty or self.presence_penalty,\n            tool_choice=override.tool_choice or self.tool_choice,\n            parallel_tool_calls=override.parallel_tool_calls or self.parallel_tool_calls,\n            truncation=override.truncation or self.truncation,\n            max_tokens=override.max_tokens or self.max_tokens,\n        )\n</code></pre>"},{"location":"ref/model_settings/#agents.model_settings.ModelSettings.temperature","title":"temperature  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>temperature: float | None = None\n</code></pre> <p>The temperature to use when calling the model.</p>"},{"location":"ref/model_settings/#agents.model_settings.ModelSettings.top_p","title":"top_p  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>top_p: float | None = None\n</code></pre> <p>The top_p to use when calling the model.</p>"},{"location":"ref/model_settings/#agents.model_settings.ModelSettings.frequency_penalty","title":"frequency_penalty  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>frequency_penalty: float | None = None\n</code></pre> <p>The frequency penalty to use when calling the model.</p>"},{"location":"ref/model_settings/#agents.model_settings.ModelSettings.presence_penalty","title":"presence_penalty  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>presence_penalty: float | None = None\n</code></pre> <p>The presence penalty to use when calling the model.</p>"},{"location":"ref/model_settings/#agents.model_settings.ModelSettings.tool_choice","title":"tool_choice  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tool_choice: (\n    Literal[\"auto\", \"required\", \"none\"] | str | None\n) = None\n</code></pre> <p>The tool choice to use when calling the model.</p>"},{"location":"ref/model_settings/#agents.model_settings.ModelSettings.parallel_tool_calls","title":"parallel_tool_calls  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parallel_tool_calls: bool | None = False\n</code></pre> <p>Whether to use parallel tool calls when calling the model.</p>"},{"location":"ref/model_settings/#agents.model_settings.ModelSettings.truncation","title":"truncation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>truncation: Literal['auto', 'disabled'] | None = None\n</code></pre> <p>The truncation strategy to use when calling the model.</p>"},{"location":"ref/model_settings/#agents.model_settings.ModelSettings.max_tokens","title":"max_tokens  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>max_tokens: int | None = None\n</code></pre> <p>The maximum number of output tokens to generate.</p>"},{"location":"ref/model_settings/#agents.model_settings.ModelSettings.resolve","title":"resolve","text":"<pre><code>resolve(override: ModelSettings | None) -&gt; ModelSettings\n</code></pre> <p>Produce a new ModelSettings by overlaying any non-None values from the override on top of this instance.</p> Source code in <code>src/agents/model_settings.py</code> <pre><code>def resolve(self, override: ModelSettings | None) -&gt; ModelSettings:\n    \"\"\"Produce a new ModelSettings by overlaying any non-None values from the\n    override on top of this instance.\"\"\"\n    if override is None:\n        return self\n    return ModelSettings(\n        temperature=override.temperature or self.temperature,\n        top_p=override.top_p or self.top_p,\n        frequency_penalty=override.frequency_penalty or self.frequency_penalty,\n        presence_penalty=override.presence_penalty or self.presence_penalty,\n        tool_choice=override.tool_choice or self.tool_choice,\n        parallel_tool_calls=override.parallel_tool_calls or self.parallel_tool_calls,\n        truncation=override.truncation or self.truncation,\n        max_tokens=override.max_tokens or self.max_tokens,\n    )\n</code></pre>"},{"location":"ref/result/","title":"<code>Results</code>","text":""},{"location":"ref/result/#agents.result.RunResultBase","title":"RunResultBase  <code>dataclass</code>","text":"<p>               Bases: <code>ABC</code></p> Source code in <code>src/agents/result.py</code> <pre><code>@dataclass\nclass RunResultBase(abc.ABC):\n    input: str | list[TResponseInputItem]\n    \"\"\"The original input items i.e. the items before run() was called. This may be a mutated\n    version of the input, if there are handoff input filters that mutate the input.\n    \"\"\"\n\n    new_items: list[RunItem]\n    \"\"\"The new items generated during the agent run. These include things like new messages, tool\n    calls and their outputs, etc.\n    \"\"\"\n\n    raw_responses: list[ModelResponse]\n    \"\"\"The raw LLM responses generated by the model during the agent run.\"\"\"\n\n    final_output: Any\n    \"\"\"The output of the last agent.\"\"\"\n\n    input_guardrail_results: list[InputGuardrailResult]\n    \"\"\"Guardrail results for the input messages.\"\"\"\n\n    output_guardrail_results: list[OutputGuardrailResult]\n    \"\"\"Guardrail results for the final output of the agent.\"\"\"\n\n    @property\n    @abc.abstractmethod\n    def last_agent(self) -&gt; Agent[Any]:\n        \"\"\"The last agent that was run.\"\"\"\n\n    def final_output_as(self, cls: type[T], raise_if_incorrect_type: bool = False) -&gt; T:\n        \"\"\"A convenience method to cast the final output to a specific type. By default, the cast\n        is only for the typechecker. If you set `raise_if_incorrect_type` to True, we'll raise a\n        TypeError if the final output is not of the given type.\n\n        Args:\n            cls: The type to cast the final output to.\n            raise_if_incorrect_type: If True, we'll raise a TypeError if the final output is not of\n                the given type.\n\n        Returns:\n            The final output casted to the given type.\n        \"\"\"\n        if raise_if_incorrect_type and not isinstance(self.final_output, cls):\n            raise TypeError(f\"Final output is not of type {cls.__name__}\")\n\n        return cast(T, self.final_output)\n\n    def to_input_list(self) -&gt; list[TResponseInputItem]:\n        \"\"\"Creates a new input list, merging the original input with all the new items generated.\"\"\"\n        original_items: list[TResponseInputItem] = ItemHelpers.input_to_new_input_list(self.input)\n        new_items = [item.to_input_item() for item in self.new_items]\n\n        return original_items + new_items\n</code></pre>"},{"location":"ref/result/#agents.result.RunResultBase.input","title":"input  <code>instance-attribute</code>","text":"<pre><code>input: str | list[TResponseInputItem]\n</code></pre> <p>The original input items i.e. the items before run() was called. This may be a mutated version of the input, if there are handoff input filters that mutate the input.</p>"},{"location":"ref/result/#agents.result.RunResultBase.new_items","title":"new_items  <code>instance-attribute</code>","text":"<pre><code>new_items: list[RunItem]\n</code></pre> <p>The new items generated during the agent run. These include things like new messages, tool calls and their outputs, etc.</p>"},{"location":"ref/result/#agents.result.RunResultBase.raw_responses","title":"raw_responses  <code>instance-attribute</code>","text":"<pre><code>raw_responses: list[ModelResponse]\n</code></pre> <p>The raw LLM responses generated by the model during the agent run.</p>"},{"location":"ref/result/#agents.result.RunResultBase.final_output","title":"final_output  <code>instance-attribute</code>","text":"<pre><code>final_output: Any\n</code></pre> <p>The output of the last agent.</p>"},{"location":"ref/result/#agents.result.RunResultBase.input_guardrail_results","title":"input_guardrail_results  <code>instance-attribute</code>","text":"<pre><code>input_guardrail_results: list[InputGuardrailResult]\n</code></pre> <p>Guardrail results for the input messages.</p>"},{"location":"ref/result/#agents.result.RunResultBase.output_guardrail_results","title":"output_guardrail_results  <code>instance-attribute</code>","text":"<pre><code>output_guardrail_results: list[OutputGuardrailResult]\n</code></pre> <p>Guardrail results for the final output of the agent.</p>"},{"location":"ref/result/#agents.result.RunResultBase.last_agent","title":"last_agent  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>last_agent: Agent[Any]\n</code></pre> <p>The last agent that was run.</p>"},{"location":"ref/result/#agents.result.RunResultBase.final_output_as","title":"final_output_as","text":"<pre><code>final_output_as(\n    cls: type[T], raise_if_incorrect_type: bool = False\n) -&gt; T\n</code></pre> <p>A convenience method to cast the final output to a specific type. By default, the cast is only for the typechecker. If you set <code>raise_if_incorrect_type</code> to True, we'll raise a TypeError if the final output is not of the given type.</p> <p>Parameters:</p> Name Type Description Default <code>cls</code> <code>type[T]</code> <p>The type to cast the final output to.</p> required <code>raise_if_incorrect_type</code> <code>bool</code> <p>If True, we'll raise a TypeError if the final output is not of the given type.</p> <code>False</code> <p>Returns:</p> Type Description <code>T</code> <p>The final output casted to the given type.</p> Source code in <code>src/agents/result.py</code> <pre><code>def final_output_as(self, cls: type[T], raise_if_incorrect_type: bool = False) -&gt; T:\n    \"\"\"A convenience method to cast the final output to a specific type. By default, the cast\n    is only for the typechecker. If you set `raise_if_incorrect_type` to True, we'll raise a\n    TypeError if the final output is not of the given type.\n\n    Args:\n        cls: The type to cast the final output to.\n        raise_if_incorrect_type: If True, we'll raise a TypeError if the final output is not of\n            the given type.\n\n    Returns:\n        The final output casted to the given type.\n    \"\"\"\n    if raise_if_incorrect_type and not isinstance(self.final_output, cls):\n        raise TypeError(f\"Final output is not of type {cls.__name__}\")\n\n    return cast(T, self.final_output)\n</code></pre>"},{"location":"ref/result/#agents.result.RunResultBase.to_input_list","title":"to_input_list","text":"<pre><code>to_input_list() -&gt; list[TResponseInputItem]\n</code></pre> <p>Creates a new input list, merging the original input with all the new items generated.</p> Source code in <code>src/agents/result.py</code> <pre><code>def to_input_list(self) -&gt; list[TResponseInputItem]:\n    \"\"\"Creates a new input list, merging the original input with all the new items generated.\"\"\"\n    original_items: list[TResponseInputItem] = ItemHelpers.input_to_new_input_list(self.input)\n    new_items = [item.to_input_item() for item in self.new_items]\n\n    return original_items + new_items\n</code></pre>"},{"location":"ref/result/#agents.result.RunResult","title":"RunResult  <code>dataclass</code>","text":"<p>               Bases: <code>RunResultBase</code></p> Source code in <code>src/agents/result.py</code> <pre><code>@dataclass\nclass RunResult(RunResultBase):\n    _last_agent: Agent[Any]\n\n    @property\n    def last_agent(self) -&gt; Agent[Any]:\n        \"\"\"The last agent that was run.\"\"\"\n        return self._last_agent\n\n    def __str__(self) -&gt; str:\n        return pretty_print_result(self)\n</code></pre>"},{"location":"ref/result/#agents.result.RunResult.last_agent","title":"last_agent  <code>property</code>","text":"<pre><code>last_agent: Agent[Any]\n</code></pre> <p>The last agent that was run.</p>"},{"location":"ref/result/#agents.result.RunResultStreaming","title":"RunResultStreaming  <code>dataclass</code>","text":"<p>               Bases: <code>RunResultBase</code></p> <p>The result of an agent run in streaming mode. You can use the <code>stream_events</code> method to receive semantic events as they are generated.</p> <p>The streaming method will raise: - A MaxTurnsExceeded exception if the agent exceeds the max_turns limit. - A GuardrailTripwireTriggered exception if a guardrail is tripped.</p> Source code in <code>src/agents/result.py</code> <pre><code>@dataclass\nclass RunResultStreaming(RunResultBase):\n    \"\"\"The result of an agent run in streaming mode. You can use the `stream_events` method to\n    receive semantic events as they are generated.\n\n    The streaming method will raise:\n    - A MaxTurnsExceeded exception if the agent exceeds the max_turns limit.\n    - A GuardrailTripwireTriggered exception if a guardrail is tripped.\n    \"\"\"\n\n    current_agent: Agent[Any]\n    \"\"\"The current agent that is running.\"\"\"\n\n    current_turn: int\n    \"\"\"The current turn number.\"\"\"\n\n    max_turns: int\n    \"\"\"The maximum number of turns the agent can run for.\"\"\"\n\n    final_output: Any\n    \"\"\"The final output of the agent. This is None until the agent has finished running.\"\"\"\n\n    _current_agent_output_schema: AgentOutputSchema | None = field(repr=False)\n\n    _trace: Trace | None = field(repr=False)\n\n    is_complete: bool = False\n    \"\"\"Whether the agent has finished running.\"\"\"\n\n    # Queues that the background run_loop writes to\n    _event_queue: asyncio.Queue[StreamEvent | QueueCompleteSentinel] = field(\n        default_factory=asyncio.Queue, repr=False\n    )\n    _input_guardrail_queue: asyncio.Queue[InputGuardrailResult] = field(\n        default_factory=asyncio.Queue, repr=False\n    )\n\n    # Store the asyncio tasks that we're waiting on\n    _run_impl_task: asyncio.Task[Any] | None = field(default=None, repr=False)\n    _input_guardrails_task: asyncio.Task[Any] | None = field(default=None, repr=False)\n    _output_guardrails_task: asyncio.Task[Any] | None = field(default=None, repr=False)\n    _stored_exception: Exception | None = field(default=None, repr=False)\n\n    @property\n    def last_agent(self) -&gt; Agent[Any]:\n        \"\"\"The last agent that was run. Updates as the agent run progresses, so the true last agent\n        is only available after the agent run is complete.\n        \"\"\"\n        return self.current_agent\n\n    async def stream_events(self) -&gt; AsyncIterator[StreamEvent]:\n        \"\"\"Stream deltas for new items as they are generated. We're using the types from the\n        OpenAI Responses API, so these are semantic events: each event has a `type` field that\n        describes the type of the event, along with the data for that event.\n\n        This will raise:\n        - A MaxTurnsExceeded exception if the agent exceeds the max_turns limit.\n        - A GuardrailTripwireTriggered exception if a guardrail is tripped.\n        \"\"\"\n        while True:\n            self._check_errors()\n            if self._stored_exception:\n                logger.debug(\"Breaking due to stored exception\")\n                self.is_complete = True\n                break\n\n            if self.is_complete and self._event_queue.empty():\n                break\n\n            try:\n                item = await self._event_queue.get()\n            except asyncio.CancelledError:\n                break\n\n            if isinstance(item, QueueCompleteSentinel):\n                self._event_queue.task_done()\n                # Check for errors, in case the queue was completed due to an exception\n                self._check_errors()\n                break\n\n            yield item\n            self._event_queue.task_done()\n\n        if self._trace:\n            self._trace.finish(reset_current=True)\n\n        self._cleanup_tasks()\n\n        if self._stored_exception:\n            raise self._stored_exception\n\n    def _check_errors(self):\n        if self.current_turn &gt; self.max_turns:\n            self._stored_exception = MaxTurnsExceeded(f\"Max turns ({self.max_turns}) exceeded\")\n\n        # Fetch all the completed guardrail results from the queue and raise if needed\n        while not self._input_guardrail_queue.empty():\n            guardrail_result = self._input_guardrail_queue.get_nowait()\n            if guardrail_result.output.tripwire_triggered:\n                self._stored_exception = InputGuardrailTripwireTriggered(guardrail_result)\n\n        # Check the tasks for any exceptions\n        if self._run_impl_task and self._run_impl_task.done():\n            exc = self._run_impl_task.exception()\n            if exc and isinstance(exc, Exception):\n                self._stored_exception = exc\n\n        if self._input_guardrails_task and self._input_guardrails_task.done():\n            exc = self._input_guardrails_task.exception()\n            if exc and isinstance(exc, Exception):\n                self._stored_exception = exc\n\n        if self._output_guardrails_task and self._output_guardrails_task.done():\n            exc = self._output_guardrails_task.exception()\n            if exc and isinstance(exc, Exception):\n                self._stored_exception = exc\n\n    def _cleanup_tasks(self):\n        if self._run_impl_task and not self._run_impl_task.done():\n            self._run_impl_task.cancel()\n\n        if self._input_guardrails_task and not self._input_guardrails_task.done():\n            self._input_guardrails_task.cancel()\n\n        if self._output_guardrails_task and not self._output_guardrails_task.done():\n            self._output_guardrails_task.cancel()\n\n    def __str__(self) -&gt; str:\n        return pretty_print_run_result_streaming(self)\n</code></pre>"},{"location":"ref/result/#agents.result.RunResultStreaming.current_agent","title":"current_agent  <code>instance-attribute</code>","text":"<pre><code>current_agent: Agent[Any]\n</code></pre> <p>The current agent that is running.</p>"},{"location":"ref/result/#agents.result.RunResultStreaming.current_turn","title":"current_turn  <code>instance-attribute</code>","text":"<pre><code>current_turn: int\n</code></pre> <p>The current turn number.</p>"},{"location":"ref/result/#agents.result.RunResultStreaming.max_turns","title":"max_turns  <code>instance-attribute</code>","text":"<pre><code>max_turns: int\n</code></pre> <p>The maximum number of turns the agent can run for.</p>"},{"location":"ref/result/#agents.result.RunResultStreaming.final_output","title":"final_output  <code>instance-attribute</code>","text":"<pre><code>final_output: Any\n</code></pre> <p>The final output of the agent. This is None until the agent has finished running.</p>"},{"location":"ref/result/#agents.result.RunResultStreaming.is_complete","title":"is_complete  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_complete: bool = False\n</code></pre> <p>Whether the agent has finished running.</p>"},{"location":"ref/result/#agents.result.RunResultStreaming.last_agent","title":"last_agent  <code>property</code>","text":"<pre><code>last_agent: Agent[Any]\n</code></pre> <p>The last agent that was run. Updates as the agent run progresses, so the true last agent is only available after the agent run is complete.</p>"},{"location":"ref/result/#agents.result.RunResultStreaming.stream_events","title":"stream_events  <code>async</code>","text":"<pre><code>stream_events() -&gt; AsyncIterator[StreamEvent]\n</code></pre> <p>Stream deltas for new items as they are generated. We're using the types from the OpenAI Responses API, so these are semantic events: each event has a <code>type</code> field that describes the type of the event, along with the data for that event.</p> <p>This will raise: - A MaxTurnsExceeded exception if the agent exceeds the max_turns limit. - A GuardrailTripwireTriggered exception if a guardrail is tripped.</p> Source code in <code>src/agents/result.py</code> <pre><code>async def stream_events(self) -&gt; AsyncIterator[StreamEvent]:\n    \"\"\"Stream deltas for new items as they are generated. We're using the types from the\n    OpenAI Responses API, so these are semantic events: each event has a `type` field that\n    describes the type of the event, along with the data for that event.\n\n    This will raise:\n    - A MaxTurnsExceeded exception if the agent exceeds the max_turns limit.\n    - A GuardrailTripwireTriggered exception if a guardrail is tripped.\n    \"\"\"\n    while True:\n        self._check_errors()\n        if self._stored_exception:\n            logger.debug(\"Breaking due to stored exception\")\n            self.is_complete = True\n            break\n\n        if self.is_complete and self._event_queue.empty():\n            break\n\n        try:\n            item = await self._event_queue.get()\n        except asyncio.CancelledError:\n            break\n\n        if isinstance(item, QueueCompleteSentinel):\n            self._event_queue.task_done()\n            # Check for errors, in case the queue was completed due to an exception\n            self._check_errors()\n            break\n\n        yield item\n        self._event_queue.task_done()\n\n    if self._trace:\n        self._trace.finish(reset_current=True)\n\n    self._cleanup_tasks()\n\n    if self._stored_exception:\n        raise self._stored_exception\n</code></pre>"},{"location":"ref/run/","title":"<code>Runner</code>","text":""},{"location":"ref/run/#agents.run.Runner","title":"Runner","text":"Source code in <code>src/agents/run.py</code> <pre><code>class Runner:\n    @classmethod\n    async def run(\n        cls,\n        starting_agent: Agent[TContext],\n        input: str | list[TResponseInputItem],\n        *,\n        context: TContext | None = None,\n        max_turns: int = DEFAULT_MAX_TURNS,\n        hooks: RunHooks[TContext] | None = None,\n        run_config: RunConfig | None = None,\n    ) -&gt; RunResult:\n        \"\"\"Run a workflow starting at the given agent. The agent will run in a loop until a final\n        output is generated. The loop runs like so:\n        1. The agent is invoked with the given input.\n        2. If there is a final output (i.e. the agent produces something of type\n            `agent.output_type`, the loop terminates.\n        3. If there's a handoff, we run the loop again, with the new agent.\n        4. Else, we run tool calls (if any), and re-run the loop.\n\n        In two cases, the agent may raise an exception:\n        1. If the max_turns is exceeded, a MaxTurnsExceeded exception is raised.\n        2. If a guardrail tripwire is triggered, a GuardrailTripwireTriggered exception is raised.\n\n        Note that only the first agent's input guardrails are run.\n\n        Args:\n            starting_agent: The starting agent to run.\n            input: The initial input to the agent. You can pass a single string for a user message,\n                or a list of input items.\n            context: The context to run the agent with.\n            max_turns: The maximum number of turns to run the agent for. A turn is defined as one\n                AI invocation (including any tool calls that might occur).\n            hooks: An object that receives callbacks on various lifecycle events.\n            run_config: Global settings for the entire agent run.\n\n        Returns:\n            A run result containing all the inputs, guardrail results and the output of the last\n            agent. Agents may perform handoffs, so we don't know the specific type of the output.\n        \"\"\"\n        if hooks is None:\n            hooks = RunHooks[Any]()\n        if run_config is None:\n            run_config = RunConfig()\n\n        with TraceCtxManager(\n            workflow_name=run_config.workflow_name,\n            trace_id=run_config.trace_id,\n            group_id=run_config.group_id,\n            metadata=run_config.trace_metadata,\n            disabled=run_config.tracing_disabled,\n        ):\n            current_turn = 0\n            original_input: str | list[TResponseInputItem] = copy.deepcopy(input)\n            generated_items: list[RunItem] = []\n            model_responses: list[ModelResponse] = []\n\n            context_wrapper: RunContextWrapper[TContext] = RunContextWrapper(\n                context=context,  # type: ignore\n            )\n\n            input_guardrail_results: list[InputGuardrailResult] = []\n\n            current_span: Span[AgentSpanData] | None = None\n            current_agent = starting_agent\n            should_run_agent_start_hooks = True\n\n            try:\n                while True:\n                    # Start an agent span if we don't have one. This span is ended if the current\n                    # agent changes, or if the agent loop ends.\n                    if current_span is None:\n                        handoff_names = [h.agent_name for h in cls._get_handoffs(current_agent)]\n                        tool_names = [t.name for t in current_agent.tools]\n                        if output_schema := cls._get_output_schema(current_agent):\n                            output_type_name = output_schema.output_type_name()\n                        else:\n                            output_type_name = \"str\"\n\n                        current_span = agent_span(\n                            name=current_agent.name,\n                            handoffs=handoff_names,\n                            tools=tool_names,\n                            output_type=output_type_name,\n                        )\n                        current_span.start(mark_as_current=True)\n\n                    current_turn += 1\n                    if current_turn &gt; max_turns:\n                        _error_tracing.attach_error_to_span(\n                            current_span,\n                            SpanError(\n                                message=\"Max turns exceeded\",\n                                data={\"max_turns\": max_turns},\n                            ),\n                        )\n                        raise MaxTurnsExceeded(f\"Max turns ({max_turns}) exceeded\")\n\n                    logger.debug(\n                        f\"Running agent {current_agent.name} (turn {current_turn})\",\n                    )\n\n                    if current_turn == 1:\n                        input_guardrail_results, turn_result = await asyncio.gather(\n                            cls._run_input_guardrails(\n                                starting_agent,\n                                starting_agent.input_guardrails\n                                + (run_config.input_guardrails or []),\n                                copy.deepcopy(input),\n                                context_wrapper,\n                            ),\n                            cls._run_single_turn(\n                                agent=current_agent,\n                                original_input=original_input,\n                                generated_items=generated_items,\n                                hooks=hooks,\n                                context_wrapper=context_wrapper,\n                                run_config=run_config,\n                                should_run_agent_start_hooks=should_run_agent_start_hooks,\n                            ),\n                        )\n                    else:\n                        turn_result = await cls._run_single_turn(\n                            agent=current_agent,\n                            original_input=original_input,\n                            generated_items=generated_items,\n                            hooks=hooks,\n                            context_wrapper=context_wrapper,\n                            run_config=run_config,\n                            should_run_agent_start_hooks=should_run_agent_start_hooks,\n                        )\n                    should_run_agent_start_hooks = False\n\n                    model_responses.append(turn_result.model_response)\n                    original_input = turn_result.original_input\n                    generated_items = turn_result.generated_items\n\n                    if isinstance(turn_result.next_step, NextStepFinalOutput):\n                        output_guardrail_results = await cls._run_output_guardrails(\n                            current_agent.output_guardrails + (run_config.output_guardrails or []),\n                            current_agent,\n                            turn_result.next_step.output,\n                            context_wrapper,\n                        )\n                        return RunResult(\n                            input=original_input,\n                            new_items=generated_items,\n                            raw_responses=model_responses,\n                            final_output=turn_result.next_step.output,\n                            _last_agent=current_agent,\n                            input_guardrail_results=input_guardrail_results,\n                            output_guardrail_results=output_guardrail_results,\n                        )\n                    elif isinstance(turn_result.next_step, NextStepHandoff):\n                        current_agent = cast(Agent[TContext], turn_result.next_step.new_agent)\n                        current_span.finish(reset_current=True)\n                        current_span = None\n                        should_run_agent_start_hooks = True\n                    elif isinstance(turn_result.next_step, NextStepRunAgain):\n                        pass\n                    else:\n                        raise AgentsException(\n                            f\"Unknown next step type: {type(turn_result.next_step)}\"\n                        )\n            finally:\n                if current_span:\n                    current_span.finish(reset_current=True)\n\n    @classmethod\n    def run_sync(\n        cls,\n        starting_agent: Agent[TContext],\n        input: str | list[TResponseInputItem],\n        *,\n        context: TContext | None = None,\n        max_turns: int = DEFAULT_MAX_TURNS,\n        hooks: RunHooks[TContext] | None = None,\n        run_config: RunConfig | None = None,\n    ) -&gt; RunResult:\n        \"\"\"Run a workflow synchronously, starting at the given agent. Note that this just wraps the\n        `run` method, so it will not work if there's already an event loop (e.g. inside an async\n        function, or in a Jupyter notebook or async context like FastAPI). For those cases, use\n        the `run` method instead.\n\n        The agent will run in a loop until a final output is generated. The loop runs like so:\n        1. The agent is invoked with the given input.\n        2. If there is a final output (i.e. the agent produces something of type\n            `agent.output_type`, the loop terminates.\n        3. If there's a handoff, we run the loop again, with the new agent.\n        4. Else, we run tool calls (if any), and re-run the loop.\n\n        In two cases, the agent may raise an exception:\n        1. If the max_turns is exceeded, a MaxTurnsExceeded exception is raised.\n        2. If a guardrail tripwire is triggered, a GuardrailTripwireTriggered exception is raised.\n\n        Note that only the first agent's input guardrails are run.\n\n        Args:\n            starting_agent: The starting agent to run.\n            input: The initial input to the agent. You can pass a single string for a user message,\n                or a list of input items.\n            context: The context to run the agent with.\n            max_turns: The maximum number of turns to run the agent for. A turn is defined as one\n                AI invocation (including any tool calls that might occur).\n            hooks: An object that receives callbacks on various lifecycle events.\n            run_config: Global settings for the entire agent run.\n\n        Returns:\n            A run result containing all the inputs, guardrail results and the output of the last\n            agent. Agents may perform handoffs, so we don't know the specific type of the output.\n        \"\"\"\n        return asyncio.get_event_loop().run_until_complete(\n            cls.run(\n                starting_agent,\n                input,\n                context=context,\n                max_turns=max_turns,\n                hooks=hooks,\n                run_config=run_config,\n            )\n        )\n\n    @classmethod\n    def run_streamed(\n        cls,\n        starting_agent: Agent[TContext],\n        input: str | list[TResponseInputItem],\n        context: TContext | None = None,\n        max_turns: int = DEFAULT_MAX_TURNS,\n        hooks: RunHooks[TContext] | None = None,\n        run_config: RunConfig | None = None,\n    ) -&gt; RunResultStreaming:\n        \"\"\"Run a workflow starting at the given agent in streaming mode. The returned result object\n        contains a method you can use to stream semantic events as they are generated.\n\n        The agent will run in a loop until a final output is generated. The loop runs like so:\n        1. The agent is invoked with the given input.\n        2. If there is a final output (i.e. the agent produces something of type\n            `agent.output_type`, the loop terminates.\n        3. If there's a handoff, we run the loop again, with the new agent.\n        4. Else, we run tool calls (if any), and re-run the loop.\n\n        In two cases, the agent may raise an exception:\n        1. If the max_turns is exceeded, a MaxTurnsExceeded exception is raised.\n        2. If a guardrail tripwire is triggered, a GuardrailTripwireTriggered exception is raised.\n\n        Note that only the first agent's input guardrails are run.\n\n        Args:\n            starting_agent: The starting agent to run.\n            input: The initial input to the agent. You can pass a single string for a user message,\n                or a list of input items.\n            context: The context to run the agent with.\n            max_turns: The maximum number of turns to run the agent for. A turn is defined as one\n                AI invocation (including any tool calls that might occur).\n            hooks: An object that receives callbacks on various lifecycle events.\n            run_config: Global settings for the entire agent run.\n\n        Returns:\n            A result object that contains data about the run, as well as a method to stream events.\n        \"\"\"\n        if hooks is None:\n            hooks = RunHooks[Any]()\n        if run_config is None:\n            run_config = RunConfig()\n\n        # If there's already a trace, we don't create a new one. In addition, we can't end the\n        # trace here, because the actual work is done in `stream_events` and this method ends\n        # before that.\n        new_trace = (\n            None\n            if get_current_trace()\n            else trace(\n                workflow_name=run_config.workflow_name,\n                trace_id=run_config.trace_id,\n                group_id=run_config.group_id,\n                metadata=run_config.trace_metadata,\n                disabled=run_config.tracing_disabled,\n            )\n        )\n        # Need to start the trace here, because the current trace contextvar is captured at\n        # asyncio.create_task time\n        if new_trace:\n            new_trace.start(mark_as_current=True)\n\n        output_schema = cls._get_output_schema(starting_agent)\n        context_wrapper: RunContextWrapper[TContext] = RunContextWrapper(\n            context=context  # type: ignore\n        )\n\n        streamed_result = RunResultStreaming(\n            input=copy.deepcopy(input),\n            new_items=[],\n            current_agent=starting_agent,\n            raw_responses=[],\n            final_output=None,\n            is_complete=False,\n            current_turn=0,\n            max_turns=max_turns,\n            input_guardrail_results=[],\n            output_guardrail_results=[],\n            _current_agent_output_schema=output_schema,\n            _trace=new_trace,\n        )\n\n        # Kick off the actual agent loop in the background and return the streamed result object.\n        streamed_result._run_impl_task = asyncio.create_task(\n            cls._run_streamed_impl(\n                starting_input=input,\n                streamed_result=streamed_result,\n                starting_agent=starting_agent,\n                max_turns=max_turns,\n                hooks=hooks,\n                context_wrapper=context_wrapper,\n                run_config=run_config,\n            )\n        )\n        return streamed_result\n\n    @classmethod\n    async def _run_input_guardrails_with_queue(\n        cls,\n        agent: Agent[Any],\n        guardrails: list[InputGuardrail[TContext]],\n        input: str | list[TResponseInputItem],\n        context: RunContextWrapper[TContext],\n        streamed_result: RunResultStreaming,\n        parent_span: Span[Any],\n    ):\n        queue = streamed_result._input_guardrail_queue\n\n        # We'll run the guardrails and push them onto the queue as they complete\n        guardrail_tasks = [\n            asyncio.create_task(\n                RunImpl.run_single_input_guardrail(agent, guardrail, input, context)\n            )\n            for guardrail in guardrails\n        ]\n        guardrail_results = []\n        try:\n            for done in asyncio.as_completed(guardrail_tasks):\n                result = await done\n                if result.output.tripwire_triggered:\n                    _error_tracing.attach_error_to_span(\n                        parent_span,\n                        SpanError(\n                            message=\"Guardrail tripwire triggered\",\n                            data={\n                                \"guardrail\": result.guardrail.get_name(),\n                                \"type\": \"input_guardrail\",\n                            },\n                        ),\n                    )\n                queue.put_nowait(result)\n                guardrail_results.append(result)\n        except Exception:\n            for t in guardrail_tasks:\n                t.cancel()\n            raise\n\n        streamed_result.input_guardrail_results = guardrail_results\n\n    @classmethod\n    async def _run_streamed_impl(\n        cls,\n        starting_input: str | list[TResponseInputItem],\n        streamed_result: RunResultStreaming,\n        starting_agent: Agent[TContext],\n        max_turns: int,\n        hooks: RunHooks[TContext],\n        context_wrapper: RunContextWrapper[TContext],\n        run_config: RunConfig,\n    ):\n        current_span: Span[AgentSpanData] | None = None\n        current_agent = starting_agent\n        current_turn = 0\n        should_run_agent_start_hooks = True\n\n        streamed_result._event_queue.put_nowait(AgentUpdatedStreamEvent(new_agent=current_agent))\n\n        try:\n            while True:\n                if streamed_result.is_complete:\n                    break\n\n                # Start an agent span if we don't have one. This span is ended if the current\n                # agent changes, or if the agent loop ends.\n                if current_span is None:\n                    handoff_names = [h.agent_name for h in cls._get_handoffs(current_agent)]\n                    tool_names = [t.name for t in current_agent.tools]\n                    if output_schema := cls._get_output_schema(current_agent):\n                        output_type_name = output_schema.output_type_name()\n                    else:\n                        output_type_name = \"str\"\n\n                    current_span = agent_span(\n                        name=current_agent.name,\n                        handoffs=handoff_names,\n                        tools=tool_names,\n                        output_type=output_type_name,\n                    )\n                    current_span.start(mark_as_current=True)\n\n                current_turn += 1\n                streamed_result.current_turn = current_turn\n\n                if current_turn &gt; max_turns:\n                    _error_tracing.attach_error_to_span(\n                        current_span,\n                        SpanError(\n                            message=\"Max turns exceeded\",\n                            data={\"max_turns\": max_turns},\n                        ),\n                    )\n                    streamed_result._event_queue.put_nowait(QueueCompleteSentinel())\n                    break\n\n                if current_turn == 1:\n                    # Run the input guardrails in the background and put the results on the queue\n                    streamed_result._input_guardrails_task = asyncio.create_task(\n                        cls._run_input_guardrails_with_queue(\n                            starting_agent,\n                            starting_agent.input_guardrails + (run_config.input_guardrails or []),\n                            copy.deepcopy(ItemHelpers.input_to_new_input_list(starting_input)),\n                            context_wrapper,\n                            streamed_result,\n                            current_span,\n                        )\n                    )\n                try:\n                    turn_result = await cls._run_single_turn_streamed(\n                        streamed_result,\n                        current_agent,\n                        hooks,\n                        context_wrapper,\n                        run_config,\n                        should_run_agent_start_hooks,\n                    )\n                    should_run_agent_start_hooks = False\n\n                    streamed_result.raw_responses = streamed_result.raw_responses + [\n                        turn_result.model_response\n                    ]\n                    streamed_result.input = turn_result.original_input\n                    streamed_result.new_items = turn_result.generated_items\n\n                    if isinstance(turn_result.next_step, NextStepHandoff):\n                        current_agent = turn_result.next_step.new_agent\n                        current_span.finish(reset_current=True)\n                        current_span = None\n                        should_run_agent_start_hooks = True\n                        streamed_result._event_queue.put_nowait(\n                            AgentUpdatedStreamEvent(new_agent=current_agent)\n                        )\n                    elif isinstance(turn_result.next_step, NextStepFinalOutput):\n                        streamed_result._output_guardrails_task = asyncio.create_task(\n                            cls._run_output_guardrails(\n                                current_agent.output_guardrails\n                                + (run_config.output_guardrails or []),\n                                current_agent,\n                                turn_result.next_step.output,\n                                context_wrapper,\n                            )\n                        )\n\n                        try:\n                            output_guardrail_results = await streamed_result._output_guardrails_task\n                        except Exception:\n                            # Exceptions will be checked in the stream_events loop\n                            output_guardrail_results = []\n\n                        streamed_result.output_guardrail_results = output_guardrail_results\n                        streamed_result.final_output = turn_result.next_step.output\n                        streamed_result.is_complete = True\n                        streamed_result._event_queue.put_nowait(QueueCompleteSentinel())\n                    elif isinstance(turn_result.next_step, NextStepRunAgain):\n                        pass\n                except Exception as e:\n                    if current_span:\n                        _error_tracing.attach_error_to_span(\n                            current_span,\n                            SpanError(\n                                message=\"Error in agent run\",\n                                data={\"error\": str(e)},\n                            ),\n                        )\n                    streamed_result.is_complete = True\n                    streamed_result._event_queue.put_nowait(QueueCompleteSentinel())\n                    raise\n\n            streamed_result.is_complete = True\n        finally:\n            if current_span:\n                current_span.finish(reset_current=True)\n\n    @classmethod\n    async def _run_single_turn_streamed(\n        cls,\n        streamed_result: RunResultStreaming,\n        agent: Agent[TContext],\n        hooks: RunHooks[TContext],\n        context_wrapper: RunContextWrapper[TContext],\n        run_config: RunConfig,\n        should_run_agent_start_hooks: bool,\n    ) -&gt; SingleStepResult:\n        if should_run_agent_start_hooks:\n            await asyncio.gather(\n                hooks.on_agent_start(context_wrapper, agent),\n                (\n                    agent.hooks.on_start(context_wrapper, agent)\n                    if agent.hooks\n                    else _coro.noop_coroutine()\n                ),\n            )\n\n        output_schema = cls._get_output_schema(agent)\n\n        streamed_result.current_agent = agent\n        streamed_result._current_agent_output_schema = output_schema\n\n        system_prompt = await agent.get_system_prompt(context_wrapper)\n\n        handoffs = cls._get_handoffs(agent)\n\n        model = cls._get_model(agent, run_config)\n        model_settings = agent.model_settings.resolve(run_config.model_settings)\n        final_response: ModelResponse | None = None\n\n        input = ItemHelpers.input_to_new_input_list(streamed_result.input)\n        input.extend([item.to_input_item() for item in streamed_result.new_items])\n\n        # 1. Stream the output events\n        async for event in model.stream_response(\n            system_prompt,\n            input,\n            model_settings,\n            agent.tools,\n            output_schema,\n            handoffs,\n            get_model_tracing_impl(\n                run_config.tracing_disabled, run_config.trace_include_sensitive_data\n            ),\n        ):\n            if isinstance(event, ResponseCompletedEvent):\n                usage = (\n                    Usage(\n                        requests=1,\n                        input_tokens=event.response.usage.input_tokens,\n                        output_tokens=event.response.usage.output_tokens,\n                        total_tokens=event.response.usage.total_tokens,\n                    )\n                    if event.response.usage\n                    else Usage()\n                )\n                final_response = ModelResponse(\n                    output=event.response.output,\n                    usage=usage,\n                    referenceable_id=event.response.id,\n                )\n\n            streamed_result._event_queue.put_nowait(RawResponsesStreamEvent(data=event))\n\n        # 2. At this point, the streaming is complete for this turn of the agent loop.\n        if not final_response:\n            raise ModelBehaviorError(\"Model did not produce a final response!\")\n\n        # 3. Now, we can process the turn as we do in the non-streaming case\n        single_step_result = await cls._get_single_step_result_from_response(\n            agent=agent,\n            original_input=streamed_result.input,\n            pre_step_items=streamed_result.new_items,\n            new_response=final_response,\n            output_schema=output_schema,\n            handoffs=handoffs,\n            hooks=hooks,\n            context_wrapper=context_wrapper,\n            run_config=run_config,\n        )\n\n        RunImpl.stream_step_result_to_queue(single_step_result, streamed_result._event_queue)\n        return single_step_result\n\n    @classmethod\n    async def _run_single_turn(\n        cls,\n        *,\n        agent: Agent[TContext],\n        original_input: str | list[TResponseInputItem],\n        generated_items: list[RunItem],\n        hooks: RunHooks[TContext],\n        context_wrapper: RunContextWrapper[TContext],\n        run_config: RunConfig,\n        should_run_agent_start_hooks: bool,\n    ) -&gt; SingleStepResult:\n        # Ensure we run the hooks before anything else\n        if should_run_agent_start_hooks:\n            await asyncio.gather(\n                hooks.on_agent_start(context_wrapper, agent),\n                (\n                    agent.hooks.on_start(context_wrapper, agent)\n                    if agent.hooks\n                    else _coro.noop_coroutine()\n                ),\n            )\n\n        system_prompt = await agent.get_system_prompt(context_wrapper)\n\n        output_schema = cls._get_output_schema(agent)\n        handoffs = cls._get_handoffs(agent)\n        input = ItemHelpers.input_to_new_input_list(original_input)\n        input.extend([generated_item.to_input_item() for generated_item in generated_items])\n\n        new_response = await cls._get_new_response(\n            agent,\n            system_prompt,\n            input,\n            output_schema,\n            handoffs,\n            context_wrapper,\n            run_config,\n        )\n\n        return await cls._get_single_step_result_from_response(\n            agent=agent,\n            original_input=original_input,\n            pre_step_items=generated_items,\n            new_response=new_response,\n            output_schema=output_schema,\n            handoffs=handoffs,\n            hooks=hooks,\n            context_wrapper=context_wrapper,\n            run_config=run_config,\n        )\n\n    @classmethod\n    async def _get_single_step_result_from_response(\n        cls,\n        *,\n        agent: Agent[TContext],\n        original_input: str | list[TResponseInputItem],\n        pre_step_items: list[RunItem],\n        new_response: ModelResponse,\n        output_schema: AgentOutputSchema | None,\n        handoffs: list[Handoff],\n        hooks: RunHooks[TContext],\n        context_wrapper: RunContextWrapper[TContext],\n        run_config: RunConfig,\n    ) -&gt; SingleStepResult:\n        processed_response = RunImpl.process_model_response(\n            agent=agent,\n            response=new_response,\n            output_schema=output_schema,\n            handoffs=handoffs,\n        )\n        return await RunImpl.execute_tools_and_side_effects(\n            agent=agent,\n            original_input=original_input,\n            pre_step_items=pre_step_items,\n            new_response=new_response,\n            processed_response=processed_response,\n            output_schema=output_schema,\n            hooks=hooks,\n            context_wrapper=context_wrapper,\n            run_config=run_config,\n        )\n\n    @classmethod\n    async def _run_input_guardrails(\n        cls,\n        agent: Agent[Any],\n        guardrails: list[InputGuardrail[TContext]],\n        input: str | list[TResponseInputItem],\n        context: RunContextWrapper[TContext],\n    ) -&gt; list[InputGuardrailResult]:\n        if not guardrails:\n            return []\n\n        guardrail_tasks = [\n            asyncio.create_task(\n                RunImpl.run_single_input_guardrail(agent, guardrail, input, context)\n            )\n            for guardrail in guardrails\n        ]\n\n        guardrail_results = []\n\n        for done in asyncio.as_completed(guardrail_tasks):\n            result = await done\n            if result.output.tripwire_triggered:\n                # Cancel all guardrail tasks if a tripwire is triggered.\n                for t in guardrail_tasks:\n                    t.cancel()\n                _error_tracing.attach_error_to_current_span(\n                    SpanError(\n                        message=\"Guardrail tripwire triggered\",\n                        data={\"guardrail\": result.guardrail.get_name()},\n                    )\n                )\n                raise InputGuardrailTripwireTriggered(result)\n            else:\n                guardrail_results.append(result)\n\n        return guardrail_results\n\n    @classmethod\n    async def _run_output_guardrails(\n        cls,\n        guardrails: list[OutputGuardrail[TContext]],\n        agent: Agent[TContext],\n        agent_output: Any,\n        context: RunContextWrapper[TContext],\n    ) -&gt; list[OutputGuardrailResult]:\n        if not guardrails:\n            return []\n\n        guardrail_tasks = [\n            asyncio.create_task(\n                RunImpl.run_single_output_guardrail(guardrail, agent, agent_output, context)\n            )\n            for guardrail in guardrails\n        ]\n\n        guardrail_results = []\n\n        for done in asyncio.as_completed(guardrail_tasks):\n            result = await done\n            if result.output.tripwire_triggered:\n                # Cancel all guardrail tasks if a tripwire is triggered.\n                for t in guardrail_tasks:\n                    t.cancel()\n                _error_tracing.attach_error_to_current_span(\n                    SpanError(\n                        message=\"Guardrail tripwire triggered\",\n                        data={\"guardrail\": result.guardrail.get_name()},\n                    )\n                )\n                raise OutputGuardrailTripwireTriggered(result)\n            else:\n                guardrail_results.append(result)\n\n        return guardrail_results\n\n    @classmethod\n    async def _get_new_response(\n        cls,\n        agent: Agent[TContext],\n        system_prompt: str | None,\n        input: list[TResponseInputItem],\n        output_schema: AgentOutputSchema | None,\n        handoffs: list[Handoff],\n        context_wrapper: RunContextWrapper[TContext],\n        run_config: RunConfig,\n    ) -&gt; ModelResponse:\n        model = cls._get_model(agent, run_config)\n        model_settings = agent.model_settings.resolve(run_config.model_settings)\n        new_response = await model.get_response(\n            system_instructions=system_prompt,\n            input=input,\n            model_settings=model_settings,\n            tools=agent.tools,\n            output_schema=output_schema,\n            handoffs=handoffs,\n            tracing=get_model_tracing_impl(\n                run_config.tracing_disabled, run_config.trace_include_sensitive_data\n            ),\n        )\n\n        context_wrapper.usage.add(new_response.usage)\n\n        return new_response\n\n    @classmethod\n    def _get_output_schema(cls, agent: Agent[Any]) -&gt; AgentOutputSchema | None:\n        if agent.output_type is None or agent.output_type is str:\n            return None\n\n        return AgentOutputSchema(agent.output_type)\n\n    @classmethod\n    def _get_handoffs(cls, agent: Agent[Any]) -&gt; list[Handoff]:\n        handoffs = []\n        for handoff_item in agent.handoffs:\n            if isinstance(handoff_item, Handoff):\n                handoffs.append(handoff_item)\n            elif isinstance(handoff_item, Agent):\n                handoffs.append(handoff(handoff_item))\n        return handoffs\n\n    @classmethod\n    def _get_model(cls, agent: Agent[Any], run_config: RunConfig) -&gt; Model:\n        if isinstance(run_config.model, Model):\n            return run_config.model\n        elif isinstance(run_config.model, str):\n            return run_config.model_provider.get_model(run_config.model)\n        elif isinstance(agent.model, Model):\n            return agent.model\n\n        return run_config.model_provider.get_model(agent.model)\n</code></pre>"},{"location":"ref/run/#agents.run.Runner.run","title":"run  <code>async</code> <code>classmethod</code>","text":"<pre><code>run(\n    starting_agent: Agent[TContext],\n    input: str | list[TResponseInputItem],\n    *,\n    context: TContext | None = None,\n    max_turns: int = DEFAULT_MAX_TURNS,\n    hooks: RunHooks[TContext] | None = None,\n    run_config: RunConfig | None = None,\n) -&gt; RunResult\n</code></pre> <p>Run a workflow starting at the given agent. The agent will run in a loop until a final output is generated. The loop runs like so: 1. The agent is invoked with the given input. 2. If there is a final output (i.e. the agent produces something of type     <code>agent.output_type</code>, the loop terminates. 3. If there's a handoff, we run the loop again, with the new agent. 4. Else, we run tool calls (if any), and re-run the loop.</p> <p>In two cases, the agent may raise an exception: 1. If the max_turns is exceeded, a MaxTurnsExceeded exception is raised. 2. If a guardrail tripwire is triggered, a GuardrailTripwireTriggered exception is raised.</p> <p>Note that only the first agent's input guardrails are run.</p> <p>Parameters:</p> Name Type Description Default <code>starting_agent</code> <code>Agent[TContext]</code> <p>The starting agent to run.</p> required <code>input</code> <code>str | list[TResponseInputItem]</code> <p>The initial input to the agent. You can pass a single string for a user message, or a list of input items.</p> required <code>context</code> <code>TContext | None</code> <p>The context to run the agent with.</p> <code>None</code> <code>max_turns</code> <code>int</code> <p>The maximum number of turns to run the agent for. A turn is defined as one AI invocation (including any tool calls that might occur).</p> <code>DEFAULT_MAX_TURNS</code> <code>hooks</code> <code>RunHooks[TContext] | None</code> <p>An object that receives callbacks on various lifecycle events.</p> <code>None</code> <code>run_config</code> <code>RunConfig | None</code> <p>Global settings for the entire agent run.</p> <code>None</code> <p>Returns:</p> Type Description <code>RunResult</code> <p>A run result containing all the inputs, guardrail results and the output of the last</p> <code>RunResult</code> <p>agent. Agents may perform handoffs, so we don't know the specific type of the output.</p> Source code in <code>src/agents/run.py</code> <pre><code>@classmethod\nasync def run(\n    cls,\n    starting_agent: Agent[TContext],\n    input: str | list[TResponseInputItem],\n    *,\n    context: TContext | None = None,\n    max_turns: int = DEFAULT_MAX_TURNS,\n    hooks: RunHooks[TContext] | None = None,\n    run_config: RunConfig | None = None,\n) -&gt; RunResult:\n    \"\"\"Run a workflow starting at the given agent. The agent will run in a loop until a final\n    output is generated. The loop runs like so:\n    1. The agent is invoked with the given input.\n    2. If there is a final output (i.e. the agent produces something of type\n        `agent.output_type`, the loop terminates.\n    3. If there's a handoff, we run the loop again, with the new agent.\n    4. Else, we run tool calls (if any), and re-run the loop.\n\n    In two cases, the agent may raise an exception:\n    1. If the max_turns is exceeded, a MaxTurnsExceeded exception is raised.\n    2. If a guardrail tripwire is triggered, a GuardrailTripwireTriggered exception is raised.\n\n    Note that only the first agent's input guardrails are run.\n\n    Args:\n        starting_agent: The starting agent to run.\n        input: The initial input to the agent. You can pass a single string for a user message,\n            or a list of input items.\n        context: The context to run the agent with.\n        max_turns: The maximum number of turns to run the agent for. A turn is defined as one\n            AI invocation (including any tool calls that might occur).\n        hooks: An object that receives callbacks on various lifecycle events.\n        run_config: Global settings for the entire agent run.\n\n    Returns:\n        A run result containing all the inputs, guardrail results and the output of the last\n        agent. Agents may perform handoffs, so we don't know the specific type of the output.\n    \"\"\"\n    if hooks is None:\n        hooks = RunHooks[Any]()\n    if run_config is None:\n        run_config = RunConfig()\n\n    with TraceCtxManager(\n        workflow_name=run_config.workflow_name,\n        trace_id=run_config.trace_id,\n        group_id=run_config.group_id,\n        metadata=run_config.trace_metadata,\n        disabled=run_config.tracing_disabled,\n    ):\n        current_turn = 0\n        original_input: str | list[TResponseInputItem] = copy.deepcopy(input)\n        generated_items: list[RunItem] = []\n        model_responses: list[ModelResponse] = []\n\n        context_wrapper: RunContextWrapper[TContext] = RunContextWrapper(\n            context=context,  # type: ignore\n        )\n\n        input_guardrail_results: list[InputGuardrailResult] = []\n\n        current_span: Span[AgentSpanData] | None = None\n        current_agent = starting_agent\n        should_run_agent_start_hooks = True\n\n        try:\n            while True:\n                # Start an agent span if we don't have one. This span is ended if the current\n                # agent changes, or if the agent loop ends.\n                if current_span is None:\n                    handoff_names = [h.agent_name for h in cls._get_handoffs(current_agent)]\n                    tool_names = [t.name for t in current_agent.tools]\n                    if output_schema := cls._get_output_schema(current_agent):\n                        output_type_name = output_schema.output_type_name()\n                    else:\n                        output_type_name = \"str\"\n\n                    current_span = agent_span(\n                        name=current_agent.name,\n                        handoffs=handoff_names,\n                        tools=tool_names,\n                        output_type=output_type_name,\n                    )\n                    current_span.start(mark_as_current=True)\n\n                current_turn += 1\n                if current_turn &gt; max_turns:\n                    _error_tracing.attach_error_to_span(\n                        current_span,\n                        SpanError(\n                            message=\"Max turns exceeded\",\n                            data={\"max_turns\": max_turns},\n                        ),\n                    )\n                    raise MaxTurnsExceeded(f\"Max turns ({max_turns}) exceeded\")\n\n                logger.debug(\n                    f\"Running agent {current_agent.name} (turn {current_turn})\",\n                )\n\n                if current_turn == 1:\n                    input_guardrail_results, turn_result = await asyncio.gather(\n                        cls._run_input_guardrails(\n                            starting_agent,\n                            starting_agent.input_guardrails\n                            + (run_config.input_guardrails or []),\n                            copy.deepcopy(input),\n                            context_wrapper,\n                        ),\n                        cls._run_single_turn(\n                            agent=current_agent,\n                            original_input=original_input,\n                            generated_items=generated_items,\n                            hooks=hooks,\n                            context_wrapper=context_wrapper,\n                            run_config=run_config,\n                            should_run_agent_start_hooks=should_run_agent_start_hooks,\n                        ),\n                    )\n                else:\n                    turn_result = await cls._run_single_turn(\n                        agent=current_agent,\n                        original_input=original_input,\n                        generated_items=generated_items,\n                        hooks=hooks,\n                        context_wrapper=context_wrapper,\n                        run_config=run_config,\n                        should_run_agent_start_hooks=should_run_agent_start_hooks,\n                    )\n                should_run_agent_start_hooks = False\n\n                model_responses.append(turn_result.model_response)\n                original_input = turn_result.original_input\n                generated_items = turn_result.generated_items\n\n                if isinstance(turn_result.next_step, NextStepFinalOutput):\n                    output_guardrail_results = await cls._run_output_guardrails(\n                        current_agent.output_guardrails + (run_config.output_guardrails or []),\n                        current_agent,\n                        turn_result.next_step.output,\n                        context_wrapper,\n                    )\n                    return RunResult(\n                        input=original_input,\n                        new_items=generated_items,\n                        raw_responses=model_responses,\n                        final_output=turn_result.next_step.output,\n                        _last_agent=current_agent,\n                        input_guardrail_results=input_guardrail_results,\n                        output_guardrail_results=output_guardrail_results,\n                    )\n                elif isinstance(turn_result.next_step, NextStepHandoff):\n                    current_agent = cast(Agent[TContext], turn_result.next_step.new_agent)\n                    current_span.finish(reset_current=True)\n                    current_span = None\n                    should_run_agent_start_hooks = True\n                elif isinstance(turn_result.next_step, NextStepRunAgain):\n                    pass\n                else:\n                    raise AgentsException(\n                        f\"Unknown next step type: {type(turn_result.next_step)}\"\n                    )\n        finally:\n            if current_span:\n                current_span.finish(reset_current=True)\n</code></pre>"},{"location":"ref/run/#agents.run.Runner.run_sync","title":"run_sync  <code>classmethod</code>","text":"<pre><code>run_sync(\n    starting_agent: Agent[TContext],\n    input: str | list[TResponseInputItem],\n    *,\n    context: TContext | None = None,\n    max_turns: int = DEFAULT_MAX_TURNS,\n    hooks: RunHooks[TContext] | None = None,\n    run_config: RunConfig | None = None,\n) -&gt; RunResult\n</code></pre> <p>Run a workflow synchronously, starting at the given agent. Note that this just wraps the <code>run</code> method, so it will not work if there's already an event loop (e.g. inside an async function, or in a Jupyter notebook or async context like FastAPI). For those cases, use the <code>run</code> method instead.</p> <p>The agent will run in a loop until a final output is generated. The loop runs like so: 1. The agent is invoked with the given input. 2. If there is a final output (i.e. the agent produces something of type     <code>agent.output_type</code>, the loop terminates. 3. If there's a handoff, we run the loop again, with the new agent. 4. Else, we run tool calls (if any), and re-run the loop.</p> <p>In two cases, the agent may raise an exception: 1. If the max_turns is exceeded, a MaxTurnsExceeded exception is raised. 2. If a guardrail tripwire is triggered, a GuardrailTripwireTriggered exception is raised.</p> <p>Note that only the first agent's input guardrails are run.</p> <p>Parameters:</p> Name Type Description Default <code>starting_agent</code> <code>Agent[TContext]</code> <p>The starting agent to run.</p> required <code>input</code> <code>str | list[TResponseInputItem]</code> <p>The initial input to the agent. You can pass a single string for a user message, or a list of input items.</p> required <code>context</code> <code>TContext | None</code> <p>The context to run the agent with.</p> <code>None</code> <code>max_turns</code> <code>int</code> <p>The maximum number of turns to run the agent for. A turn is defined as one AI invocation (including any tool calls that might occur).</p> <code>DEFAULT_MAX_TURNS</code> <code>hooks</code> <code>RunHooks[TContext] | None</code> <p>An object that receives callbacks on various lifecycle events.</p> <code>None</code> <code>run_config</code> <code>RunConfig | None</code> <p>Global settings for the entire agent run.</p> <code>None</code> <p>Returns:</p> Type Description <code>RunResult</code> <p>A run result containing all the inputs, guardrail results and the output of the last</p> <code>RunResult</code> <p>agent. Agents may perform handoffs, so we don't know the specific type of the output.</p> Source code in <code>src/agents/run.py</code> <pre><code>@classmethod\ndef run_sync(\n    cls,\n    starting_agent: Agent[TContext],\n    input: str | list[TResponseInputItem],\n    *,\n    context: TContext | None = None,\n    max_turns: int = DEFAULT_MAX_TURNS,\n    hooks: RunHooks[TContext] | None = None,\n    run_config: RunConfig | None = None,\n) -&gt; RunResult:\n    \"\"\"Run a workflow synchronously, starting at the given agent. Note that this just wraps the\n    `run` method, so it will not work if there's already an event loop (e.g. inside an async\n    function, or in a Jupyter notebook or async context like FastAPI). For those cases, use\n    the `run` method instead.\n\n    The agent will run in a loop until a final output is generated. The loop runs like so:\n    1. The agent is invoked with the given input.\n    2. If there is a final output (i.e. the agent produces something of type\n        `agent.output_type`, the loop terminates.\n    3. If there's a handoff, we run the loop again, with the new agent.\n    4. Else, we run tool calls (if any), and re-run the loop.\n\n    In two cases, the agent may raise an exception:\n    1. If the max_turns is exceeded, a MaxTurnsExceeded exception is raised.\n    2. If a guardrail tripwire is triggered, a GuardrailTripwireTriggered exception is raised.\n\n    Note that only the first agent's input guardrails are run.\n\n    Args:\n        starting_agent: The starting agent to run.\n        input: The initial input to the agent. You can pass a single string for a user message,\n            or a list of input items.\n        context: The context to run the agent with.\n        max_turns: The maximum number of turns to run the agent for. A turn is defined as one\n            AI invocation (including any tool calls that might occur).\n        hooks: An object that receives callbacks on various lifecycle events.\n        run_config: Global settings for the entire agent run.\n\n    Returns:\n        A run result containing all the inputs, guardrail results and the output of the last\n        agent. Agents may perform handoffs, so we don't know the specific type of the output.\n    \"\"\"\n    return asyncio.get_event_loop().run_until_complete(\n        cls.run(\n            starting_agent,\n            input,\n            context=context,\n            max_turns=max_turns,\n            hooks=hooks,\n            run_config=run_config,\n        )\n    )\n</code></pre>"},{"location":"ref/run/#agents.run.Runner.run_streamed","title":"run_streamed  <code>classmethod</code>","text":"<pre><code>run_streamed(\n    starting_agent: Agent[TContext],\n    input: str | list[TResponseInputItem],\n    context: TContext | None = None,\n    max_turns: int = DEFAULT_MAX_TURNS,\n    hooks: RunHooks[TContext] | None = None,\n    run_config: RunConfig | None = None,\n) -&gt; RunResultStreaming\n</code></pre> <p>Run a workflow starting at the given agent in streaming mode. The returned result object contains a method you can use to stream semantic events as they are generated.</p> <p>The agent will run in a loop until a final output is generated. The loop runs like so: 1. The agent is invoked with the given input. 2. If there is a final output (i.e. the agent produces something of type     <code>agent.output_type</code>, the loop terminates. 3. If there's a handoff, we run the loop again, with the new agent. 4. Else, we run tool calls (if any), and re-run the loop.</p> <p>In two cases, the agent may raise an exception: 1. If the max_turns is exceeded, a MaxTurnsExceeded exception is raised. 2. If a guardrail tripwire is triggered, a GuardrailTripwireTriggered exception is raised.</p> <p>Note that only the first agent's input guardrails are run.</p> <p>Parameters:</p> Name Type Description Default <code>starting_agent</code> <code>Agent[TContext]</code> <p>The starting agent to run.</p> required <code>input</code> <code>str | list[TResponseInputItem]</code> <p>The initial input to the agent. You can pass a single string for a user message, or a list of input items.</p> required <code>context</code> <code>TContext | None</code> <p>The context to run the agent with.</p> <code>None</code> <code>max_turns</code> <code>int</code> <p>The maximum number of turns to run the agent for. A turn is defined as one AI invocation (including any tool calls that might occur).</p> <code>DEFAULT_MAX_TURNS</code> <code>hooks</code> <code>RunHooks[TContext] | None</code> <p>An object that receives callbacks on various lifecycle events.</p> <code>None</code> <code>run_config</code> <code>RunConfig | None</code> <p>Global settings for the entire agent run.</p> <code>None</code> <p>Returns:</p> Type Description <code>RunResultStreaming</code> <p>A result object that contains data about the run, as well as a method to stream events.</p> Source code in <code>src/agents/run.py</code> <pre><code>@classmethod\ndef run_streamed(\n    cls,\n    starting_agent: Agent[TContext],\n    input: str | list[TResponseInputItem],\n    context: TContext | None = None,\n    max_turns: int = DEFAULT_MAX_TURNS,\n    hooks: RunHooks[TContext] | None = None,\n    run_config: RunConfig | None = None,\n) -&gt; RunResultStreaming:\n    \"\"\"Run a workflow starting at the given agent in streaming mode. The returned result object\n    contains a method you can use to stream semantic events as they are generated.\n\n    The agent will run in a loop until a final output is generated. The loop runs like so:\n    1. The agent is invoked with the given input.\n    2. If there is a final output (i.e. the agent produces something of type\n        `agent.output_type`, the loop terminates.\n    3. If there's a handoff, we run the loop again, with the new agent.\n    4. Else, we run tool calls (if any), and re-run the loop.\n\n    In two cases, the agent may raise an exception:\n    1. If the max_turns is exceeded, a MaxTurnsExceeded exception is raised.\n    2. If a guardrail tripwire is triggered, a GuardrailTripwireTriggered exception is raised.\n\n    Note that only the first agent's input guardrails are run.\n\n    Args:\n        starting_agent: The starting agent to run.\n        input: The initial input to the agent. You can pass a single string for a user message,\n            or a list of input items.\n        context: The context to run the agent with.\n        max_turns: The maximum number of turns to run the agent for. A turn is defined as one\n            AI invocation (including any tool calls that might occur).\n        hooks: An object that receives callbacks on various lifecycle events.\n        run_config: Global settings for the entire agent run.\n\n    Returns:\n        A result object that contains data about the run, as well as a method to stream events.\n    \"\"\"\n    if hooks is None:\n        hooks = RunHooks[Any]()\n    if run_config is None:\n        run_config = RunConfig()\n\n    # If there's already a trace, we don't create a new one. In addition, we can't end the\n    # trace here, because the actual work is done in `stream_events` and this method ends\n    # before that.\n    new_trace = (\n        None\n        if get_current_trace()\n        else trace(\n            workflow_name=run_config.workflow_name,\n            trace_id=run_config.trace_id,\n            group_id=run_config.group_id,\n            metadata=run_config.trace_metadata,\n            disabled=run_config.tracing_disabled,\n        )\n    )\n    # Need to start the trace here, because the current trace contextvar is captured at\n    # asyncio.create_task time\n    if new_trace:\n        new_trace.start(mark_as_current=True)\n\n    output_schema = cls._get_output_schema(starting_agent)\n    context_wrapper: RunContextWrapper[TContext] = RunContextWrapper(\n        context=context  # type: ignore\n    )\n\n    streamed_result = RunResultStreaming(\n        input=copy.deepcopy(input),\n        new_items=[],\n        current_agent=starting_agent,\n        raw_responses=[],\n        final_output=None,\n        is_complete=False,\n        current_turn=0,\n        max_turns=max_turns,\n        input_guardrail_results=[],\n        output_guardrail_results=[],\n        _current_agent_output_schema=output_schema,\n        _trace=new_trace,\n    )\n\n    # Kick off the actual agent loop in the background and return the streamed result object.\n    streamed_result._run_impl_task = asyncio.create_task(\n        cls._run_streamed_impl(\n            starting_input=input,\n            streamed_result=streamed_result,\n            starting_agent=starting_agent,\n            max_turns=max_turns,\n            hooks=hooks,\n            context_wrapper=context_wrapper,\n            run_config=run_config,\n        )\n    )\n    return streamed_result\n</code></pre>"},{"location":"ref/run/#agents.run.RunConfig","title":"RunConfig  <code>dataclass</code>","text":"<p>Configures settings for the entire agent run.</p> Source code in <code>src/agents/run.py</code> <pre><code>@dataclass\nclass RunConfig:\n    \"\"\"Configures settings for the entire agent run.\"\"\"\n\n    model: str | Model | None = None\n    \"\"\"The model to use for the entire agent run. If set, will override the model set on every\n    agent. The model_provider passed in below must be able to resolve this model name.\n    \"\"\"\n\n    model_provider: ModelProvider = field(default_factory=OpenAIProvider)\n    \"\"\"The model provider to use when looking up string model names. Defaults to OpenAI.\"\"\"\n\n    model_settings: ModelSettings | None = None\n    \"\"\"Configure global model settings. Any non-null values will override the agent-specific model\n    settings.\n    \"\"\"\n\n    handoff_input_filter: HandoffInputFilter | None = None\n    \"\"\"A global input filter to apply to all handoffs. If `Handoff.input_filter` is set, then that\n    will take precedence. The input filter allows you to edit the inputs that are sent to the new\n    agent. See the documentation in `Handoff.input_filter` for more details.\n    \"\"\"\n\n    input_guardrails: list[InputGuardrail[Any]] | None = None\n    \"\"\"A list of input guardrails to run on the initial run input.\"\"\"\n\n    output_guardrails: list[OutputGuardrail[Any]] | None = None\n    \"\"\"A list of output guardrails to run on the final output of the run.\"\"\"\n\n    tracing_disabled: bool = False\n    \"\"\"Whether tracing is disabled for the agent run. If disabled, we will not trace the agent run.\n    \"\"\"\n\n    trace_include_sensitive_data: bool = True\n    \"\"\"Whether we include potentially sensitive data (for example: inputs/outputs of tool calls or\n    LLM generations) in traces. If False, we'll still create spans for these events, but the\n    sensitive data will not be included.\n    \"\"\"\n\n    workflow_name: str = \"Agent workflow\"\n    \"\"\"The name of the run, used for tracing. Should be a logical name for the run, like\n    \"Code generation workflow\" or \"Customer support agent\".\n    \"\"\"\n\n    trace_id: str | None = None\n    \"\"\"A custom trace ID to use for tracing. If not provided, we will generate a new trace ID.\"\"\"\n\n    group_id: str | None = None\n    \"\"\"\n    A grouping identifier to use for tracing, to link multiple traces from the same conversation\n    or process. For example, you might use a chat thread ID.\n    \"\"\"\n\n    trace_metadata: dict[str, Any] | None = None\n    \"\"\"\n    An optional dictionary of additional metadata to include with the trace.\n    \"\"\"\n</code></pre>"},{"location":"ref/run/#agents.run.RunConfig.model","title":"model  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model: str | Model | None = None\n</code></pre> <p>The model to use for the entire agent run. If set, will override the model set on every agent. The model_provider passed in below must be able to resolve this model name.</p>"},{"location":"ref/run/#agents.run.RunConfig.model_provider","title":"model_provider  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_provider: ModelProvider = field(\n    default_factory=OpenAIProvider\n)\n</code></pre> <p>The model provider to use when looking up string model names. Defaults to OpenAI.</p>"},{"location":"ref/run/#agents.run.RunConfig.model_settings","title":"model_settings  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_settings: ModelSettings | None = None\n</code></pre> <p>Configure global model settings. Any non-null values will override the agent-specific model settings.</p>"},{"location":"ref/run/#agents.run.RunConfig.handoff_input_filter","title":"handoff_input_filter  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>handoff_input_filter: HandoffInputFilter | None = None\n</code></pre> <p>A global input filter to apply to all handoffs. If <code>Handoff.input_filter</code> is set, then that will take precedence. The input filter allows you to edit the inputs that are sent to the new agent. See the documentation in <code>Handoff.input_filter</code> for more details.</p>"},{"location":"ref/run/#agents.run.RunConfig.input_guardrails","title":"input_guardrails  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>input_guardrails: list[InputGuardrail[Any]] | None = None\n</code></pre> <p>A list of input guardrails to run on the initial run input.</p>"},{"location":"ref/run/#agents.run.RunConfig.output_guardrails","title":"output_guardrails  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output_guardrails: list[OutputGuardrail[Any]] | None = None\n</code></pre> <p>A list of output guardrails to run on the final output of the run.</p>"},{"location":"ref/run/#agents.run.RunConfig.tracing_disabled","title":"tracing_disabled  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tracing_disabled: bool = False\n</code></pre> <p>Whether tracing is disabled for the agent run. If disabled, we will not trace the agent run.</p>"},{"location":"ref/run/#agents.run.RunConfig.trace_include_sensitive_data","title":"trace_include_sensitive_data  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>trace_include_sensitive_data: bool = True\n</code></pre> <p>Whether we include potentially sensitive data (for example: inputs/outputs of tool calls or LLM generations) in traces. If False, we'll still create spans for these events, but the sensitive data will not be included.</p>"},{"location":"ref/run/#agents.run.RunConfig.workflow_name","title":"workflow_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>workflow_name: str = 'Agent workflow'\n</code></pre> <p>The name of the run, used for tracing. Should be a logical name for the run, like \"Code generation workflow\" or \"Customer support agent\".</p>"},{"location":"ref/run/#agents.run.RunConfig.trace_id","title":"trace_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>trace_id: str | None = None\n</code></pre> <p>A custom trace ID to use for tracing. If not provided, we will generate a new trace ID.</p>"},{"location":"ref/run/#agents.run.RunConfig.group_id","title":"group_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>group_id: str | None = None\n</code></pre> <p>A grouping identifier to use for tracing, to link multiple traces from the same conversation or process. For example, you might use a chat thread ID.</p>"},{"location":"ref/run/#agents.run.RunConfig.trace_metadata","title":"trace_metadata  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>trace_metadata: dict[str, Any] | None = None\n</code></pre> <p>An optional dictionary of additional metadata to include with the trace.</p>"},{"location":"ref/run_context/","title":"<code>Run context</code>","text":""},{"location":"ref/run_context/#agents.run_context.RunContextWrapper","title":"RunContextWrapper  <code>dataclass</code>","text":"<p>               Bases: <code>Generic[TContext]</code></p> <p>This wraps the context object that you passed to <code>Runner.run()</code>. It also contains information about the usage of the agent run so far.</p> <p>NOTE: Contexts are not passed to the LLM. They're a way to pass dependencies and data to code you implement, like tool functions, callbacks, hooks, etc.</p> Source code in <code>src/agents/run_context.py</code> <pre><code>@dataclass\nclass RunContextWrapper(Generic[TContext]):\n    \"\"\"This wraps the context object that you passed to `Runner.run()`. It also contains\n    information about the usage of the agent run so far.\n\n    NOTE: Contexts are not passed to the LLM. They're a way to pass dependencies and data to code\n    you implement, like tool functions, callbacks, hooks, etc.\n    \"\"\"\n\n    context: TContext\n    \"\"\"The context object (or None), passed by you to `Runner.run()`\"\"\"\n\n    usage: Usage = field(default_factory=Usage)\n    \"\"\"The usage of the agent run so far. For streamed responses, the usage will be stale until the\n    last chunk of the stream is processed.\n    \"\"\"\n</code></pre>"},{"location":"ref/run_context/#agents.run_context.RunContextWrapper.context","title":"context  <code>instance-attribute</code>","text":"<pre><code>context: TContext\n</code></pre> <p>The context object (or None), passed by you to <code>Runner.run()</code></p>"},{"location":"ref/run_context/#agents.run_context.RunContextWrapper.usage","title":"usage  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>usage: Usage = field(default_factory=Usage)\n</code></pre> <p>The usage of the agent run so far. For streamed responses, the usage will be stale until the last chunk of the stream is processed.</p>"},{"location":"ref/stream_events/","title":"<code>Streaming events</code>","text":""},{"location":"ref/stream_events/#agents.stream_events.StreamEvent","title":"StreamEvent  <code>module-attribute</code>","text":"<pre><code>StreamEvent: TypeAlias = Union[\n    RawResponsesStreamEvent,\n    RunItemStreamEvent,\n    AgentUpdatedStreamEvent,\n]\n</code></pre> <p>A streaming event from an agent.</p>"},{"location":"ref/stream_events/#agents.stream_events.RawResponsesStreamEvent","title":"RawResponsesStreamEvent  <code>dataclass</code>","text":"<p>Streaming event from the LLM. These are 'raw' events, i.e. they are directly passed through from the LLM.</p> Source code in <code>src/agents/stream_events.py</code> <pre><code>@dataclass\nclass RawResponsesStreamEvent:\n    \"\"\"Streaming event from the LLM. These are 'raw' events, i.e. they are directly passed through\n    from the LLM.\n    \"\"\"\n\n    data: TResponseStreamEvent\n    \"\"\"The raw responses streaming event from the LLM.\"\"\"\n\n    type: Literal[\"raw_response_event\"] = \"raw_response_event\"\n    \"\"\"The type of the event.\"\"\"\n</code></pre>"},{"location":"ref/stream_events/#agents.stream_events.RawResponsesStreamEvent.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: TResponseStreamEvent\n</code></pre> <p>The raw responses streaming event from the LLM.</p>"},{"location":"ref/stream_events/#agents.stream_events.RawResponsesStreamEvent.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: Literal['raw_response_event'] = 'raw_response_event'\n</code></pre> <p>The type of the event.</p>"},{"location":"ref/stream_events/#agents.stream_events.RunItemStreamEvent","title":"RunItemStreamEvent  <code>dataclass</code>","text":"<p>Streaming events that wrap a <code>RunItem</code>. As the agent processes the LLM response, it will generate these events for new messages, tool calls, tool outputs, handoffs, etc.</p> Source code in <code>src/agents/stream_events.py</code> <pre><code>@dataclass\nclass RunItemStreamEvent:\n    \"\"\"Streaming events that wrap a `RunItem`. As the agent processes the LLM response, it will\n    generate these events for new messages, tool calls, tool outputs, handoffs, etc.\n    \"\"\"\n\n    name: Literal[\n        \"message_output_created\",\n        \"handoff_requested\",\n        \"handoff_occured\",\n        \"tool_called\",\n        \"tool_output\",\n        \"reasoning_item_created\",\n    ]\n    \"\"\"The name of the event.\"\"\"\n\n    item: RunItem\n    \"\"\"The item that was created.\"\"\"\n\n    type: Literal[\"run_item_stream_event\"] = \"run_item_stream_event\"\n</code></pre>"},{"location":"ref/stream_events/#agents.stream_events.RunItemStreamEvent.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: Literal[\n    \"message_output_created\",\n    \"handoff_requested\",\n    \"handoff_occured\",\n    \"tool_called\",\n    \"tool_output\",\n    \"reasoning_item_created\",\n]\n</code></pre> <p>The name of the event.</p>"},{"location":"ref/stream_events/#agents.stream_events.RunItemStreamEvent.item","title":"item  <code>instance-attribute</code>","text":"<pre><code>item: RunItem\n</code></pre> <p>The item that was created.</p>"},{"location":"ref/stream_events/#agents.stream_events.AgentUpdatedStreamEvent","title":"AgentUpdatedStreamEvent  <code>dataclass</code>","text":"<p>Event that notifies that there is a new agent running.</p> Source code in <code>src/agents/stream_events.py</code> <pre><code>@dataclass\nclass AgentUpdatedStreamEvent:\n    \"\"\"Event that notifies that there is a new agent running.\"\"\"\n\n    new_agent: Agent[Any]\n    \"\"\"The new agent.\"\"\"\n\n    type: Literal[\"agent_updated_stream_event\"] = \"agent_updated_stream_event\"\n</code></pre>"},{"location":"ref/stream_events/#agents.stream_events.AgentUpdatedStreamEvent.new_agent","title":"new_agent  <code>instance-attribute</code>","text":"<pre><code>new_agent: Agent[Any]\n</code></pre> <p>The new agent.</p>"},{"location":"ref/tool/","title":"<code>Tools</code>","text":""},{"location":"ref/tool/#agents.tool.Tool","title":"Tool  <code>module-attribute</code>","text":"<pre><code>Tool = Union[\n    FunctionTool,\n    FileSearchTool,\n    WebSearchTool,\n    ComputerTool,\n]\n</code></pre> <p>A tool that can be used in an agent.</p>"},{"location":"ref/tool/#agents.tool.FunctionTool","title":"FunctionTool  <code>dataclass</code>","text":"<p>A tool that wraps a function. In most cases, you should use  the <code>function_tool</code> helpers to create a FunctionTool, as they let you easily wrap a Python function.</p> Source code in <code>src/agents/tool.py</code> <pre><code>@dataclass\nclass FunctionTool:\n    \"\"\"A tool that wraps a function. In most cases, you should use  the `function_tool` helpers to\n    create a FunctionTool, as they let you easily wrap a Python function.\n    \"\"\"\n\n    name: str\n    \"\"\"The name of the tool, as shown to the LLM. Generally the name of the function.\"\"\"\n\n    description: str\n    \"\"\"A description of the tool, as shown to the LLM.\"\"\"\n\n    params_json_schema: dict[str, Any]\n    \"\"\"The JSON schema for the tool's parameters.\"\"\"\n\n    on_invoke_tool: Callable[[RunContextWrapper[Any], str], Awaitable[str]]\n    \"\"\"A function that invokes the tool with the given context and parameters. The params passed\n    are:\n    1. The tool run context.\n    2. The arguments from the LLM, as a JSON string.\n\n    You must return a string representation of the tool output. In case of errors, you can either\n    raise an Exception (which will cause the run to fail) or return a string error message (which\n    will be sent back to the LLM).\n    \"\"\"\n\n    strict_json_schema: bool = True\n    \"\"\"Whether the JSON schema is in strict mode. We **strongly** recommend setting this to True,\n    as it increases the likelihood of correct JSON input.\"\"\"\n</code></pre>"},{"location":"ref/tool/#agents.tool.FunctionTool.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the tool, as shown to the LLM. Generally the name of the function.</p>"},{"location":"ref/tool/#agents.tool.FunctionTool.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str\n</code></pre> <p>A description of the tool, as shown to the LLM.</p>"},{"location":"ref/tool/#agents.tool.FunctionTool.params_json_schema","title":"params_json_schema  <code>instance-attribute</code>","text":"<pre><code>params_json_schema: dict[str, Any]\n</code></pre> <p>The JSON schema for the tool's parameters.</p>"},{"location":"ref/tool/#agents.tool.FunctionTool.on_invoke_tool","title":"on_invoke_tool  <code>instance-attribute</code>","text":"<pre><code>on_invoke_tool: Callable[\n    [RunContextWrapper[Any], str], Awaitable[str]\n]\n</code></pre> <p>A function that invokes the tool with the given context and parameters. The params passed are: 1. The tool run context. 2. The arguments from the LLM, as a JSON string.</p> <p>You must return a string representation of the tool output. In case of errors, you can either raise an Exception (which will cause the run to fail) or return a string error message (which will be sent back to the LLM).</p>"},{"location":"ref/tool/#agents.tool.FunctionTool.strict_json_schema","title":"strict_json_schema  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>strict_json_schema: bool = True\n</code></pre> <p>Whether the JSON schema is in strict mode. We strongly recommend setting this to True, as it increases the likelihood of correct JSON input.</p>"},{"location":"ref/tool/#agents.tool.FileSearchTool","title":"FileSearchTool  <code>dataclass</code>","text":"<p>A hosted tool that lets the LLM search through a vector store. Currently only supported with OpenAI models, using the Responses API.</p> Source code in <code>src/agents/tool.py</code> <pre><code>@dataclass\nclass FileSearchTool:\n    \"\"\"A hosted tool that lets the LLM search through a vector store. Currently only supported with\n    OpenAI models, using the Responses API.\n    \"\"\"\n\n    vector_store_ids: list[str]\n    \"\"\"The IDs of the vector stores to search.\"\"\"\n\n    max_num_results: int | None = None\n    \"\"\"The maximum number of results to return.\"\"\"\n\n    include_search_results: bool = False\n    \"\"\"Whether to include the search results in the output produced by the LLM.\"\"\"\n\n    ranking_options: RankingOptions | None = None\n    \"\"\"Ranking options for search.\"\"\"\n\n    filters: Filters | None = None\n    \"\"\"A filter to apply based on file attributes.\"\"\"\n\n    @property\n    def name(self):\n        return \"file_search\"\n</code></pre>"},{"location":"ref/tool/#agents.tool.FileSearchTool.vector_store_ids","title":"vector_store_ids  <code>instance-attribute</code>","text":"<pre><code>vector_store_ids: list[str]\n</code></pre> <p>The IDs of the vector stores to search.</p>"},{"location":"ref/tool/#agents.tool.FileSearchTool.max_num_results","title":"max_num_results  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>max_num_results: int | None = None\n</code></pre> <p>The maximum number of results to return.</p>"},{"location":"ref/tool/#agents.tool.FileSearchTool.include_search_results","title":"include_search_results  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>include_search_results: bool = False\n</code></pre> <p>Whether to include the search results in the output produced by the LLM.</p>"},{"location":"ref/tool/#agents.tool.FileSearchTool.ranking_options","title":"ranking_options  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ranking_options: RankingOptions | None = None\n</code></pre> <p>Ranking options for search.</p>"},{"location":"ref/tool/#agents.tool.FileSearchTool.filters","title":"filters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>filters: Filters | None = None\n</code></pre> <p>A filter to apply based on file attributes.</p>"},{"location":"ref/tool/#agents.tool.WebSearchTool","title":"WebSearchTool  <code>dataclass</code>","text":"<p>A hosted tool that lets the LLM search the web. Currently only supported with OpenAI models, using the Responses API.</p> Source code in <code>src/agents/tool.py</code> <pre><code>@dataclass\nclass WebSearchTool:\n    \"\"\"A hosted tool that lets the LLM search the web. Currently only supported with OpenAI models,\n    using the Responses API.\n    \"\"\"\n\n    user_location: UserLocation | None = None\n    \"\"\"Optional location for the search. Lets you customize results to be relevant to a location.\"\"\"\n\n    search_context_size: Literal[\"low\", \"medium\", \"high\"] = \"medium\"\n    \"\"\"The amount of context to use for the search.\"\"\"\n\n    @property\n    def name(self):\n        return \"web_search_preview\"\n</code></pre>"},{"location":"ref/tool/#agents.tool.WebSearchTool.user_location","title":"user_location  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>user_location: UserLocation | None = None\n</code></pre> <p>Optional location for the search. Lets you customize results to be relevant to a location.</p>"},{"location":"ref/tool/#agents.tool.WebSearchTool.search_context_size","title":"search_context_size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>search_context_size: Literal[\"low\", \"medium\", \"high\"] = (\n    \"medium\"\n)\n</code></pre> <p>The amount of context to use for the search.</p>"},{"location":"ref/tool/#agents.tool.ComputerTool","title":"ComputerTool  <code>dataclass</code>","text":"<p>A hosted tool that lets the LLM control a computer.</p> Source code in <code>src/agents/tool.py</code> <pre><code>@dataclass\nclass ComputerTool:\n    \"\"\"A hosted tool that lets the LLM control a computer.\"\"\"\n\n    computer: Computer | AsyncComputer\n    \"\"\"The computer implementation, which describes the environment and dimensions of the computer,\n    as well as implements the computer actions like click, screenshot, etc.\n    \"\"\"\n\n    @property\n    def name(self):\n        return \"computer_use_preview\"\n</code></pre>"},{"location":"ref/tool/#agents.tool.ComputerTool.computer","title":"computer  <code>instance-attribute</code>","text":"<pre><code>computer: Computer | AsyncComputer\n</code></pre> <p>The computer implementation, which describes the environment and dimensions of the computer, as well as implements the computer actions like click, screenshot, etc.</p>"},{"location":"ref/tool/#agents.tool.default_tool_error_function","title":"default_tool_error_function","text":"<pre><code>default_tool_error_function(\n    ctx: RunContextWrapper[Any], error: Exception\n) -&gt; str\n</code></pre> <p>The default tool error function, which just returns a generic error message.</p> Source code in <code>src/agents/tool.py</code> <pre><code>def default_tool_error_function(ctx: RunContextWrapper[Any], error: Exception) -&gt; str:\n    \"\"\"The default tool error function, which just returns a generic error message.\"\"\"\n    return f\"An error occurred while running the tool. Please try again. Error: {str(error)}\"\n</code></pre>"},{"location":"ref/tool/#agents.tool.function_tool","title":"function_tool","text":"<pre><code>function_tool(\n    func: ToolFunction[...],\n    *,\n    name_override: str | None = None,\n    description_override: str | None = None,\n    docstring_style: DocstringStyle | None = None,\n    use_docstring_info: bool = True,\n    failure_error_function: ToolErrorFunction | None = None,\n    strict_mode: bool = True,\n) -&gt; FunctionTool\n</code></pre><pre><code>function_tool(\n    *,\n    name_override: str | None = None,\n    description_override: str | None = None,\n    docstring_style: DocstringStyle | None = None,\n    use_docstring_info: bool = True,\n    failure_error_function: ToolErrorFunction | None = None,\n    strict_mode: bool = True,\n) -&gt; Callable[[ToolFunction[...]], FunctionTool]\n</code></pre> <pre><code>function_tool(\n    func: ToolFunction[...] | None = None,\n    *,\n    name_override: str | None = None,\n    description_override: str | None = None,\n    docstring_style: DocstringStyle | None = None,\n    use_docstring_info: bool = True,\n    failure_error_function: ToolErrorFunction\n    | None = default_tool_error_function,\n    strict_mode: bool = True,\n) -&gt; (\n    FunctionTool\n    | Callable[[ToolFunction[...]], FunctionTool]\n)\n</code></pre> <p>Decorator to create a FunctionTool from a function. By default, we will: 1. Parse the function signature to create a JSON schema for the tool's parameters. 2. Use the function's docstring to populate the tool's description. 3. Use the function's docstring to populate argument descriptions. The docstring style is detected automatically, but you can override it.</p> <p>If the function takes a <code>RunContextWrapper</code> as the first argument, it must match the context type of the agent that uses the tool.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>ToolFunction[...] | None</code> <p>The function to wrap.</p> <code>None</code> <code>name_override</code> <code>str | None</code> <p>If provided, use this name for the tool instead of the function's name.</p> <code>None</code> <code>description_override</code> <code>str | None</code> <p>If provided, use this description for the tool instead of the function's docstring.</p> <code>None</code> <code>docstring_style</code> <code>DocstringStyle | None</code> <p>If provided, use this style for the tool's docstring. If not provided, we will attempt to auto-detect the style.</p> <code>None</code> <code>use_docstring_info</code> <code>bool</code> <p>If True, use the function's docstring to populate the tool's description and argument descriptions.</p> <code>True</code> <code>failure_error_function</code> <code>ToolErrorFunction | None</code> <p>If provided, use this function to generate an error message when the tool call fails. The error message is sent to the LLM. If you pass None, then no error message will be sent and instead an Exception will be raised.</p> <code>default_tool_error_function</code> <code>strict_mode</code> <code>bool</code> <p>If False, parameters with default values become optional in the function schema.</p> <code>True</code> Source code in <code>src/agents/tool.py</code> <pre><code>def function_tool(\n    func: ToolFunction[...] | None = None,\n    *,\n    name_override: str | None = None,\n    description_override: str | None = None,\n    docstring_style: DocstringStyle | None = None,\n    use_docstring_info: bool = True,\n    failure_error_function: ToolErrorFunction | None = default_tool_error_function,\n    strict_mode: bool = True,\n) -&gt; FunctionTool | Callable[[ToolFunction[...]], FunctionTool]:\n    \"\"\"\n    Decorator to create a FunctionTool from a function. By default, we will:\n    1. Parse the function signature to create a JSON schema for the tool's parameters.\n    2. Use the function's docstring to populate the tool's description.\n    3. Use the function's docstring to populate argument descriptions.\n    The docstring style is detected automatically, but you can override it.\n\n    If the function takes a `RunContextWrapper` as the first argument, it *must* match the\n    context type of the agent that uses the tool.\n\n    Args:\n        func: The function to wrap.\n        name_override: If provided, use this name for the tool instead of the function's name.\n        description_override: If provided, use this description for the tool instead of the\n            function's docstring.\n        docstring_style: If provided, use this style for the tool's docstring. If not provided,\n            we will attempt to auto-detect the style.\n        use_docstring_info: If True, use the function's docstring to populate the tool's\n            description and argument descriptions.\n        failure_error_function: If provided, use this function to generate an error message when\n            the tool call fails. The error message is sent to the LLM. If you pass None, then no\n            error message will be sent and instead an Exception will be raised.\n        strict_mode: If False, parameters with default values become optional in the\n            function schema.\n    \"\"\"\n\n    def _create_function_tool(the_func: ToolFunction[...]) -&gt; FunctionTool:\n        schema = function_schema(\n            func=the_func,\n            name_override=name_override,\n            description_override=description_override,\n            docstring_style=docstring_style,\n            use_docstring_info=use_docstring_info,\n            strict_json_schema=strict_mode,\n        )\n\n        async def _on_invoke_tool_impl(ctx: RunContextWrapper[Any], input: str) -&gt; str:\n            try:\n                json_data: dict[str, Any] = json.loads(input) if input else {}\n            except Exception as e:\n                if _debug.DONT_LOG_TOOL_DATA:\n                    logger.debug(f\"Invalid JSON input for tool {schema.name}\")\n                else:\n                    logger.debug(f\"Invalid JSON input for tool {schema.name}: {input}\")\n                raise ModelBehaviorError(\n                    f\"Invalid JSON input for tool {schema.name}: {input}\"\n                ) from e\n\n            if _debug.DONT_LOG_TOOL_DATA:\n                logger.debug(f\"Invoking tool {schema.name}\")\n            else:\n                logger.debug(f\"Invoking tool {schema.name} with input {input}\")\n\n            try:\n                parsed = (\n                    schema.params_pydantic_model(**json_data)\n                    if json_data\n                    else schema.params_pydantic_model()\n                )\n            except ValidationError as e:\n                raise ModelBehaviorError(f\"Invalid JSON input for tool {schema.name}: {e}\") from e\n\n            args, kwargs_dict = schema.to_call_args(parsed)\n\n            if not _debug.DONT_LOG_TOOL_DATA:\n                logger.debug(f\"Tool call args: {args}, kwargs: {kwargs_dict}\")\n\n            if inspect.iscoroutinefunction(the_func):\n                if schema.takes_context:\n                    result = await the_func(ctx, *args, **kwargs_dict)\n                else:\n                    result = await the_func(*args, **kwargs_dict)\n            else:\n                if schema.takes_context:\n                    result = the_func(ctx, *args, **kwargs_dict)\n                else:\n                    result = the_func(*args, **kwargs_dict)\n\n            if _debug.DONT_LOG_TOOL_DATA:\n                logger.debug(f\"Tool {schema.name} completed.\")\n            else:\n                logger.debug(f\"Tool {schema.name} returned {result}\")\n\n            return str(result)\n\n        async def _on_invoke_tool(ctx: RunContextWrapper[Any], input: str) -&gt; str:\n            try:\n                return await _on_invoke_tool_impl(ctx, input)\n            except Exception as e:\n                if failure_error_function is None:\n                    raise\n\n                result = failure_error_function(ctx, e)\n                if inspect.isawaitable(result):\n                    return await result\n\n                _error_tracing.attach_error_to_current_span(\n                    SpanError(\n                        message=\"Error running tool (non-fatal)\",\n                        data={\n                            \"tool_name\": schema.name,\n                            \"error\": str(e),\n                        },\n                    )\n                )\n                return result\n\n        return FunctionTool(\n            name=schema.name,\n            description=schema.description or \"\",\n            params_json_schema=schema.params_json_schema,\n            on_invoke_tool=_on_invoke_tool,\n            strict_json_schema=strict_mode,\n        )\n\n    # If func is actually a callable, we were used as @function_tool with no parentheses\n    if callable(func):\n        return _create_function_tool(func)\n\n    # Otherwise, we were used as @function_tool(...), so return a decorator\n    def decorator(real_func: ToolFunction[...]) -&gt; FunctionTool:\n        return _create_function_tool(real_func)\n\n    return decorator\n</code></pre>"},{"location":"ref/usage/","title":"<code>Usage</code>","text":""},{"location":"ref/usage/#agents.usage.Usage","title":"Usage  <code>dataclass</code>","text":"Source code in <code>src/agents/usage.py</code> <pre><code>@dataclass\nclass Usage:\n    requests: int = 0\n    \"\"\"Total requests made to the LLM API.\"\"\"\n\n    input_tokens: int = 0\n    \"\"\"Total input tokens sent, across all requests.\"\"\"\n\n    output_tokens: int = 0\n    \"\"\"Total output tokens received, across all requests.\"\"\"\n\n    total_tokens: int = 0\n    \"\"\"Total tokens sent and received, across all requests.\"\"\"\n\n    def add(self, other: \"Usage\") -&gt; None:\n        self.requests += other.requests if other.requests else 0\n        self.input_tokens += other.input_tokens if other.input_tokens else 0\n        self.output_tokens += other.output_tokens if other.output_tokens else 0\n        self.total_tokens += other.total_tokens if other.total_tokens else 0\n</code></pre>"},{"location":"ref/usage/#agents.usage.Usage.requests","title":"requests  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>requests: int = 0\n</code></pre> <p>Total requests made to the LLM API.</p>"},{"location":"ref/usage/#agents.usage.Usage.input_tokens","title":"input_tokens  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>input_tokens: int = 0\n</code></pre> <p>Total input tokens sent, across all requests.</p>"},{"location":"ref/usage/#agents.usage.Usage.output_tokens","title":"output_tokens  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>output_tokens: int = 0\n</code></pre> <p>Total output tokens received, across all requests.</p>"},{"location":"ref/usage/#agents.usage.Usage.total_tokens","title":"total_tokens  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>total_tokens: int = 0\n</code></pre> <p>Total tokens sent and received, across all requests.</p>"},{"location":"ref/extensions/handoff_filters/","title":"<code>Handoff filters</code>","text":""},{"location":"ref/extensions/handoff_filters/#agents.extensions.handoff_filters.remove_all_tools","title":"remove_all_tools","text":"<pre><code>remove_all_tools(\n    handoff_input_data: HandoffInputData,\n) -&gt; HandoffInputData\n</code></pre> <p>Filters out all tool items: file search, web search and function calls+output.</p> Source code in <code>src/agents/extensions/handoff_filters.py</code> <pre><code>def remove_all_tools(handoff_input_data: HandoffInputData) -&gt; HandoffInputData:\n    \"\"\"Filters out all tool items: file search, web search and function calls+output.\"\"\"\n\n    history = handoff_input_data.input_history\n    new_items = handoff_input_data.new_items\n\n    filtered_history = (\n        _remove_tool_types_from_input(history) if isinstance(history, tuple) else history\n    )\n    filtered_pre_handoff_items = _remove_tools_from_items(handoff_input_data.pre_handoff_items)\n    filtered_new_items = _remove_tools_from_items(new_items)\n\n    return HandoffInputData(\n        input_history=filtered_history,\n        pre_handoff_items=filtered_pre_handoff_items,\n        new_items=filtered_new_items,\n    )\n</code></pre>"},{"location":"ref/extensions/handoff_prompt/","title":"<code>Handoff prompt</code>","text":""},{"location":"ref/extensions/handoff_prompt/#agents.extensions.handoff_prompt.RECOMMENDED_PROMPT_PREFIX","title":"RECOMMENDED_PROMPT_PREFIX  <code>module-attribute</code>","text":"<pre><code>RECOMMENDED_PROMPT_PREFIX = \"# System context\\nYou are part of a multi-agent system called the Agents SDK, designed to make agent coordination and execution easy. Agents uses two primary abstraction: **Agents** and **Handoffs**. An agent encompasses instructions and tools and can hand off a conversation to another agent when appropriate. Handoffs are achieved by calling a handoff function, generally named `transfer_to_&lt;agent_name&gt;`. Transfers between agents are handled seamlessly in the background; do not mention or draw attention to these transfers in your conversation with the user.\\n\"\n</code></pre>"},{"location":"ref/extensions/handoff_prompt/#agents.extensions.handoff_prompt.prompt_with_handoff_instructions","title":"prompt_with_handoff_instructions","text":"<pre><code>prompt_with_handoff_instructions(prompt: str) -&gt; str\n</code></pre> <p>Add recommended instructions to the prompt for agents that use handoffs.</p> Source code in <code>src/agents/extensions/handoff_prompt.py</code> <pre><code>def prompt_with_handoff_instructions(prompt: str) -&gt; str:\n    \"\"\"\n    Add recommended instructions to the prompt for agents that use handoffs.\n    \"\"\"\n    return f\"{RECOMMENDED_PROMPT_PREFIX}\\n\\n{prompt}\"\n</code></pre>"},{"location":"ref/models/interface/","title":"<code>Model interface</code>","text":""},{"location":"ref/models/interface/#agents.models.interface.ModelTracing","title":"ModelTracing","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>src/agents/models/interface.py</code> <pre><code>class ModelTracing(enum.Enum):\n    DISABLED = 0\n    \"\"\"Tracing is disabled entirely.\"\"\"\n\n    ENABLED = 1\n    \"\"\"Tracing is enabled, and all data is included.\"\"\"\n\n    ENABLED_WITHOUT_DATA = 2\n    \"\"\"Tracing is enabled, but inputs/outputs are not included.\"\"\"\n\n    def is_disabled(self) -&gt; bool:\n        return self == ModelTracing.DISABLED\n\n    def include_data(self) -&gt; bool:\n        return self == ModelTracing.ENABLED\n</code></pre>"},{"location":"ref/models/interface/#agents.models.interface.ModelTracing.DISABLED","title":"DISABLED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DISABLED = 0\n</code></pre> <p>Tracing is disabled entirely.</p>"},{"location":"ref/models/interface/#agents.models.interface.ModelTracing.ENABLED","title":"ENABLED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ENABLED = 1\n</code></pre> <p>Tracing is enabled, and all data is included.</p>"},{"location":"ref/models/interface/#agents.models.interface.ModelTracing.ENABLED_WITHOUT_DATA","title":"ENABLED_WITHOUT_DATA  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ENABLED_WITHOUT_DATA = 2\n</code></pre> <p>Tracing is enabled, but inputs/outputs are not included.</p>"},{"location":"ref/models/interface/#agents.models.interface.Model","title":"Model","text":"<p>               Bases: <code>ABC</code></p> <p>The base interface for calling an LLM.</p> Source code in <code>src/agents/models/interface.py</code> <pre><code>class Model(abc.ABC):\n    \"\"\"The base interface for calling an LLM.\"\"\"\n\n    @abc.abstractmethod\n    async def get_response(\n        self,\n        system_instructions: str | None,\n        input: str | list[TResponseInputItem],\n        model_settings: ModelSettings,\n        tools: list[Tool],\n        output_schema: AgentOutputSchema | None,\n        handoffs: list[Handoff],\n        tracing: ModelTracing,\n    ) -&gt; ModelResponse:\n        \"\"\"Get a response from the model.\n\n        Args:\n            system_instructions: The system instructions to use.\n            input: The input items to the model, in OpenAI Responses format.\n            model_settings: The model settings to use.\n            tools: The tools available to the model.\n            output_schema: The output schema to use.\n            handoffs: The handoffs available to the model.\n            tracing: Tracing configuration.\n\n        Returns:\n            The full model response.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def stream_response(\n        self,\n        system_instructions: str | None,\n        input: str | list[TResponseInputItem],\n        model_settings: ModelSettings,\n        tools: list[Tool],\n        output_schema: AgentOutputSchema | None,\n        handoffs: list[Handoff],\n        tracing: ModelTracing,\n    ) -&gt; AsyncIterator[TResponseStreamEvent]:\n        \"\"\"Stream a response from the model.\n\n        Args:\n            system_instructions: The system instructions to use.\n            input: The input items to the model, in OpenAI Responses format.\n            model_settings: The model settings to use.\n            tools: The tools available to the model.\n            output_schema: The output schema to use.\n            handoffs: The handoffs available to the model.\n            tracing: Tracing configuration.\n\n        Returns:\n            An iterator of response stream events, in OpenAI Responses format.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"ref/models/interface/#agents.models.interface.Model.get_response","title":"get_response  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>get_response(\n    system_instructions: str | None,\n    input: str | list[TResponseInputItem],\n    model_settings: ModelSettings,\n    tools: list[Tool],\n    output_schema: AgentOutputSchema | None,\n    handoffs: list[Handoff],\n    tracing: ModelTracing,\n) -&gt; ModelResponse\n</code></pre> <p>Get a response from the model.</p> <p>Parameters:</p> Name Type Description Default <code>system_instructions</code> <code>str | None</code> <p>The system instructions to use.</p> required <code>input</code> <code>str | list[TResponseInputItem]</code> <p>The input items to the model, in OpenAI Responses format.</p> required <code>model_settings</code> <code>ModelSettings</code> <p>The model settings to use.</p> required <code>tools</code> <code>list[Tool]</code> <p>The tools available to the model.</p> required <code>output_schema</code> <code>AgentOutputSchema | None</code> <p>The output schema to use.</p> required <code>handoffs</code> <code>list[Handoff]</code> <p>The handoffs available to the model.</p> required <code>tracing</code> <code>ModelTracing</code> <p>Tracing configuration.</p> required <p>Returns:</p> Type Description <code>ModelResponse</code> <p>The full model response.</p> Source code in <code>src/agents/models/interface.py</code> <pre><code>@abc.abstractmethod\nasync def get_response(\n    self,\n    system_instructions: str | None,\n    input: str | list[TResponseInputItem],\n    model_settings: ModelSettings,\n    tools: list[Tool],\n    output_schema: AgentOutputSchema | None,\n    handoffs: list[Handoff],\n    tracing: ModelTracing,\n) -&gt; ModelResponse:\n    \"\"\"Get a response from the model.\n\n    Args:\n        system_instructions: The system instructions to use.\n        input: The input items to the model, in OpenAI Responses format.\n        model_settings: The model settings to use.\n        tools: The tools available to the model.\n        output_schema: The output schema to use.\n        handoffs: The handoffs available to the model.\n        tracing: Tracing configuration.\n\n    Returns:\n        The full model response.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/models/interface/#agents.models.interface.Model.stream_response","title":"stream_response  <code>abstractmethod</code>","text":"<pre><code>stream_response(\n    system_instructions: str | None,\n    input: str | list[TResponseInputItem],\n    model_settings: ModelSettings,\n    tools: list[Tool],\n    output_schema: AgentOutputSchema | None,\n    handoffs: list[Handoff],\n    tracing: ModelTracing,\n) -&gt; AsyncIterator[TResponseStreamEvent]\n</code></pre> <p>Stream a response from the model.</p> <p>Parameters:</p> Name Type Description Default <code>system_instructions</code> <code>str | None</code> <p>The system instructions to use.</p> required <code>input</code> <code>str | list[TResponseInputItem]</code> <p>The input items to the model, in OpenAI Responses format.</p> required <code>model_settings</code> <code>ModelSettings</code> <p>The model settings to use.</p> required <code>tools</code> <code>list[Tool]</code> <p>The tools available to the model.</p> required <code>output_schema</code> <code>AgentOutputSchema | None</code> <p>The output schema to use.</p> required <code>handoffs</code> <code>list[Handoff]</code> <p>The handoffs available to the model.</p> required <code>tracing</code> <code>ModelTracing</code> <p>Tracing configuration.</p> required <p>Returns:</p> Type Description <code>AsyncIterator[TResponseStreamEvent]</code> <p>An iterator of response stream events, in OpenAI Responses format.</p> Source code in <code>src/agents/models/interface.py</code> <pre><code>@abc.abstractmethod\ndef stream_response(\n    self,\n    system_instructions: str | None,\n    input: str | list[TResponseInputItem],\n    model_settings: ModelSettings,\n    tools: list[Tool],\n    output_schema: AgentOutputSchema | None,\n    handoffs: list[Handoff],\n    tracing: ModelTracing,\n) -&gt; AsyncIterator[TResponseStreamEvent]:\n    \"\"\"Stream a response from the model.\n\n    Args:\n        system_instructions: The system instructions to use.\n        input: The input items to the model, in OpenAI Responses format.\n        model_settings: The model settings to use.\n        tools: The tools available to the model.\n        output_schema: The output schema to use.\n        handoffs: The handoffs available to the model.\n        tracing: Tracing configuration.\n\n    Returns:\n        An iterator of response stream events, in OpenAI Responses format.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/models/interface/#agents.models.interface.ModelProvider","title":"ModelProvider","text":"<p>               Bases: <code>ABC</code></p> <p>The base interface for a model provider.</p> <p>Model provider is responsible for looking up Models by name.</p> Source code in <code>src/agents/models/interface.py</code> <pre><code>class ModelProvider(abc.ABC):\n    \"\"\"The base interface for a model provider.\n\n    Model provider is responsible for looking up Models by name.\n    \"\"\"\n\n    @abc.abstractmethod\n    def get_model(self, model_name: str | None) -&gt; Model:\n        \"\"\"Get a model by name.\n\n        Args:\n            model_name: The name of the model to get.\n\n        Returns:\n            The model.\n        \"\"\"\n</code></pre>"},{"location":"ref/models/interface/#agents.models.interface.ModelProvider.get_model","title":"get_model  <code>abstractmethod</code>","text":"<pre><code>get_model(model_name: str | None) -&gt; Model\n</code></pre> <p>Get a model by name.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str | None</code> <p>The name of the model to get.</p> required <p>Returns:</p> Type Description <code>Model</code> <p>The model.</p> Source code in <code>src/agents/models/interface.py</code> <pre><code>@abc.abstractmethod\ndef get_model(self, model_name: str | None) -&gt; Model:\n    \"\"\"Get a model by name.\n\n    Args:\n        model_name: The name of the model to get.\n\n    Returns:\n        The model.\n    \"\"\"\n</code></pre>"},{"location":"ref/models/openai_chatcompletions/","title":"<code>OpenAI Chat Completions model</code>","text":""},{"location":"ref/models/openai_chatcompletions/#agents.models.openai_chatcompletions.OpenAIChatCompletionsModel","title":"OpenAIChatCompletionsModel","text":"<p>               Bases: <code>Model</code></p> Source code in <code>src/agents/models/openai_chatcompletions.py</code> <pre><code>class OpenAIChatCompletionsModel(Model):\n    def __init__(\n        self,\n        model: str | ChatModel,\n        openai_client: AsyncOpenAI,\n    ) -&gt; None:\n        self.model = model\n        self._client = openai_client\n\n    def _non_null_or_not_given(self, value: Any) -&gt; Any:\n        return value if value is not None else NOT_GIVEN\n\n    async def get_response(\n        self,\n        system_instructions: str | None,\n        input: str | list[TResponseInputItem],\n        model_settings: ModelSettings,\n        tools: list[Tool],\n        output_schema: AgentOutputSchema | None,\n        handoffs: list[Handoff],\n        tracing: ModelTracing,\n    ) -&gt; ModelResponse:\n        with generation_span(\n            model=str(self.model),\n            model_config=dataclasses.asdict(model_settings)\n            | {\"base_url\": str(self._client.base_url)},\n            disabled=tracing.is_disabled(),\n        ) as span_generation:\n            response = await self._fetch_response(\n                system_instructions,\n                input,\n                model_settings,\n                tools,\n                output_schema,\n                handoffs,\n                span_generation,\n                tracing,\n                stream=False,\n            )\n\n            if _debug.DONT_LOG_MODEL_DATA:\n                logger.debug(\"Received model response\")\n            else:\n                logger.debug(\n                    f\"LLM resp:\\n{json.dumps(response.choices[0].message.model_dump(), indent=2)}\\n\"\n                )\n\n            usage = (\n                Usage(\n                    requests=1,\n                    input_tokens=response.usage.prompt_tokens,\n                    output_tokens=response.usage.completion_tokens,\n                    total_tokens=response.usage.total_tokens,\n                )\n                if response.usage\n                else Usage()\n            )\n            if tracing.include_data():\n                span_generation.span_data.output = [response.choices[0].message.model_dump()]\n            span_generation.span_data.usage = {\n                \"input_tokens\": usage.input_tokens,\n                \"output_tokens\": usage.output_tokens,\n            }\n\n            items = _Converter.message_to_output_items(response.choices[0].message)\n\n            return ModelResponse(\n                output=items,\n                usage=usage,\n                referenceable_id=None,\n            )\n\n    async def stream_response(\n        self,\n        system_instructions: str | None,\n        input: str | list[TResponseInputItem],\n        model_settings: ModelSettings,\n        tools: list[Tool],\n        output_schema: AgentOutputSchema | None,\n        handoffs: list[Handoff],\n        tracing: ModelTracing,\n    ) -&gt; AsyncIterator[TResponseStreamEvent]:\n        \"\"\"\n        Yields a partial message as it is generated, as well as the usage information.\n        \"\"\"\n        with generation_span(\n            model=str(self.model),\n            model_config=dataclasses.asdict(model_settings)\n            | {\"base_url\": str(self._client.base_url)},\n            disabled=tracing.is_disabled(),\n        ) as span_generation:\n            response, stream = await self._fetch_response(\n                system_instructions,\n                input,\n                model_settings,\n                tools,\n                output_schema,\n                handoffs,\n                span_generation,\n                tracing,\n                stream=True,\n            )\n\n            usage: CompletionUsage | None = None\n            state = _StreamingState()\n\n            async for chunk in stream:\n                if not state.started:\n                    state.started = True\n                    yield ResponseCreatedEvent(\n                        response=response,\n                        type=\"response.created\",\n                    )\n\n                # The usage is only available in the last chunk\n                usage = chunk.usage\n\n                if not chunk.choices or not chunk.choices[0].delta:\n                    continue\n\n                delta = chunk.choices[0].delta\n\n                # Handle text\n                if delta.content:\n                    if not state.text_content_index_and_output:\n                        # Initialize a content tracker for streaming text\n                        state.text_content_index_and_output = (\n                            0 if not state.refusal_content_index_and_output else 1,\n                            ResponseOutputText(\n                                text=\"\",\n                                type=\"output_text\",\n                                annotations=[],\n                            ),\n                        )\n                        # Start a new assistant message stream\n                        assistant_item = ResponseOutputMessage(\n                            id=FAKE_RESPONSES_ID,\n                            content=[],\n                            role=\"assistant\",\n                            type=\"message\",\n                            status=\"in_progress\",\n                        )\n                        # Notify consumers of the start of a new output message + first content part\n                        yield ResponseOutputItemAddedEvent(\n                            item=assistant_item,\n                            output_index=0,\n                            type=\"response.output_item.added\",\n                        )\n                        yield ResponseContentPartAddedEvent(\n                            content_index=state.text_content_index_and_output[0],\n                            item_id=FAKE_RESPONSES_ID,\n                            output_index=0,\n                            part=ResponseOutputText(\n                                text=\"\",\n                                type=\"output_text\",\n                                annotations=[],\n                            ),\n                            type=\"response.content_part.added\",\n                        )\n                    # Emit the delta for this segment of content\n                    yield ResponseTextDeltaEvent(\n                        content_index=state.text_content_index_and_output[0],\n                        delta=delta.content,\n                        item_id=FAKE_RESPONSES_ID,\n                        output_index=0,\n                        type=\"response.output_text.delta\",\n                    )\n                    # Accumulate the text into the response part\n                    state.text_content_index_and_output[1].text += delta.content\n\n                # Handle refusals (model declines to answer)\n                if delta.refusal:\n                    if not state.refusal_content_index_and_output:\n                        # Initialize a content tracker for streaming refusal text\n                        state.refusal_content_index_and_output = (\n                            0 if not state.text_content_index_and_output else 1,\n                            ResponseOutputRefusal(refusal=\"\", type=\"refusal\"),\n                        )\n                        # Start a new assistant message if one doesn't exist yet (in-progress)\n                        assistant_item = ResponseOutputMessage(\n                            id=FAKE_RESPONSES_ID,\n                            content=[],\n                            role=\"assistant\",\n                            type=\"message\",\n                            status=\"in_progress\",\n                        )\n                        # Notify downstream that assistant message + first content part are starting\n                        yield ResponseOutputItemAddedEvent(\n                            item=assistant_item,\n                            output_index=0,\n                            type=\"response.output_item.added\",\n                        )\n                        yield ResponseContentPartAddedEvent(\n                            content_index=state.refusal_content_index_and_output[0],\n                            item_id=FAKE_RESPONSES_ID,\n                            output_index=0,\n                            part=ResponseOutputText(\n                                text=\"\",\n                                type=\"output_text\",\n                                annotations=[],\n                            ),\n                            type=\"response.content_part.added\",\n                        )\n                    # Emit the delta for this segment of refusal\n                    yield ResponseRefusalDeltaEvent(\n                        content_index=state.refusal_content_index_and_output[0],\n                        delta=delta.refusal,\n                        item_id=FAKE_RESPONSES_ID,\n                        output_index=0,\n                        type=\"response.refusal.delta\",\n                    )\n                    # Accumulate the refusal string in the output part\n                    state.refusal_content_index_and_output[1].refusal += delta.refusal\n\n                # Handle tool calls\n                # Because we don't know the name of the function until the end of the stream, we'll\n                # save everything and yield events at the end\n                if delta.tool_calls:\n                    for tc_delta in delta.tool_calls:\n                        if tc_delta.index not in state.function_calls:\n                            state.function_calls[tc_delta.index] = ResponseFunctionToolCall(\n                                id=FAKE_RESPONSES_ID,\n                                arguments=\"\",\n                                name=\"\",\n                                type=\"function_call\",\n                                call_id=\"\",\n                            )\n                        tc_function = tc_delta.function\n\n                        state.function_calls[tc_delta.index].arguments += (\n                            tc_function.arguments if tc_function else \"\"\n                        ) or \"\"\n                        state.function_calls[tc_delta.index].name += (\n                            tc_function.name if tc_function else \"\"\n                        ) or \"\"\n                        state.function_calls[tc_delta.index].call_id += tc_delta.id or \"\"\n\n            function_call_starting_index = 0\n            if state.text_content_index_and_output:\n                function_call_starting_index += 1\n                # Send end event for this content part\n                yield ResponseContentPartDoneEvent(\n                    content_index=state.text_content_index_and_output[0],\n                    item_id=FAKE_RESPONSES_ID,\n                    output_index=0,\n                    part=state.text_content_index_and_output[1],\n                    type=\"response.content_part.done\",\n                )\n\n            if state.refusal_content_index_and_output:\n                function_call_starting_index += 1\n                # Send end event for this content part\n                yield ResponseContentPartDoneEvent(\n                    content_index=state.refusal_content_index_and_output[0],\n                    item_id=FAKE_RESPONSES_ID,\n                    output_index=0,\n                    part=state.refusal_content_index_and_output[1],\n                    type=\"response.content_part.done\",\n                )\n\n            # Actually send events for the function calls\n            for function_call in state.function_calls.values():\n                # First, a ResponseOutputItemAdded for the function call\n                yield ResponseOutputItemAddedEvent(\n                    item=ResponseFunctionToolCall(\n                        id=FAKE_RESPONSES_ID,\n                        call_id=function_call.call_id,\n                        arguments=function_call.arguments,\n                        name=function_call.name,\n                        type=\"function_call\",\n                    ),\n                    output_index=function_call_starting_index,\n                    type=\"response.output_item.added\",\n                )\n                # Then, yield the args\n                yield ResponseFunctionCallArgumentsDeltaEvent(\n                    delta=function_call.arguments,\n                    item_id=FAKE_RESPONSES_ID,\n                    output_index=function_call_starting_index,\n                    type=\"response.function_call_arguments.delta\",\n                )\n                # Finally, the ResponseOutputItemDone\n                yield ResponseOutputItemDoneEvent(\n                    item=ResponseFunctionToolCall(\n                        id=FAKE_RESPONSES_ID,\n                        call_id=function_call.call_id,\n                        arguments=function_call.arguments,\n                        name=function_call.name,\n                        type=\"function_call\",\n                    ),\n                    output_index=function_call_starting_index,\n                    type=\"response.output_item.done\",\n                )\n\n            # Finally, send the Response completed event\n            outputs: list[ResponseOutputItem] = []\n            if state.text_content_index_and_output or state.refusal_content_index_and_output:\n                assistant_msg = ResponseOutputMessage(\n                    id=FAKE_RESPONSES_ID,\n                    content=[],\n                    role=\"assistant\",\n                    type=\"message\",\n                    status=\"completed\",\n                )\n                if state.text_content_index_and_output:\n                    assistant_msg.content.append(state.text_content_index_and_output[1])\n                if state.refusal_content_index_and_output:\n                    assistant_msg.content.append(state.refusal_content_index_and_output[1])\n                outputs.append(assistant_msg)\n\n                # send a ResponseOutputItemDone for the assistant message\n                yield ResponseOutputItemDoneEvent(\n                    item=assistant_msg,\n                    output_index=0,\n                    type=\"response.output_item.done\",\n                )\n\n            for function_call in state.function_calls.values():\n                outputs.append(function_call)\n\n            final_response = response.model_copy()\n            final_response.output = outputs\n            final_response.usage = (\n                ResponseUsage(\n                    input_tokens=usage.prompt_tokens,\n                    output_tokens=usage.completion_tokens,\n                    total_tokens=usage.total_tokens,\n                    output_tokens_details=OutputTokensDetails(\n                        reasoning_tokens=usage.completion_tokens_details.reasoning_tokens\n                        if usage.completion_tokens_details\n                        and usage.completion_tokens_details.reasoning_tokens\n                        else 0\n                    ),\n                )\n                if usage\n                else None\n            )\n\n            yield ResponseCompletedEvent(\n                response=final_response,\n                type=\"response.completed\",\n            )\n            if tracing.include_data():\n                span_generation.span_data.output = [final_response.model_dump()]\n\n            if usage:\n                span_generation.span_data.usage = {\n                    \"input_tokens\": usage.prompt_tokens,\n                    \"output_tokens\": usage.completion_tokens,\n                }\n\n    @overload\n    async def _fetch_response(\n        self,\n        system_instructions: str | None,\n        input: str | list[TResponseInputItem],\n        model_settings: ModelSettings,\n        tools: list[Tool],\n        output_schema: AgentOutputSchema | None,\n        handoffs: list[Handoff],\n        span: Span[GenerationSpanData],\n        tracing: ModelTracing,\n        stream: Literal[True],\n    ) -&gt; tuple[Response, AsyncStream[ChatCompletionChunk]]: ...\n\n    @overload\n    async def _fetch_response(\n        self,\n        system_instructions: str | None,\n        input: str | list[TResponseInputItem],\n        model_settings: ModelSettings,\n        tools: list[Tool],\n        output_schema: AgentOutputSchema | None,\n        handoffs: list[Handoff],\n        span: Span[GenerationSpanData],\n        tracing: ModelTracing,\n        stream: Literal[False],\n    ) -&gt; ChatCompletion: ...\n\n    async def _fetch_response(\n        self,\n        system_instructions: str | None,\n        input: str | list[TResponseInputItem],\n        model_settings: ModelSettings,\n        tools: list[Tool],\n        output_schema: AgentOutputSchema | None,\n        handoffs: list[Handoff],\n        span: Span[GenerationSpanData],\n        tracing: ModelTracing,\n        stream: bool = False,\n    ) -&gt; ChatCompletion | tuple[Response, AsyncStream[ChatCompletionChunk]]:\n        converted_messages = _Converter.items_to_messages(input)\n\n        if system_instructions:\n            converted_messages.insert(\n                0,\n                {\n                    \"content\": system_instructions,\n                    \"role\": \"system\",\n                },\n            )\n        if tracing.include_data():\n            span.span_data.input = converted_messages\n\n        parallel_tool_calls = (\n            True if model_settings.parallel_tool_calls and tools and len(tools) &gt; 0 else NOT_GIVEN\n        )\n        tool_choice = _Converter.convert_tool_choice(model_settings.tool_choice)\n        response_format = _Converter.convert_response_format(output_schema)\n\n        converted_tools = [ToolConverter.to_openai(tool) for tool in tools] if tools else []\n\n        for handoff in handoffs:\n            converted_tools.append(ToolConverter.convert_handoff_tool(handoff))\n\n        if _debug.DONT_LOG_MODEL_DATA:\n            logger.debug(\"Calling LLM\")\n        else:\n            logger.debug(\n                f\"{json.dumps(converted_messages, indent=2)}\\n\"\n                f\"Tools:\\n{json.dumps(converted_tools, indent=2)}\\n\"\n                f\"Stream: {stream}\\n\"\n                f\"Tool choice: {tool_choice}\\n\"\n                f\"Response format: {response_format}\\n\"\n            )\n\n        ret = await self._get_client().chat.completions.create(\n            model=self.model,\n            messages=converted_messages,\n            tools=converted_tools or NOT_GIVEN,\n            temperature=self._non_null_or_not_given(model_settings.temperature),\n            top_p=self._non_null_or_not_given(model_settings.top_p),\n            frequency_penalty=self._non_null_or_not_given(model_settings.frequency_penalty),\n            presence_penalty=self._non_null_or_not_given(model_settings.presence_penalty),\n            max_tokens=self._non_null_or_not_given(model_settings.max_tokens),\n            tool_choice=tool_choice,\n            response_format=response_format,\n            parallel_tool_calls=parallel_tool_calls,\n            stream=stream,\n            stream_options={\"include_usage\": True} if stream else NOT_GIVEN,\n            extra_headers=_HEADERS,\n        )\n\n        if isinstance(ret, ChatCompletion):\n            return ret\n\n        response = Response(\n            id=FAKE_RESPONSES_ID,\n            created_at=time.time(),\n            model=self.model,\n            object=\"response\",\n            output=[],\n            tool_choice=cast(Literal[\"auto\", \"required\", \"none\"], tool_choice)\n            if tool_choice != NOT_GIVEN\n            else \"auto\",\n            top_p=model_settings.top_p,\n            temperature=model_settings.temperature,\n            tools=[],\n            parallel_tool_calls=parallel_tool_calls or False,\n        )\n        return response, ret\n\n    def _get_client(self) -&gt; AsyncOpenAI:\n        if self._client is None:\n            self._client = AsyncOpenAI()\n        return self._client\n</code></pre>"},{"location":"ref/models/openai_chatcompletions/#agents.models.openai_chatcompletions.OpenAIChatCompletionsModel.stream_response","title":"stream_response  <code>async</code>","text":"<pre><code>stream_response(\n    system_instructions: str | None,\n    input: str | list[TResponseInputItem],\n    model_settings: ModelSettings,\n    tools: list[Tool],\n    output_schema: AgentOutputSchema | None,\n    handoffs: list[Handoff],\n    tracing: ModelTracing,\n) -&gt; AsyncIterator[TResponseStreamEvent]\n</code></pre> <p>Yields a partial message as it is generated, as well as the usage information.</p> Source code in <code>src/agents/models/openai_chatcompletions.py</code> <pre><code>async def stream_response(\n    self,\n    system_instructions: str | None,\n    input: str | list[TResponseInputItem],\n    model_settings: ModelSettings,\n    tools: list[Tool],\n    output_schema: AgentOutputSchema | None,\n    handoffs: list[Handoff],\n    tracing: ModelTracing,\n) -&gt; AsyncIterator[TResponseStreamEvent]:\n    \"\"\"\n    Yields a partial message as it is generated, as well as the usage information.\n    \"\"\"\n    with generation_span(\n        model=str(self.model),\n        model_config=dataclasses.asdict(model_settings)\n        | {\"base_url\": str(self._client.base_url)},\n        disabled=tracing.is_disabled(),\n    ) as span_generation:\n        response, stream = await self._fetch_response(\n            system_instructions,\n            input,\n            model_settings,\n            tools,\n            output_schema,\n            handoffs,\n            span_generation,\n            tracing,\n            stream=True,\n        )\n\n        usage: CompletionUsage | None = None\n        state = _StreamingState()\n\n        async for chunk in stream:\n            if not state.started:\n                state.started = True\n                yield ResponseCreatedEvent(\n                    response=response,\n                    type=\"response.created\",\n                )\n\n            # The usage is only available in the last chunk\n            usage = chunk.usage\n\n            if not chunk.choices or not chunk.choices[0].delta:\n                continue\n\n            delta = chunk.choices[0].delta\n\n            # Handle text\n            if delta.content:\n                if not state.text_content_index_and_output:\n                    # Initialize a content tracker for streaming text\n                    state.text_content_index_and_output = (\n                        0 if not state.refusal_content_index_and_output else 1,\n                        ResponseOutputText(\n                            text=\"\",\n                            type=\"output_text\",\n                            annotations=[],\n                        ),\n                    )\n                    # Start a new assistant message stream\n                    assistant_item = ResponseOutputMessage(\n                        id=FAKE_RESPONSES_ID,\n                        content=[],\n                        role=\"assistant\",\n                        type=\"message\",\n                        status=\"in_progress\",\n                    )\n                    # Notify consumers of the start of a new output message + first content part\n                    yield ResponseOutputItemAddedEvent(\n                        item=assistant_item,\n                        output_index=0,\n                        type=\"response.output_item.added\",\n                    )\n                    yield ResponseContentPartAddedEvent(\n                        content_index=state.text_content_index_and_output[0],\n                        item_id=FAKE_RESPONSES_ID,\n                        output_index=0,\n                        part=ResponseOutputText(\n                            text=\"\",\n                            type=\"output_text\",\n                            annotations=[],\n                        ),\n                        type=\"response.content_part.added\",\n                    )\n                # Emit the delta for this segment of content\n                yield ResponseTextDeltaEvent(\n                    content_index=state.text_content_index_and_output[0],\n                    delta=delta.content,\n                    item_id=FAKE_RESPONSES_ID,\n                    output_index=0,\n                    type=\"response.output_text.delta\",\n                )\n                # Accumulate the text into the response part\n                state.text_content_index_and_output[1].text += delta.content\n\n            # Handle refusals (model declines to answer)\n            if delta.refusal:\n                if not state.refusal_content_index_and_output:\n                    # Initialize a content tracker for streaming refusal text\n                    state.refusal_content_index_and_output = (\n                        0 if not state.text_content_index_and_output else 1,\n                        ResponseOutputRefusal(refusal=\"\", type=\"refusal\"),\n                    )\n                    # Start a new assistant message if one doesn't exist yet (in-progress)\n                    assistant_item = ResponseOutputMessage(\n                        id=FAKE_RESPONSES_ID,\n                        content=[],\n                        role=\"assistant\",\n                        type=\"message\",\n                        status=\"in_progress\",\n                    )\n                    # Notify downstream that assistant message + first content part are starting\n                    yield ResponseOutputItemAddedEvent(\n                        item=assistant_item,\n                        output_index=0,\n                        type=\"response.output_item.added\",\n                    )\n                    yield ResponseContentPartAddedEvent(\n                        content_index=state.refusal_content_index_and_output[0],\n                        item_id=FAKE_RESPONSES_ID,\n                        output_index=0,\n                        part=ResponseOutputText(\n                            text=\"\",\n                            type=\"output_text\",\n                            annotations=[],\n                        ),\n                        type=\"response.content_part.added\",\n                    )\n                # Emit the delta for this segment of refusal\n                yield ResponseRefusalDeltaEvent(\n                    content_index=state.refusal_content_index_and_output[0],\n                    delta=delta.refusal,\n                    item_id=FAKE_RESPONSES_ID,\n                    output_index=0,\n                    type=\"response.refusal.delta\",\n                )\n                # Accumulate the refusal string in the output part\n                state.refusal_content_index_and_output[1].refusal += delta.refusal\n\n            # Handle tool calls\n            # Because we don't know the name of the function until the end of the stream, we'll\n            # save everything and yield events at the end\n            if delta.tool_calls:\n                for tc_delta in delta.tool_calls:\n                    if tc_delta.index not in state.function_calls:\n                        state.function_calls[tc_delta.index] = ResponseFunctionToolCall(\n                            id=FAKE_RESPONSES_ID,\n                            arguments=\"\",\n                            name=\"\",\n                            type=\"function_call\",\n                            call_id=\"\",\n                        )\n                    tc_function = tc_delta.function\n\n                    state.function_calls[tc_delta.index].arguments += (\n                        tc_function.arguments if tc_function else \"\"\n                    ) or \"\"\n                    state.function_calls[tc_delta.index].name += (\n                        tc_function.name if tc_function else \"\"\n                    ) or \"\"\n                    state.function_calls[tc_delta.index].call_id += tc_delta.id or \"\"\n\n        function_call_starting_index = 0\n        if state.text_content_index_and_output:\n            function_call_starting_index += 1\n            # Send end event for this content part\n            yield ResponseContentPartDoneEvent(\n                content_index=state.text_content_index_and_output[0],\n                item_id=FAKE_RESPONSES_ID,\n                output_index=0,\n                part=state.text_content_index_and_output[1],\n                type=\"response.content_part.done\",\n            )\n\n        if state.refusal_content_index_and_output:\n            function_call_starting_index += 1\n            # Send end event for this content part\n            yield ResponseContentPartDoneEvent(\n                content_index=state.refusal_content_index_and_output[0],\n                item_id=FAKE_RESPONSES_ID,\n                output_index=0,\n                part=state.refusal_content_index_and_output[1],\n                type=\"response.content_part.done\",\n            )\n\n        # Actually send events for the function calls\n        for function_call in state.function_calls.values():\n            # First, a ResponseOutputItemAdded for the function call\n            yield ResponseOutputItemAddedEvent(\n                item=ResponseFunctionToolCall(\n                    id=FAKE_RESPONSES_ID,\n                    call_id=function_call.call_id,\n                    arguments=function_call.arguments,\n                    name=function_call.name,\n                    type=\"function_call\",\n                ),\n                output_index=function_call_starting_index,\n                type=\"response.output_item.added\",\n            )\n            # Then, yield the args\n            yield ResponseFunctionCallArgumentsDeltaEvent(\n                delta=function_call.arguments,\n                item_id=FAKE_RESPONSES_ID,\n                output_index=function_call_starting_index,\n                type=\"response.function_call_arguments.delta\",\n            )\n            # Finally, the ResponseOutputItemDone\n            yield ResponseOutputItemDoneEvent(\n                item=ResponseFunctionToolCall(\n                    id=FAKE_RESPONSES_ID,\n                    call_id=function_call.call_id,\n                    arguments=function_call.arguments,\n                    name=function_call.name,\n                    type=\"function_call\",\n                ),\n                output_index=function_call_starting_index,\n                type=\"response.output_item.done\",\n            )\n\n        # Finally, send the Response completed event\n        outputs: list[ResponseOutputItem] = []\n        if state.text_content_index_and_output or state.refusal_content_index_and_output:\n            assistant_msg = ResponseOutputMessage(\n                id=FAKE_RESPONSES_ID,\n                content=[],\n                role=\"assistant\",\n                type=\"message\",\n                status=\"completed\",\n            )\n            if state.text_content_index_and_output:\n                assistant_msg.content.append(state.text_content_index_and_output[1])\n            if state.refusal_content_index_and_output:\n                assistant_msg.content.append(state.refusal_content_index_and_output[1])\n            outputs.append(assistant_msg)\n\n            # send a ResponseOutputItemDone for the assistant message\n            yield ResponseOutputItemDoneEvent(\n                item=assistant_msg,\n                output_index=0,\n                type=\"response.output_item.done\",\n            )\n\n        for function_call in state.function_calls.values():\n            outputs.append(function_call)\n\n        final_response = response.model_copy()\n        final_response.output = outputs\n        final_response.usage = (\n            ResponseUsage(\n                input_tokens=usage.prompt_tokens,\n                output_tokens=usage.completion_tokens,\n                total_tokens=usage.total_tokens,\n                output_tokens_details=OutputTokensDetails(\n                    reasoning_tokens=usage.completion_tokens_details.reasoning_tokens\n                    if usage.completion_tokens_details\n                    and usage.completion_tokens_details.reasoning_tokens\n                    else 0\n                ),\n            )\n            if usage\n            else None\n        )\n\n        yield ResponseCompletedEvent(\n            response=final_response,\n            type=\"response.completed\",\n        )\n        if tracing.include_data():\n            span_generation.span_data.output = [final_response.model_dump()]\n\n        if usage:\n            span_generation.span_data.usage = {\n                \"input_tokens\": usage.prompt_tokens,\n                \"output_tokens\": usage.completion_tokens,\n            }\n</code></pre>"},{"location":"ref/models/openai_chatcompletions/#agents.models.openai_chatcompletions._Converter","title":"_Converter","text":"Source code in <code>src/agents/models/openai_chatcompletions.py</code> <pre><code>class _Converter:\n    @classmethod\n    def convert_tool_choice(\n        cls, tool_choice: Literal[\"auto\", \"required\", \"none\"] | str | None\n    ) -&gt; ChatCompletionToolChoiceOptionParam | NotGiven:\n        if tool_choice is None:\n            return NOT_GIVEN\n        elif tool_choice == \"auto\":\n            return \"auto\"\n        elif tool_choice == \"required\":\n            return \"required\"\n        elif tool_choice == \"none\":\n            return \"none\"\n        else:\n            return {\n                \"type\": \"function\",\n                \"function\": {\n                    \"name\": tool_choice,\n                },\n            }\n\n    @classmethod\n    def convert_response_format(\n        cls, final_output_schema: AgentOutputSchema | None\n    ) -&gt; ResponseFormat | NotGiven:\n        if not final_output_schema or final_output_schema.is_plain_text():\n            return NOT_GIVEN\n\n        return {\n            \"type\": \"json_schema\",\n            \"json_schema\": {\n                \"name\": \"final_output\",\n                \"strict\": final_output_schema.strict_json_schema,\n                \"schema\": final_output_schema.json_schema(),\n            },\n        }\n\n    @classmethod\n    def message_to_output_items(cls, message: ChatCompletionMessage) -&gt; list[TResponseOutputItem]:\n        items: list[TResponseOutputItem] = []\n\n        message_item = ResponseOutputMessage(\n            id=FAKE_RESPONSES_ID,\n            content=[],\n            role=\"assistant\",\n            type=\"message\",\n            status=\"completed\",\n        )\n        if message.content:\n            message_item.content.append(\n                ResponseOutputText(text=message.content, type=\"output_text\", annotations=[])\n            )\n        if message.refusal:\n            message_item.content.append(\n                ResponseOutputRefusal(refusal=message.refusal, type=\"refusal\")\n            )\n        if message.audio:\n            raise AgentsException(\"Audio is not currently supported\")\n\n        if message_item.content:\n            items.append(message_item)\n\n        if message.tool_calls:\n            for tool_call in message.tool_calls:\n                items.append(\n                    ResponseFunctionToolCall(\n                        id=FAKE_RESPONSES_ID,\n                        call_id=tool_call.id,\n                        arguments=tool_call.function.arguments,\n                        name=tool_call.function.name,\n                        type=\"function_call\",\n                    )\n                )\n\n        return items\n\n    @classmethod\n    def maybe_easy_input_message(cls, item: Any) -&gt; EasyInputMessageParam | None:\n        if not isinstance(item, dict):\n            return None\n\n        keys = item.keys()\n        # EasyInputMessageParam only has these two keys\n        if keys != {\"content\", \"role\"}:\n            return None\n\n        role = item.get(\"role\", None)\n        if role not in (\"user\", \"assistant\", \"system\", \"developer\"):\n            return None\n\n        if \"content\" not in item:\n            return None\n\n        return cast(EasyInputMessageParam, item)\n\n    @classmethod\n    def maybe_input_message(cls, item: Any) -&gt; Message | None:\n        if (\n            isinstance(item, dict)\n            and item.get(\"type\") == \"message\"\n            and item.get(\"role\")\n            in (\n                \"user\",\n                \"system\",\n                \"developer\",\n            )\n        ):\n            return cast(Message, item)\n\n        return None\n\n    @classmethod\n    def maybe_file_search_call(cls, item: Any) -&gt; ResponseFileSearchToolCallParam | None:\n        if isinstance(item, dict) and item.get(\"type\") == \"file_search_call\":\n            return cast(ResponseFileSearchToolCallParam, item)\n        return None\n\n    @classmethod\n    def maybe_function_tool_call(cls, item: Any) -&gt; ResponseFunctionToolCallParam | None:\n        if isinstance(item, dict) and item.get(\"type\") == \"function_call\":\n            return cast(ResponseFunctionToolCallParam, item)\n        return None\n\n    @classmethod\n    def maybe_function_tool_call_output(\n        cls,\n        item: Any,\n    ) -&gt; FunctionCallOutput | None:\n        if isinstance(item, dict) and item.get(\"type\") == \"function_call_output\":\n            return cast(FunctionCallOutput, item)\n        return None\n\n    @classmethod\n    def maybe_item_reference(cls, item: Any) -&gt; ItemReference | None:\n        if isinstance(item, dict) and item.get(\"type\") == \"item_reference\":\n            return cast(ItemReference, item)\n        return None\n\n    @classmethod\n    def maybe_response_output_message(cls, item: Any) -&gt; ResponseOutputMessageParam | None:\n        # ResponseOutputMessage is only used for messages with role assistant\n        if (\n            isinstance(item, dict)\n            and item.get(\"type\") == \"message\"\n            and item.get(\"role\") == \"assistant\"\n        ):\n            return cast(ResponseOutputMessageParam, item)\n        return None\n\n    @classmethod\n    def extract_text_content(\n        cls, content: str | Iterable[ResponseInputContentParam]\n    ) -&gt; str | list[ChatCompletionContentPartTextParam]:\n        all_content = cls.extract_all_content(content)\n        if isinstance(all_content, str):\n            return all_content\n        out: list[ChatCompletionContentPartTextParam] = []\n        for c in all_content:\n            if c.get(\"type\") == \"text\":\n                out.append(cast(ChatCompletionContentPartTextParam, c))\n        return out\n\n    @classmethod\n    def extract_all_content(\n        cls, content: str | Iterable[ResponseInputContentParam]\n    ) -&gt; str | list[ChatCompletionContentPartParam]:\n        if isinstance(content, str):\n            return content\n        out: list[ChatCompletionContentPartParam] = []\n\n        for c in content:\n            if isinstance(c, dict) and c.get(\"type\") == \"input_text\":\n                casted_text_param = cast(ResponseInputTextParam, c)\n                out.append(\n                    ChatCompletionContentPartTextParam(\n                        type=\"text\",\n                        text=casted_text_param[\"text\"],\n                    )\n                )\n            elif isinstance(c, dict) and c.get(\"type\") == \"input_image\":\n                casted_image_param = cast(ResponseInputImageParam, c)\n                if \"image_url\" not in casted_image_param or not casted_image_param[\"image_url\"]:\n                    raise UserError(\n                        f\"Only image URLs are supported for input_image {casted_image_param}\"\n                    )\n                out.append(\n                    ChatCompletionContentPartImageParam(\n                        type=\"image_url\",\n                        image_url={\n                            \"url\": casted_image_param[\"image_url\"],\n                            \"detail\": casted_image_param[\"detail\"],\n                        },\n                    )\n                )\n            elif isinstance(c, dict) and c.get(\"type\") == \"input_file\":\n                raise UserError(f\"File uploads are not supported for chat completions {c}\")\n            else:\n                raise UserError(f\"Unknonw content: {c}\")\n        return out\n\n    @classmethod\n    def items_to_messages(\n        cls,\n        items: str | Iterable[TResponseInputItem],\n    ) -&gt; list[ChatCompletionMessageParam]:\n        \"\"\"\n        Convert a sequence of 'Item' objects into a list of ChatCompletionMessageParam.\n\n        Rules:\n        - EasyInputMessage or InputMessage (role=user) =&gt; ChatCompletionUserMessageParam\n        - EasyInputMessage or InputMessage (role=system) =&gt; ChatCompletionSystemMessageParam\n        - EasyInputMessage or InputMessage (role=developer) =&gt; ChatCompletionDeveloperMessageParam\n        - InputMessage (role=assistant) =&gt; Start or flush a ChatCompletionAssistantMessageParam\n        - response_output_message =&gt; Also produces/flushes a ChatCompletionAssistantMessageParam\n        - tool calls get attached to the *current* assistant message, or create one if none.\n        - tool outputs =&gt; ChatCompletionToolMessageParam\n        \"\"\"\n\n        if isinstance(items, str):\n            return [\n                ChatCompletionUserMessageParam(\n                    role=\"user\",\n                    content=items,\n                )\n            ]\n\n        result: list[ChatCompletionMessageParam] = []\n        current_assistant_msg: ChatCompletionAssistantMessageParam | None = None\n\n        def flush_assistant_message() -&gt; None:\n            nonlocal current_assistant_msg\n            if current_assistant_msg is not None:\n                # The API doesn't support empty arrays for tool_calls\n                if not current_assistant_msg.get(\"tool_calls\"):\n                    del current_assistant_msg[\"tool_calls\"]\n                result.append(current_assistant_msg)\n                current_assistant_msg = None\n\n        def ensure_assistant_message() -&gt; ChatCompletionAssistantMessageParam:\n            nonlocal current_assistant_msg\n            if current_assistant_msg is None:\n                current_assistant_msg = ChatCompletionAssistantMessageParam(role=\"assistant\")\n                current_assistant_msg[\"tool_calls\"] = []\n            return current_assistant_msg\n\n        for item in items:\n            # 1) Check easy input message\n            if easy_msg := cls.maybe_easy_input_message(item):\n                role = easy_msg[\"role\"]\n                content = easy_msg[\"content\"]\n\n                if role == \"user\":\n                    flush_assistant_message()\n                    msg_user: ChatCompletionUserMessageParam = {\n                        \"role\": \"user\",\n                        \"content\": cls.extract_all_content(content),\n                    }\n                    result.append(msg_user)\n                elif role == \"system\":\n                    flush_assistant_message()\n                    msg_system: ChatCompletionSystemMessageParam = {\n                        \"role\": \"system\",\n                        \"content\": cls.extract_text_content(content),\n                    }\n                    result.append(msg_system)\n                elif role == \"developer\":\n                    flush_assistant_message()\n                    msg_developer: ChatCompletionDeveloperMessageParam = {\n                        \"role\": \"developer\",\n                        \"content\": cls.extract_text_content(content),\n                    }\n                    result.append(msg_developer)\n                elif role == \"assistant\":\n                    flush_assistant_message()\n                    msg_assistant: ChatCompletionAssistantMessageParam = {\n                        \"role\": \"assistant\",\n                        \"content\": cls.extract_text_content(content),\n                    }\n                    result.append(msg_assistant)\n                else:\n                    raise UserError(f\"Unexpected role in easy_input_message: {role}\")\n\n            # 2) Check input message\n            elif in_msg := cls.maybe_input_message(item):\n                role = in_msg[\"role\"]\n                content = in_msg[\"content\"]\n                flush_assistant_message()\n\n                if role == \"user\":\n                    msg_user = {\n                        \"role\": \"user\",\n                        \"content\": cls.extract_all_content(content),\n                    }\n                    result.append(msg_user)\n                elif role == \"system\":\n                    msg_system = {\n                        \"role\": \"system\",\n                        \"content\": cls.extract_text_content(content),\n                    }\n                    result.append(msg_system)\n                elif role == \"developer\":\n                    msg_developer = {\n                        \"role\": \"developer\",\n                        \"content\": cls.extract_text_content(content),\n                    }\n                    result.append(msg_developer)\n                else:\n                    raise UserError(f\"Unexpected role in input_message: {role}\")\n\n            # 3) response output message =&gt; assistant\n            elif resp_msg := cls.maybe_response_output_message(item):\n                flush_assistant_message()\n                new_asst = ChatCompletionAssistantMessageParam(role=\"assistant\")\n                contents = resp_msg[\"content\"]\n\n                text_segments = []\n                for c in contents:\n                    if c[\"type\"] == \"output_text\":\n                        text_segments.append(c[\"text\"])\n                    elif c[\"type\"] == \"refusal\":\n                        new_asst[\"refusal\"] = c[\"refusal\"]\n                    elif c[\"type\"] == \"output_audio\":\n                        # Can't handle this, b/c chat completions expects an ID which we dont have\n                        raise UserError(\n                            f\"Only audio IDs are supported for chat completions, but got: {c}\"\n                        )\n                    else:\n                        raise UserError(f\"Unknown content type in ResponseOutputMessage: {c}\")\n\n                if text_segments:\n                    combined = \"\\n\".join(text_segments)\n                    new_asst[\"content\"] = combined\n\n                new_asst[\"tool_calls\"] = []\n                current_assistant_msg = new_asst\n\n            # 4) function/file-search calls =&gt; attach to assistant\n            elif file_search := cls.maybe_file_search_call(item):\n                asst = ensure_assistant_message()\n                tool_calls = list(asst.get(\"tool_calls\", []))\n                new_tool_call = ChatCompletionMessageToolCallParam(\n                    id=file_search[\"id\"],\n                    type=\"function\",\n                    function={\n                        \"name\": \"file_search_call\",\n                        \"arguments\": json.dumps(\n                            {\n                                \"queries\": file_search.get(\"queries\", []),\n                                \"status\": file_search.get(\"status\"),\n                            }\n                        ),\n                    },\n                )\n                tool_calls.append(new_tool_call)\n                asst[\"tool_calls\"] = tool_calls\n\n            elif func_call := cls.maybe_function_tool_call(item):\n                asst = ensure_assistant_message()\n                tool_calls = list(asst.get(\"tool_calls\", []))\n                new_tool_call = ChatCompletionMessageToolCallParam(\n                    id=func_call[\"call_id\"],\n                    type=\"function\",\n                    function={\n                        \"name\": func_call[\"name\"],\n                        \"arguments\": func_call[\"arguments\"],\n                    },\n                )\n                tool_calls.append(new_tool_call)\n                asst[\"tool_calls\"] = tool_calls\n            # 5) function call output =&gt; tool message\n            elif func_output := cls.maybe_function_tool_call_output(item):\n                flush_assistant_message()\n                msg: ChatCompletionToolMessageParam = {\n                    \"role\": \"tool\",\n                    \"tool_call_id\": func_output[\"call_id\"],\n                    \"content\": func_output[\"output\"],\n                }\n                result.append(msg)\n\n            # 6) item reference =&gt; handle or raise\n            elif item_ref := cls.maybe_item_reference(item):\n                raise UserError(\n                    f\"Encountered an item_reference, which is not supported: {item_ref}\"\n                )\n\n            # 7) If we haven't recognized it =&gt; fail or ignore\n            else:\n                raise UserError(f\"Unhandled item type or structure: {item}\")\n\n        flush_assistant_message()\n        return result\n</code></pre>"},{"location":"ref/models/openai_chatcompletions/#agents.models.openai_chatcompletions._Converter.items_to_messages","title":"items_to_messages  <code>classmethod</code>","text":"<pre><code>items_to_messages(\n    items: str | Iterable[TResponseInputItem],\n) -&gt; list[ChatCompletionMessageParam]\n</code></pre> <p>Convert a sequence of 'Item' objects into a list of ChatCompletionMessageParam.</p> <p>Rules: - EasyInputMessage or InputMessage (role=user) =&gt; ChatCompletionUserMessageParam - EasyInputMessage or InputMessage (role=system) =&gt; ChatCompletionSystemMessageParam - EasyInputMessage or InputMessage (role=developer) =&gt; ChatCompletionDeveloperMessageParam - InputMessage (role=assistant) =&gt; Start or flush a ChatCompletionAssistantMessageParam - response_output_message =&gt; Also produces/flushes a ChatCompletionAssistantMessageParam - tool calls get attached to the current assistant message, or create one if none. - tool outputs =&gt; ChatCompletionToolMessageParam</p> Source code in <code>src/agents/models/openai_chatcompletions.py</code> <pre><code>@classmethod\ndef items_to_messages(\n    cls,\n    items: str | Iterable[TResponseInputItem],\n) -&gt; list[ChatCompletionMessageParam]:\n    \"\"\"\n    Convert a sequence of 'Item' objects into a list of ChatCompletionMessageParam.\n\n    Rules:\n    - EasyInputMessage or InputMessage (role=user) =&gt; ChatCompletionUserMessageParam\n    - EasyInputMessage or InputMessage (role=system) =&gt; ChatCompletionSystemMessageParam\n    - EasyInputMessage or InputMessage (role=developer) =&gt; ChatCompletionDeveloperMessageParam\n    - InputMessage (role=assistant) =&gt; Start or flush a ChatCompletionAssistantMessageParam\n    - response_output_message =&gt; Also produces/flushes a ChatCompletionAssistantMessageParam\n    - tool calls get attached to the *current* assistant message, or create one if none.\n    - tool outputs =&gt; ChatCompletionToolMessageParam\n    \"\"\"\n\n    if isinstance(items, str):\n        return [\n            ChatCompletionUserMessageParam(\n                role=\"user\",\n                content=items,\n            )\n        ]\n\n    result: list[ChatCompletionMessageParam] = []\n    current_assistant_msg: ChatCompletionAssistantMessageParam | None = None\n\n    def flush_assistant_message() -&gt; None:\n        nonlocal current_assistant_msg\n        if current_assistant_msg is not None:\n            # The API doesn't support empty arrays for tool_calls\n            if not current_assistant_msg.get(\"tool_calls\"):\n                del current_assistant_msg[\"tool_calls\"]\n            result.append(current_assistant_msg)\n            current_assistant_msg = None\n\n    def ensure_assistant_message() -&gt; ChatCompletionAssistantMessageParam:\n        nonlocal current_assistant_msg\n        if current_assistant_msg is None:\n            current_assistant_msg = ChatCompletionAssistantMessageParam(role=\"assistant\")\n            current_assistant_msg[\"tool_calls\"] = []\n        return current_assistant_msg\n\n    for item in items:\n        # 1) Check easy input message\n        if easy_msg := cls.maybe_easy_input_message(item):\n            role = easy_msg[\"role\"]\n            content = easy_msg[\"content\"]\n\n            if role == \"user\":\n                flush_assistant_message()\n                msg_user: ChatCompletionUserMessageParam = {\n                    \"role\": \"user\",\n                    \"content\": cls.extract_all_content(content),\n                }\n                result.append(msg_user)\n            elif role == \"system\":\n                flush_assistant_message()\n                msg_system: ChatCompletionSystemMessageParam = {\n                    \"role\": \"system\",\n                    \"content\": cls.extract_text_content(content),\n                }\n                result.append(msg_system)\n            elif role == \"developer\":\n                flush_assistant_message()\n                msg_developer: ChatCompletionDeveloperMessageParam = {\n                    \"role\": \"developer\",\n                    \"content\": cls.extract_text_content(content),\n                }\n                result.append(msg_developer)\n            elif role == \"assistant\":\n                flush_assistant_message()\n                msg_assistant: ChatCompletionAssistantMessageParam = {\n                    \"role\": \"assistant\",\n                    \"content\": cls.extract_text_content(content),\n                }\n                result.append(msg_assistant)\n            else:\n                raise UserError(f\"Unexpected role in easy_input_message: {role}\")\n\n        # 2) Check input message\n        elif in_msg := cls.maybe_input_message(item):\n            role = in_msg[\"role\"]\n            content = in_msg[\"content\"]\n            flush_assistant_message()\n\n            if role == \"user\":\n                msg_user = {\n                    \"role\": \"user\",\n                    \"content\": cls.extract_all_content(content),\n                }\n                result.append(msg_user)\n            elif role == \"system\":\n                msg_system = {\n                    \"role\": \"system\",\n                    \"content\": cls.extract_text_content(content),\n                }\n                result.append(msg_system)\n            elif role == \"developer\":\n                msg_developer = {\n                    \"role\": \"developer\",\n                    \"content\": cls.extract_text_content(content),\n                }\n                result.append(msg_developer)\n            else:\n                raise UserError(f\"Unexpected role in input_message: {role}\")\n\n        # 3) response output message =&gt; assistant\n        elif resp_msg := cls.maybe_response_output_message(item):\n            flush_assistant_message()\n            new_asst = ChatCompletionAssistantMessageParam(role=\"assistant\")\n            contents = resp_msg[\"content\"]\n\n            text_segments = []\n            for c in contents:\n                if c[\"type\"] == \"output_text\":\n                    text_segments.append(c[\"text\"])\n                elif c[\"type\"] == \"refusal\":\n                    new_asst[\"refusal\"] = c[\"refusal\"]\n                elif c[\"type\"] == \"output_audio\":\n                    # Can't handle this, b/c chat completions expects an ID which we dont have\n                    raise UserError(\n                        f\"Only audio IDs are supported for chat completions, but got: {c}\"\n                    )\n                else:\n                    raise UserError(f\"Unknown content type in ResponseOutputMessage: {c}\")\n\n            if text_segments:\n                combined = \"\\n\".join(text_segments)\n                new_asst[\"content\"] = combined\n\n            new_asst[\"tool_calls\"] = []\n            current_assistant_msg = new_asst\n\n        # 4) function/file-search calls =&gt; attach to assistant\n        elif file_search := cls.maybe_file_search_call(item):\n            asst = ensure_assistant_message()\n            tool_calls = list(asst.get(\"tool_calls\", []))\n            new_tool_call = ChatCompletionMessageToolCallParam(\n                id=file_search[\"id\"],\n                type=\"function\",\n                function={\n                    \"name\": \"file_search_call\",\n                    \"arguments\": json.dumps(\n                        {\n                            \"queries\": file_search.get(\"queries\", []),\n                            \"status\": file_search.get(\"status\"),\n                        }\n                    ),\n                },\n            )\n            tool_calls.append(new_tool_call)\n            asst[\"tool_calls\"] = tool_calls\n\n        elif func_call := cls.maybe_function_tool_call(item):\n            asst = ensure_assistant_message()\n            tool_calls = list(asst.get(\"tool_calls\", []))\n            new_tool_call = ChatCompletionMessageToolCallParam(\n                id=func_call[\"call_id\"],\n                type=\"function\",\n                function={\n                    \"name\": func_call[\"name\"],\n                    \"arguments\": func_call[\"arguments\"],\n                },\n            )\n            tool_calls.append(new_tool_call)\n            asst[\"tool_calls\"] = tool_calls\n        # 5) function call output =&gt; tool message\n        elif func_output := cls.maybe_function_tool_call_output(item):\n            flush_assistant_message()\n            msg: ChatCompletionToolMessageParam = {\n                \"role\": \"tool\",\n                \"tool_call_id\": func_output[\"call_id\"],\n                \"content\": func_output[\"output\"],\n            }\n            result.append(msg)\n\n        # 6) item reference =&gt; handle or raise\n        elif item_ref := cls.maybe_item_reference(item):\n            raise UserError(\n                f\"Encountered an item_reference, which is not supported: {item_ref}\"\n            )\n\n        # 7) If we haven't recognized it =&gt; fail or ignore\n        else:\n            raise UserError(f\"Unhandled item type or structure: {item}\")\n\n    flush_assistant_message()\n    return result\n</code></pre>"},{"location":"ref/models/openai_responses/","title":"<code>OpenAI Responses model</code>","text":""},{"location":"ref/models/openai_responses/#agents.models.openai_responses.OpenAIResponsesModel","title":"OpenAIResponsesModel","text":"<p>               Bases: <code>Model</code></p> <p>Implementation of <code>Model</code> that uses the OpenAI Responses API.</p> Source code in <code>src/agents/models/openai_responses.py</code> <pre><code>class OpenAIResponsesModel(Model):\n    \"\"\"\n    Implementation of `Model` that uses the OpenAI Responses API.\n    \"\"\"\n\n    def __init__(\n        self,\n        model: str | ChatModel,\n        openai_client: AsyncOpenAI,\n    ) -&gt; None:\n        self.model = model\n        self._client = openai_client\n\n    def _non_null_or_not_given(self, value: Any) -&gt; Any:\n        return value if value is not None else NOT_GIVEN\n\n    async def get_response(\n        self,\n        system_instructions: str | None,\n        input: str | list[TResponseInputItem],\n        model_settings: ModelSettings,\n        tools: list[Tool],\n        output_schema: AgentOutputSchema | None,\n        handoffs: list[Handoff],\n        tracing: ModelTracing,\n    ) -&gt; ModelResponse:\n        with response_span(disabled=tracing.is_disabled()) as span_response:\n            try:\n                response = await self._fetch_response(\n                    system_instructions,\n                    input,\n                    model_settings,\n                    tools,\n                    output_schema,\n                    handoffs,\n                    stream=False,\n                )\n\n                if _debug.DONT_LOG_MODEL_DATA:\n                    logger.debug(\"LLM responsed\")\n                else:\n                    logger.debug(\n                        \"LLM resp:\\n\"\n                        f\"{json.dumps([x.model_dump() for x in response.output], indent=2)}\\n\"\n                    )\n\n                usage = (\n                    Usage(\n                        requests=1,\n                        input_tokens=response.usage.input_tokens,\n                        output_tokens=response.usage.output_tokens,\n                        total_tokens=response.usage.total_tokens,\n                    )\n                    if response.usage\n                    else Usage()\n                )\n\n                if tracing.include_data():\n                    span_response.span_data.response = response\n                    span_response.span_data.input = input\n            except Exception as e:\n                span_response.set_error(\n                    SpanError(\n                        message=\"Error getting response\",\n                        data={\n                            \"error\": str(e) if tracing.include_data() else e.__class__.__name__,\n                        },\n                    )\n                )\n                request_id = e.request_id if isinstance(e, APIStatusError) else None\n                logger.error(f\"Error getting response: {e}. (request_id: {request_id})\")\n                raise\n\n        return ModelResponse(\n            output=response.output,\n            usage=usage,\n            referenceable_id=response.id,\n        )\n\n    async def stream_response(\n        self,\n        system_instructions: str | None,\n        input: str | list[TResponseInputItem],\n        model_settings: ModelSettings,\n        tools: list[Tool],\n        output_schema: AgentOutputSchema | None,\n        handoffs: list[Handoff],\n        tracing: ModelTracing,\n    ) -&gt; AsyncIterator[ResponseStreamEvent]:\n        \"\"\"\n        Yields a partial message as it is generated, as well as the usage information.\n        \"\"\"\n        with response_span(disabled=tracing.is_disabled()) as span_response:\n            try:\n                stream = await self._fetch_response(\n                    system_instructions,\n                    input,\n                    model_settings,\n                    tools,\n                    output_schema,\n                    handoffs,\n                    stream=True,\n                )\n\n                final_response: Response | None = None\n\n                async for chunk in stream:\n                    if isinstance(chunk, ResponseCompletedEvent):\n                        final_response = chunk.response\n                    yield chunk\n\n                if final_response and tracing.include_data():\n                    span_response.span_data.response = final_response\n                    span_response.span_data.input = input\n\n            except Exception as e:\n                span_response.set_error(\n                    SpanError(\n                        message=\"Error streaming response\",\n                        data={\n                            \"error\": str(e) if tracing.include_data() else e.__class__.__name__,\n                        },\n                    )\n                )\n                logger.error(f\"Error streaming response: {e}\")\n                raise\n\n    @overload\n    async def _fetch_response(\n        self,\n        system_instructions: str | None,\n        input: str | list[TResponseInputItem],\n        model_settings: ModelSettings,\n        tools: list[Tool],\n        output_schema: AgentOutputSchema | None,\n        handoffs: list[Handoff],\n        stream: Literal[True],\n    ) -&gt; AsyncStream[ResponseStreamEvent]: ...\n\n    @overload\n    async def _fetch_response(\n        self,\n        system_instructions: str | None,\n        input: str | list[TResponseInputItem],\n        model_settings: ModelSettings,\n        tools: list[Tool],\n        output_schema: AgentOutputSchema | None,\n        handoffs: list[Handoff],\n        stream: Literal[False],\n    ) -&gt; Response: ...\n\n    async def _fetch_response(\n        self,\n        system_instructions: str | None,\n        input: str | list[TResponseInputItem],\n        model_settings: ModelSettings,\n        tools: list[Tool],\n        output_schema: AgentOutputSchema | None,\n        handoffs: list[Handoff],\n        stream: Literal[True] | Literal[False] = False,\n    ) -&gt; Response | AsyncStream[ResponseStreamEvent]:\n        list_input = ItemHelpers.input_to_new_input_list(input)\n\n        parallel_tool_calls = (\n            True if model_settings.parallel_tool_calls and tools and len(tools) &gt; 0 else NOT_GIVEN\n        )\n\n        tool_choice = Converter.convert_tool_choice(model_settings.tool_choice)\n        converted_tools = Converter.convert_tools(tools, handoffs)\n        response_format = Converter.get_response_format(output_schema)\n\n        if _debug.DONT_LOG_MODEL_DATA:\n            logger.debug(\"Calling LLM\")\n        else:\n            logger.debug(\n                f\"Calling LLM {self.model} with input:\\n\"\n                f\"{json.dumps(list_input, indent=2)}\\n\"\n                f\"Tools:\\n{json.dumps(converted_tools.tools, indent=2)}\\n\"\n                f\"Stream: {stream}\\n\"\n                f\"Tool choice: {tool_choice}\\n\"\n                f\"Response format: {response_format}\\n\"\n            )\n\n        return await self._client.responses.create(\n            instructions=self._non_null_or_not_given(system_instructions),\n            model=self.model,\n            input=list_input,\n            include=converted_tools.includes,\n            tools=converted_tools.tools,\n            temperature=self._non_null_or_not_given(model_settings.temperature),\n            top_p=self._non_null_or_not_given(model_settings.top_p),\n            truncation=self._non_null_or_not_given(model_settings.truncation),\n            max_output_tokens=self._non_null_or_not_given(model_settings.max_tokens),\n            tool_choice=tool_choice,\n            parallel_tool_calls=parallel_tool_calls,\n            stream=stream,\n            extra_headers=_HEADERS,\n            text=response_format,\n        )\n\n    def _get_client(self) -&gt; AsyncOpenAI:\n        if self._client is None:\n            self._client = AsyncOpenAI()\n        return self._client\n</code></pre>"},{"location":"ref/models/openai_responses/#agents.models.openai_responses.OpenAIResponsesModel.stream_response","title":"stream_response  <code>async</code>","text":"<pre><code>stream_response(\n    system_instructions: str | None,\n    input: str | list[TResponseInputItem],\n    model_settings: ModelSettings,\n    tools: list[Tool],\n    output_schema: AgentOutputSchema | None,\n    handoffs: list[Handoff],\n    tracing: ModelTracing,\n) -&gt; AsyncIterator[ResponseStreamEvent]\n</code></pre> <p>Yields a partial message as it is generated, as well as the usage information.</p> Source code in <code>src/agents/models/openai_responses.py</code> <pre><code>async def stream_response(\n    self,\n    system_instructions: str | None,\n    input: str | list[TResponseInputItem],\n    model_settings: ModelSettings,\n    tools: list[Tool],\n    output_schema: AgentOutputSchema | None,\n    handoffs: list[Handoff],\n    tracing: ModelTracing,\n) -&gt; AsyncIterator[ResponseStreamEvent]:\n    \"\"\"\n    Yields a partial message as it is generated, as well as the usage information.\n    \"\"\"\n    with response_span(disabled=tracing.is_disabled()) as span_response:\n        try:\n            stream = await self._fetch_response(\n                system_instructions,\n                input,\n                model_settings,\n                tools,\n                output_schema,\n                handoffs,\n                stream=True,\n            )\n\n            final_response: Response | None = None\n\n            async for chunk in stream:\n                if isinstance(chunk, ResponseCompletedEvent):\n                    final_response = chunk.response\n                yield chunk\n\n            if final_response and tracing.include_data():\n                span_response.span_data.response = final_response\n                span_response.span_data.input = input\n\n        except Exception as e:\n            span_response.set_error(\n                SpanError(\n                    message=\"Error streaming response\",\n                    data={\n                        \"error\": str(e) if tracing.include_data() else e.__class__.__name__,\n                    },\n                )\n            )\n            logger.error(f\"Error streaming response: {e}\")\n            raise\n</code></pre>"},{"location":"ref/models/openai_responses/#agents.models.openai_responses.Converter","title":"Converter","text":"Source code in <code>src/agents/models/openai_responses.py</code> <pre><code>class Converter:\n    @classmethod\n    def convert_tool_choice(\n        cls, tool_choice: Literal[\"auto\", \"required\", \"none\"] | str | None\n    ) -&gt; response_create_params.ToolChoice | NotGiven:\n        if tool_choice is None:\n            return NOT_GIVEN\n        elif tool_choice == \"required\":\n            return \"required\"\n        elif tool_choice == \"auto\":\n            return \"auto\"\n        elif tool_choice == \"none\":\n            return \"none\"\n        elif tool_choice == \"file_search\":\n            return {\n                \"type\": \"file_search\",\n            }\n        elif tool_choice == \"web_search_preview\":\n            return {\n                \"type\": \"web_search_preview\",\n            }\n        elif tool_choice == \"computer_use_preview\":\n            return {\n                \"type\": \"computer_use_preview\",\n            }\n        else:\n            return {\n                \"type\": \"function\",\n                \"name\": tool_choice,\n            }\n\n    @classmethod\n    def get_response_format(\n        cls, output_schema: AgentOutputSchema | None\n    ) -&gt; ResponseTextConfigParam | NotGiven:\n        if output_schema is None or output_schema.is_plain_text():\n            return NOT_GIVEN\n        else:\n            return {\n                \"format\": {\n                    \"type\": \"json_schema\",\n                    \"name\": \"final_output\",\n                    \"schema\": output_schema.json_schema(),\n                    \"strict\": output_schema.strict_json_schema,\n                }\n            }\n\n    @classmethod\n    def convert_tools(\n        cls,\n        tools: list[Tool],\n        handoffs: list[Handoff[Any]],\n    ) -&gt; ConvertedTools:\n        converted_tools: list[ToolParam] = []\n        includes: list[IncludeLiteral] = []\n\n        computer_tools = [tool for tool in tools if isinstance(tool, ComputerTool)]\n        if len(computer_tools) &gt; 1:\n            raise UserError(f\"You can only provide one computer tool. Got {len(computer_tools)}\")\n\n        for tool in tools:\n            converted_tool, include = cls._convert_tool(tool)\n            converted_tools.append(converted_tool)\n            if include:\n                includes.append(include)\n\n        for handoff in handoffs:\n            converted_tools.append(cls._convert_handoff_tool(handoff))\n\n        return ConvertedTools(tools=converted_tools, includes=includes)\n\n    @classmethod\n    def _convert_tool(cls, tool: Tool) -&gt; tuple[ToolParam, IncludeLiteral | None]:\n        \"\"\"Returns converted tool and includes\"\"\"\n\n        if isinstance(tool, FunctionTool):\n            converted_tool: ToolParam = {\n                \"name\": tool.name,\n                \"parameters\": tool.params_json_schema,\n                \"strict\": tool.strict_json_schema,\n                \"type\": \"function\",\n                \"description\": tool.description,\n            }\n            includes: IncludeLiteral | None = None\n        elif isinstance(tool, WebSearchTool):\n            ws: WebSearchToolParam = {\n                \"type\": \"web_search_preview\",\n                \"user_location\": tool.user_location,\n                \"search_context_size\": tool.search_context_size,\n            }\n            converted_tool = ws\n            includes = None\n        elif isinstance(tool, FileSearchTool):\n            converted_tool = {\n                \"type\": \"file_search\",\n                \"vector_store_ids\": tool.vector_store_ids,\n            }\n            if tool.max_num_results:\n                converted_tool[\"max_num_results\"] = tool.max_num_results\n            if tool.ranking_options:\n                converted_tool[\"ranking_options\"] = tool.ranking_options\n            if tool.filters:\n                converted_tool[\"filters\"] = tool.filters\n\n            includes = \"file_search_call.results\" if tool.include_search_results else None\n        elif isinstance(tool, ComputerTool):\n            converted_tool = {\n                \"type\": \"computer_use_preview\",\n                \"environment\": tool.computer.environment,\n                \"display_width\": tool.computer.dimensions[0],\n                \"display_height\": tool.computer.dimensions[1],\n            }\n            includes = None\n\n        else:\n            raise UserError(f\"Unknown tool type: {type(tool)}, tool\")\n\n        return converted_tool, includes\n\n    @classmethod\n    def _convert_handoff_tool(cls, handoff: Handoff) -&gt; ToolParam:\n        return {\n            \"name\": handoff.tool_name,\n            \"parameters\": handoff.input_json_schema,\n            \"strict\": handoff.strict_json_schema,\n            \"type\": \"function\",\n            \"description\": handoff.tool_description,\n        }\n</code></pre>"},{"location":"ref/models/openai_responses/#agents.models.openai_responses.Converter._convert_tool","title":"_convert_tool  <code>classmethod</code>","text":"<pre><code>_convert_tool(\n    tool: Tool,\n) -&gt; tuple[ToolParam, IncludeLiteral | None]\n</code></pre> <p>Returns converted tool and includes</p> Source code in <code>src/agents/models/openai_responses.py</code> <pre><code>@classmethod\ndef _convert_tool(cls, tool: Tool) -&gt; tuple[ToolParam, IncludeLiteral | None]:\n    \"\"\"Returns converted tool and includes\"\"\"\n\n    if isinstance(tool, FunctionTool):\n        converted_tool: ToolParam = {\n            \"name\": tool.name,\n            \"parameters\": tool.params_json_schema,\n            \"strict\": tool.strict_json_schema,\n            \"type\": \"function\",\n            \"description\": tool.description,\n        }\n        includes: IncludeLiteral | None = None\n    elif isinstance(tool, WebSearchTool):\n        ws: WebSearchToolParam = {\n            \"type\": \"web_search_preview\",\n            \"user_location\": tool.user_location,\n            \"search_context_size\": tool.search_context_size,\n        }\n        converted_tool = ws\n        includes = None\n    elif isinstance(tool, FileSearchTool):\n        converted_tool = {\n            \"type\": \"file_search\",\n            \"vector_store_ids\": tool.vector_store_ids,\n        }\n        if tool.max_num_results:\n            converted_tool[\"max_num_results\"] = tool.max_num_results\n        if tool.ranking_options:\n            converted_tool[\"ranking_options\"] = tool.ranking_options\n        if tool.filters:\n            converted_tool[\"filters\"] = tool.filters\n\n        includes = \"file_search_call.results\" if tool.include_search_results else None\n    elif isinstance(tool, ComputerTool):\n        converted_tool = {\n            \"type\": \"computer_use_preview\",\n            \"environment\": tool.computer.environment,\n            \"display_width\": tool.computer.dimensions[0],\n            \"display_height\": tool.computer.dimensions[1],\n        }\n        includes = None\n\n    else:\n        raise UserError(f\"Unknown tool type: {type(tool)}, tool\")\n\n    return converted_tool, includes\n</code></pre>"},{"location":"ref/tracing/","title":"Tracing module","text":""},{"location":"ref/tracing/#agents.tracing.TracingProcessor","title":"TracingProcessor","text":"<p>               Bases: <code>ABC</code></p> <p>Interface for processing spans.</p> Source code in <code>src/agents/tracing/processor_interface.py</code> <pre><code>class TracingProcessor(abc.ABC):\n    \"\"\"Interface for processing spans.\"\"\"\n\n    @abc.abstractmethod\n    def on_trace_start(self, trace: \"Trace\") -&gt; None:\n        \"\"\"Called when a trace is started.\n\n        Args:\n            trace: The trace that started.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def on_trace_end(self, trace: \"Trace\") -&gt; None:\n        \"\"\"Called when a trace is finished.\n\n        Args:\n            trace: The trace that started.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def on_span_start(self, span: \"Span[Any]\") -&gt; None:\n        \"\"\"Called when a span is started.\n\n        Args:\n            span: The span that started.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def on_span_end(self, span: \"Span[Any]\") -&gt; None:\n        \"\"\"Called when a span is finished. Should not block or raise exceptions.\n\n        Args:\n            span: The span that finished.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def shutdown(self) -&gt; None:\n        \"\"\"Called when the application stops.\"\"\"\n        pass\n\n    @abc.abstractmethod\n    def force_flush(self) -&gt; None:\n        \"\"\"Forces an immediate flush of all queued spans/traces.\"\"\"\n        pass\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.TracingProcessor.on_trace_start","title":"on_trace_start  <code>abstractmethod</code>","text":"<pre><code>on_trace_start(trace: Trace) -&gt; None\n</code></pre> <p>Called when a trace is started.</p> <p>Parameters:</p> Name Type Description Default <code>trace</code> <code>Trace</code> <p>The trace that started.</p> required Source code in <code>src/agents/tracing/processor_interface.py</code> <pre><code>@abc.abstractmethod\ndef on_trace_start(self, trace: \"Trace\") -&gt; None:\n    \"\"\"Called when a trace is started.\n\n    Args:\n        trace: The trace that started.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.TracingProcessor.on_trace_end","title":"on_trace_end  <code>abstractmethod</code>","text":"<pre><code>on_trace_end(trace: Trace) -&gt; None\n</code></pre> <p>Called when a trace is finished.</p> <p>Parameters:</p> Name Type Description Default <code>trace</code> <code>Trace</code> <p>The trace that started.</p> required Source code in <code>src/agents/tracing/processor_interface.py</code> <pre><code>@abc.abstractmethod\ndef on_trace_end(self, trace: \"Trace\") -&gt; None:\n    \"\"\"Called when a trace is finished.\n\n    Args:\n        trace: The trace that started.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.TracingProcessor.on_span_start","title":"on_span_start  <code>abstractmethod</code>","text":"<pre><code>on_span_start(span: Span[Any]) -&gt; None\n</code></pre> <p>Called when a span is started.</p> <p>Parameters:</p> Name Type Description Default <code>span</code> <code>Span[Any]</code> <p>The span that started.</p> required Source code in <code>src/agents/tracing/processor_interface.py</code> <pre><code>@abc.abstractmethod\ndef on_span_start(self, span: \"Span[Any]\") -&gt; None:\n    \"\"\"Called when a span is started.\n\n    Args:\n        span: The span that started.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.TracingProcessor.on_span_end","title":"on_span_end  <code>abstractmethod</code>","text":"<pre><code>on_span_end(span: Span[Any]) -&gt; None\n</code></pre> <p>Called when a span is finished. Should not block or raise exceptions.</p> <p>Parameters:</p> Name Type Description Default <code>span</code> <code>Span[Any]</code> <p>The span that finished.</p> required Source code in <code>src/agents/tracing/processor_interface.py</code> <pre><code>@abc.abstractmethod\ndef on_span_end(self, span: \"Span[Any]\") -&gt; None:\n    \"\"\"Called when a span is finished. Should not block or raise exceptions.\n\n    Args:\n        span: The span that finished.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.TracingProcessor.shutdown","title":"shutdown  <code>abstractmethod</code>","text":"<pre><code>shutdown() -&gt; None\n</code></pre> <p>Called when the application stops.</p> Source code in <code>src/agents/tracing/processor_interface.py</code> <pre><code>@abc.abstractmethod\ndef shutdown(self) -&gt; None:\n    \"\"\"Called when the application stops.\"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.TracingProcessor.force_flush","title":"force_flush  <code>abstractmethod</code>","text":"<pre><code>force_flush() -&gt; None\n</code></pre> <p>Forces an immediate flush of all queued spans/traces.</p> Source code in <code>src/agents/tracing/processor_interface.py</code> <pre><code>@abc.abstractmethod\ndef force_flush(self) -&gt; None:\n    \"\"\"Forces an immediate flush of all queued spans/traces.\"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.Span","title":"Span","text":"<p>               Bases: <code>ABC</code>, <code>Generic[TSpanData]</code></p> Source code in <code>src/agents/tracing/spans.py</code> <pre><code>class Span(abc.ABC, Generic[TSpanData]):\n    @property\n    @abc.abstractmethod\n    def trace_id(self) -&gt; str:\n        pass\n\n    @property\n    @abc.abstractmethod\n    def span_id(self) -&gt; str:\n        pass\n\n    @property\n    @abc.abstractmethod\n    def span_data(self) -&gt; TSpanData:\n        pass\n\n    @abc.abstractmethod\n    def start(self, mark_as_current: bool = False):\n        \"\"\"\n        Start the span.\n\n        Args:\n            mark_as_current: If true, the span will be marked as the current span.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def finish(self, reset_current: bool = False) -&gt; None:\n        \"\"\"\n        Finish the span.\n\n        Args:\n            reset_current: If true, the span will be reset as the current span.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def __enter__(self) -&gt; Span[TSpanData]:\n        pass\n\n    @abc.abstractmethod\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        pass\n\n    @property\n    @abc.abstractmethod\n    def parent_id(self) -&gt; str | None:\n        pass\n\n    @abc.abstractmethod\n    def set_error(self, error: SpanError) -&gt; None:\n        pass\n\n    @property\n    @abc.abstractmethod\n    def error(self) -&gt; SpanError | None:\n        pass\n\n    @abc.abstractmethod\n    def export(self) -&gt; dict[str, Any] | None:\n        pass\n\n    @property\n    @abc.abstractmethod\n    def started_at(self) -&gt; str | None:\n        pass\n\n    @property\n    @abc.abstractmethod\n    def ended_at(self) -&gt; str | None:\n        pass\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.Span.start","title":"start  <code>abstractmethod</code>","text":"<pre><code>start(mark_as_current: bool = False)\n</code></pre> <p>Start the span.</p> <p>Parameters:</p> Name Type Description Default <code>mark_as_current</code> <code>bool</code> <p>If true, the span will be marked as the current span.</p> <code>False</code> Source code in <code>src/agents/tracing/spans.py</code> <pre><code>@abc.abstractmethod\ndef start(self, mark_as_current: bool = False):\n    \"\"\"\n    Start the span.\n\n    Args:\n        mark_as_current: If true, the span will be marked as the current span.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.Span.finish","title":"finish  <code>abstractmethod</code>","text":"<pre><code>finish(reset_current: bool = False) -&gt; None\n</code></pre> <p>Finish the span.</p> <p>Parameters:</p> Name Type Description Default <code>reset_current</code> <code>bool</code> <p>If true, the span will be reset as the current span.</p> <code>False</code> Source code in <code>src/agents/tracing/spans.py</code> <pre><code>@abc.abstractmethod\ndef finish(self, reset_current: bool = False) -&gt; None:\n    \"\"\"\n    Finish the span.\n\n    Args:\n        reset_current: If true, the span will be reset as the current span.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.Trace","title":"Trace","text":"<p>A trace is the root level object that tracing creates. It represents a logical \"workflow\".</p> Source code in <code>src/agents/tracing/traces.py</code> <pre><code>class Trace:\n    \"\"\"\n    A trace is the root level object that tracing creates. It represents a logical \"workflow\".\n    \"\"\"\n\n    @abc.abstractmethod\n    def __enter__(self) -&gt; Trace:\n        pass\n\n    @abc.abstractmethod\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        pass\n\n    @abc.abstractmethod\n    def start(self, mark_as_current: bool = False):\n        \"\"\"\n        Start the trace.\n\n        Args:\n            mark_as_current: If true, the trace will be marked as the current trace.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def finish(self, reset_current: bool = False):\n        \"\"\"\n        Finish the trace.\n\n        Args:\n            reset_current: If true, the trace will be reset as the current trace.\n        \"\"\"\n        pass\n\n    @property\n    @abc.abstractmethod\n    def trace_id(self) -&gt; str:\n        \"\"\"\n        The trace ID.\n        \"\"\"\n        pass\n\n    @property\n    @abc.abstractmethod\n    def name(self) -&gt; str:\n        \"\"\"\n        The name of the workflow being traced.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def export(self) -&gt; dict[str, Any] | None:\n        \"\"\"\n        Export the trace as a dictionary.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.Trace.trace_id","title":"trace_id  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>trace_id: str\n</code></pre> <p>The trace ID.</p>"},{"location":"ref/tracing/#agents.tracing.Trace.name","title":"name  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the workflow being traced.</p>"},{"location":"ref/tracing/#agents.tracing.Trace.start","title":"start  <code>abstractmethod</code>","text":"<pre><code>start(mark_as_current: bool = False)\n</code></pre> <p>Start the trace.</p> <p>Parameters:</p> Name Type Description Default <code>mark_as_current</code> <code>bool</code> <p>If true, the trace will be marked as the current trace.</p> <code>False</code> Source code in <code>src/agents/tracing/traces.py</code> <pre><code>@abc.abstractmethod\ndef start(self, mark_as_current: bool = False):\n    \"\"\"\n    Start the trace.\n\n    Args:\n        mark_as_current: If true, the trace will be marked as the current trace.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.Trace.finish","title":"finish  <code>abstractmethod</code>","text":"<pre><code>finish(reset_current: bool = False)\n</code></pre> <p>Finish the trace.</p> <p>Parameters:</p> Name Type Description Default <code>reset_current</code> <code>bool</code> <p>If true, the trace will be reset as the current trace.</p> <code>False</code> Source code in <code>src/agents/tracing/traces.py</code> <pre><code>@abc.abstractmethod\ndef finish(self, reset_current: bool = False):\n    \"\"\"\n    Finish the trace.\n\n    Args:\n        reset_current: If true, the trace will be reset as the current trace.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.Trace.export","title":"export  <code>abstractmethod</code>","text":"<pre><code>export() -&gt; dict[str, Any] | None\n</code></pre> <p>Export the trace as a dictionary.</p> Source code in <code>src/agents/tracing/traces.py</code> <pre><code>@abc.abstractmethod\ndef export(self) -&gt; dict[str, Any] | None:\n    \"\"\"\n    Export the trace as a dictionary.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.agent_span","title":"agent_span","text":"<pre><code>agent_span(\n    name: str,\n    handoffs: list[str] | None = None,\n    tools: list[str] | None = None,\n    output_type: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[AgentSpanData]\n</code></pre> <p>Create a new agent span. The span will not be started automatically, you should either do <code>with agent_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the agent.</p> required <code>handoffs</code> <code>list[str] | None</code> <p>Optional list of agent names to which this agent could hand off control.</p> <code>None</code> <code>tools</code> <code>list[str] | None</code> <p>Optional list of tool names available to this agent.</p> <code>None</code> <code>output_type</code> <code>str | None</code> <p>Optional name of the output type produced by the agent.</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> <p>Returns:</p> Type Description <code>Span[AgentSpanData]</code> <p>The newly created agent span.</p> Source code in <code>src/agents/tracing/create.py</code> <pre><code>def agent_span(\n    name: str,\n    handoffs: list[str] | None = None,\n    tools: list[str] | None = None,\n    output_type: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[AgentSpanData]:\n    \"\"\"Create a new agent span. The span will not be started automatically, you should either do\n    `with agent_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    Args:\n        name: The name of the agent.\n        handoffs: Optional list of agent names to which this agent could hand off control.\n        tools: Optional list of tool names available to this agent.\n        output_type: Optional name of the output type produced by the agent.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n\n    Returns:\n        The newly created agent span.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=AgentSpanData(name=name, handoffs=handoffs, tools=tools, output_type=output_type),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.custom_span","title":"custom_span","text":"<pre><code>custom_span(\n    name: str,\n    data: dict[str, Any] | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[CustomSpanData]\n</code></pre> <p>Create a new custom span, to which you can add your own metadata. The span will not be started automatically, you should either do <code>with custom_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the custom span.</p> required <code>data</code> <code>dict[str, Any] | None</code> <p>Arbitrary structured data to associate with the span.</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> <p>Returns:</p> Type Description <code>Span[CustomSpanData]</code> <p>The newly created custom span.</p> Source code in <code>src/agents/tracing/create.py</code> <pre><code>def custom_span(\n    name: str,\n    data: dict[str, Any] | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[CustomSpanData]:\n    \"\"\"Create a new custom span, to which you can add your own metadata. The span will not be\n    started automatically, you should either do `with custom_span() ...` or call\n    `span.start()` + `span.finish()` manually.\n\n    Args:\n        name: The name of the custom span.\n        data: Arbitrary structured data to associate with the span.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n\n    Returns:\n        The newly created custom span.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=CustomSpanData(name=name, data=data or {}),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.function_span","title":"function_span","text":"<pre><code>function_span(\n    name: str,\n    input: str | None = None,\n    output: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[FunctionSpanData]\n</code></pre> <p>Create a new function span. The span will not be started automatically, you should either do <code>with function_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the function.</p> required <code>input</code> <code>str | None</code> <p>The input to the function.</p> <code>None</code> <code>output</code> <code>str | None</code> <p>The output of the function.</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> <p>Returns:</p> Type Description <code>Span[FunctionSpanData]</code> <p>The newly created function span.</p> Source code in <code>src/agents/tracing/create.py</code> <pre><code>def function_span(\n    name: str,\n    input: str | None = None,\n    output: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[FunctionSpanData]:\n    \"\"\"Create a new function span. The span will not be started automatically, you should either do\n    `with function_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    Args:\n        name: The name of the function.\n        input: The input to the function.\n        output: The output of the function.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n\n    Returns:\n        The newly created function span.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=FunctionSpanData(name=name, input=input, output=output),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.generation_span","title":"generation_span","text":"<pre><code>generation_span(\n    input: Sequence[Mapping[str, Any]] | None = None,\n    output: Sequence[Mapping[str, Any]] | None = None,\n    model: str | None = None,\n    model_config: Mapping[str, Any] | None = None,\n    usage: dict[str, Any] | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[GenerationSpanData]\n</code></pre> <p>Create a new generation span. The span will not be started automatically, you should either do <code>with generation_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>This span captures the details of a model generation, including the input message sequence, any generated outputs, the model name and configuration, and usage data. If you only need to capture a model response identifier, use <code>response_span()</code> instead.</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>Sequence[Mapping[str, Any]] | None</code> <p>The sequence of input messages sent to the model.</p> <code>None</code> <code>output</code> <code>Sequence[Mapping[str, Any]] | None</code> <p>The sequence of output messages received from the model.</p> <code>None</code> <code>model</code> <code>str | None</code> <p>The model identifier used for the generation.</p> <code>None</code> <code>model_config</code> <code>Mapping[str, Any] | None</code> <p>The model configuration (hyperparameters) used.</p> <code>None</code> <code>usage</code> <code>dict[str, Any] | None</code> <p>A dictionary of usage information (input tokens, output tokens, etc.).</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> <p>Returns:</p> Type Description <code>Span[GenerationSpanData]</code> <p>The newly created generation span.</p> Source code in <code>src/agents/tracing/create.py</code> <pre><code>def generation_span(\n    input: Sequence[Mapping[str, Any]] | None = None,\n    output: Sequence[Mapping[str, Any]] | None = None,\n    model: str | None = None,\n    model_config: Mapping[str, Any] | None = None,\n    usage: dict[str, Any] | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[GenerationSpanData]:\n    \"\"\"Create a new generation span. The span will not be started automatically, you should either\n    do `with generation_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    This span captures the details of a model generation, including the\n    input message sequence, any generated outputs, the model name and\n    configuration, and usage data. If you only need to capture a model\n    response identifier, use `response_span()` instead.\n\n    Args:\n        input: The sequence of input messages sent to the model.\n        output: The sequence of output messages received from the model.\n        model: The model identifier used for the generation.\n        model_config: The model configuration (hyperparameters) used.\n        usage: A dictionary of usage information (input tokens, output tokens, etc.).\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n\n    Returns:\n        The newly created generation span.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=GenerationSpanData(\n            input=input, output=output, model=model, model_config=model_config, usage=usage\n        ),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.get_current_span","title":"get_current_span","text":"<pre><code>get_current_span() -&gt; Span[Any] | None\n</code></pre> <p>Returns the currently active span, if present.</p> Source code in <code>src/agents/tracing/create.py</code> <pre><code>def get_current_span() -&gt; Span[Any] | None:\n    \"\"\"Returns the currently active span, if present.\"\"\"\n    return GLOBAL_TRACE_PROVIDER.get_current_span()\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.get_current_trace","title":"get_current_trace","text":"<pre><code>get_current_trace() -&gt; Trace | None\n</code></pre> <p>Returns the currently active trace, if present.</p> Source code in <code>src/agents/tracing/create.py</code> <pre><code>def get_current_trace() -&gt; Trace | None:\n    \"\"\"Returns the currently active trace, if present.\"\"\"\n    return GLOBAL_TRACE_PROVIDER.get_current_trace()\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.guardrail_span","title":"guardrail_span","text":"<pre><code>guardrail_span(\n    name: str,\n    triggered: bool = False,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[GuardrailSpanData]\n</code></pre> <p>Create a new guardrail span. The span will not be started automatically, you should either do <code>with guardrail_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the guardrail.</p> required <code>triggered</code> <code>bool</code> <p>Whether the guardrail was triggered.</p> <code>False</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> Source code in <code>src/agents/tracing/create.py</code> <pre><code>def guardrail_span(\n    name: str,\n    triggered: bool = False,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[GuardrailSpanData]:\n    \"\"\"Create a new guardrail span. The span will not be started automatically, you should either\n    do `with guardrail_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    Args:\n        name: The name of the guardrail.\n        triggered: Whether the guardrail was triggered.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=GuardrailSpanData(name=name, triggered=triggered),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.handoff_span","title":"handoff_span","text":"<pre><code>handoff_span(\n    from_agent: str | None = None,\n    to_agent: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[HandoffSpanData]\n</code></pre> <p>Create a new handoff span. The span will not be started automatically, you should either do <code>with handoff_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>from_agent</code> <code>str | None</code> <p>The name of the agent that is handing off.</p> <code>None</code> <code>to_agent</code> <code>str | None</code> <p>The name of the agent that is receiving the handoff.</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> <p>Returns:</p> Type Description <code>Span[HandoffSpanData]</code> <p>The newly created handoff span.</p> Source code in <code>src/agents/tracing/create.py</code> <pre><code>def handoff_span(\n    from_agent: str | None = None,\n    to_agent: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[HandoffSpanData]:\n    \"\"\"Create a new handoff span. The span will not be started automatically, you should either do\n    `with handoff_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    Args:\n        from_agent: The name of the agent that is handing off.\n        to_agent: The name of the agent that is receiving the handoff.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n\n    Returns:\n        The newly created handoff span.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=HandoffSpanData(from_agent=from_agent, to_agent=to_agent),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.response_span","title":"response_span","text":"<pre><code>response_span(\n    response: Response | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[ResponseSpanData]\n</code></pre> <p>Create a new response span. The span will not be started automatically, you should either do <code>with response_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Response | None</code> <p>The OpenAI Response object.</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> Source code in <code>src/agents/tracing/create.py</code> <pre><code>def response_span(\n    response: Response | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[ResponseSpanData]:\n    \"\"\"Create a new response span. The span will not be started automatically, you should either do\n    `with response_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    Args:\n        response: The OpenAI Response object.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=ResponseSpanData(response=response),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.trace","title":"trace","text":"<pre><code>trace(\n    workflow_name: str,\n    trace_id: str | None = None,\n    group_id: str | None = None,\n    metadata: dict[str, Any] | None = None,\n    disabled: bool = False,\n) -&gt; Trace\n</code></pre> <p>Create a new trace. The trace will not be started automatically; you should either use it as a context manager (<code>with trace(...):</code>) or call <code>trace.start()</code> + <code>trace.finish()</code> manually.</p> <p>In addition to the workflow name and optional grouping identifier, you can provide an arbitrary metadata dictionary to attach additional user-defined information to the trace.</p> <p>Parameters:</p> Name Type Description Default <code>workflow_name</code> <code>str</code> <p>The name of the logical app or workflow. For example, you might provide \"code_bot\" for a coding agent, or \"customer_support_agent\" for a customer support agent.</p> required <code>trace_id</code> <code>str | None</code> <p>The ID of the trace. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_trace_id()</code> to generate a trace ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>group_id</code> <code>str | None</code> <p>Optional grouping identifier to link multiple traces from the same conversation or process. For instance, you might use a chat thread ID.</p> <code>None</code> <code>metadata</code> <code>dict[str, Any] | None</code> <p>Optional dictionary of additional metadata to attach to the trace.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Trace but the Trace will not be recorded. This will not be checked if there's an existing trace and <code>even_if_trace_running</code> is True.</p> <code>False</code> <p>Returns:</p> Type Description <code>Trace</code> <p>The newly created trace object.</p> Source code in <code>src/agents/tracing/create.py</code> <pre><code>def trace(\n    workflow_name: str,\n    trace_id: str | None = None,\n    group_id: str | None = None,\n    metadata: dict[str, Any] | None = None,\n    disabled: bool = False,\n) -&gt; Trace:\n    \"\"\"\n    Create a new trace. The trace will not be started automatically; you should either use\n    it as a context manager (`with trace(...):`) or call `trace.start()` + `trace.finish()`\n    manually.\n\n    In addition to the workflow name and optional grouping identifier, you can provide\n    an arbitrary metadata dictionary to attach additional user-defined information to\n    the trace.\n\n    Args:\n        workflow_name: The name of the logical app or workflow. For example, you might provide\n            \"code_bot\" for a coding agent, or \"customer_support_agent\" for a customer support agent.\n        trace_id: The ID of the trace. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_trace_id()` to generate a trace ID, to guarantee that IDs are\n            correctly formatted.\n        group_id: Optional grouping identifier to link multiple traces from the same conversation\n            or process. For instance, you might use a chat thread ID.\n        metadata: Optional dictionary of additional metadata to attach to the trace.\n        disabled: If True, we will return a Trace but the Trace will not be recorded. This will\n            not be checked if there's an existing trace and `even_if_trace_running` is True.\n\n    Returns:\n        The newly created trace object.\n    \"\"\"\n    current_trace = GLOBAL_TRACE_PROVIDER.get_current_trace()\n    if current_trace:\n        logger.warning(\n            \"Trace already exists. Creating a new trace, but this is probably a mistake.\"\n        )\n\n    return GLOBAL_TRACE_PROVIDER.create_trace(\n        name=workflow_name,\n        trace_id=trace_id,\n        group_id=group_id,\n        metadata=metadata,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.gen_span_id","title":"gen_span_id","text":"<pre><code>gen_span_id() -&gt; str\n</code></pre> <p>Generates a new span ID.</p> Source code in <code>src/agents/tracing/util.py</code> <pre><code>def gen_span_id() -&gt; str:\n    \"\"\"Generates a new span ID.\"\"\"\n    return f\"span_{uuid.uuid4().hex[:24]}\"\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.gen_trace_id","title":"gen_trace_id","text":"<pre><code>gen_trace_id() -&gt; str\n</code></pre> <p>Generates a new trace ID.</p> Source code in <code>src/agents/tracing/util.py</code> <pre><code>def gen_trace_id() -&gt; str:\n    \"\"\"Generates a new trace ID.\"\"\"\n    return f\"trace_{uuid.uuid4().hex}\"\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.add_trace_processor","title":"add_trace_processor","text":"<pre><code>add_trace_processor(\n    span_processor: TracingProcessor,\n) -&gt; None\n</code></pre> <p>Adds a new trace processor. This processor will receive all traces/spans.</p> Source code in <code>src/agents/tracing/__init__.py</code> <pre><code>def add_trace_processor(span_processor: TracingProcessor) -&gt; None:\n    \"\"\"\n    Adds a new trace processor. This processor will receive all traces/spans.\n    \"\"\"\n    GLOBAL_TRACE_PROVIDER.register_processor(span_processor)\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.set_trace_processors","title":"set_trace_processors","text":"<pre><code>set_trace_processors(\n    processors: list[TracingProcessor],\n) -&gt; None\n</code></pre> <p>Set the list of trace processors. This will replace the current list of processors.</p> Source code in <code>src/agents/tracing/__init__.py</code> <pre><code>def set_trace_processors(processors: list[TracingProcessor]) -&gt; None:\n    \"\"\"\n    Set the list of trace processors. This will replace the current list of processors.\n    \"\"\"\n    GLOBAL_TRACE_PROVIDER.set_processors(processors)\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.set_tracing_disabled","title":"set_tracing_disabled","text":"<pre><code>set_tracing_disabled(disabled: bool) -&gt; None\n</code></pre> <p>Set whether tracing is globally disabled.</p> Source code in <code>src/agents/tracing/__init__.py</code> <pre><code>def set_tracing_disabled(disabled: bool) -&gt; None:\n    \"\"\"\n    Set whether tracing is globally disabled.\n    \"\"\"\n    GLOBAL_TRACE_PROVIDER.set_disabled(disabled)\n</code></pre>"},{"location":"ref/tracing/#agents.tracing.set_tracing_export_api_key","title":"set_tracing_export_api_key","text":"<pre><code>set_tracing_export_api_key(api_key: str) -&gt; None\n</code></pre> <p>Set the OpenAI API key for the backend exporter.</p> Source code in <code>src/agents/tracing/__init__.py</code> <pre><code>def set_tracing_export_api_key(api_key: str) -&gt; None:\n    \"\"\"\n    Set the OpenAI API key for the backend exporter.\n    \"\"\"\n    default_exporter().set_api_key(api_key)\n</code></pre>"},{"location":"ref/tracing/create/","title":"<code>Creating traces/spans</code>","text":""},{"location":"ref/tracing/create/#agents.tracing.create.trace","title":"trace","text":"<pre><code>trace(\n    workflow_name: str,\n    trace_id: str | None = None,\n    group_id: str | None = None,\n    metadata: dict[str, Any] | None = None,\n    disabled: bool = False,\n) -&gt; Trace\n</code></pre> <p>Create a new trace. The trace will not be started automatically; you should either use it as a context manager (<code>with trace(...):</code>) or call <code>trace.start()</code> + <code>trace.finish()</code> manually.</p> <p>In addition to the workflow name and optional grouping identifier, you can provide an arbitrary metadata dictionary to attach additional user-defined information to the trace.</p> <p>Parameters:</p> Name Type Description Default <code>workflow_name</code> <code>str</code> <p>The name of the logical app or workflow. For example, you might provide \"code_bot\" for a coding agent, or \"customer_support_agent\" for a customer support agent.</p> required <code>trace_id</code> <code>str | None</code> <p>The ID of the trace. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_trace_id()</code> to generate a trace ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>group_id</code> <code>str | None</code> <p>Optional grouping identifier to link multiple traces from the same conversation or process. For instance, you might use a chat thread ID.</p> <code>None</code> <code>metadata</code> <code>dict[str, Any] | None</code> <p>Optional dictionary of additional metadata to attach to the trace.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Trace but the Trace will not be recorded. This will not be checked if there's an existing trace and <code>even_if_trace_running</code> is True.</p> <code>False</code> <p>Returns:</p> Type Description <code>Trace</code> <p>The newly created trace object.</p> Source code in <code>src/agents/tracing/create.py</code> <pre><code>def trace(\n    workflow_name: str,\n    trace_id: str | None = None,\n    group_id: str | None = None,\n    metadata: dict[str, Any] | None = None,\n    disabled: bool = False,\n) -&gt; Trace:\n    \"\"\"\n    Create a new trace. The trace will not be started automatically; you should either use\n    it as a context manager (`with trace(...):`) or call `trace.start()` + `trace.finish()`\n    manually.\n\n    In addition to the workflow name and optional grouping identifier, you can provide\n    an arbitrary metadata dictionary to attach additional user-defined information to\n    the trace.\n\n    Args:\n        workflow_name: The name of the logical app or workflow. For example, you might provide\n            \"code_bot\" for a coding agent, or \"customer_support_agent\" for a customer support agent.\n        trace_id: The ID of the trace. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_trace_id()` to generate a trace ID, to guarantee that IDs are\n            correctly formatted.\n        group_id: Optional grouping identifier to link multiple traces from the same conversation\n            or process. For instance, you might use a chat thread ID.\n        metadata: Optional dictionary of additional metadata to attach to the trace.\n        disabled: If True, we will return a Trace but the Trace will not be recorded. This will\n            not be checked if there's an existing trace and `even_if_trace_running` is True.\n\n    Returns:\n        The newly created trace object.\n    \"\"\"\n    current_trace = GLOBAL_TRACE_PROVIDER.get_current_trace()\n    if current_trace:\n        logger.warning(\n            \"Trace already exists. Creating a new trace, but this is probably a mistake.\"\n        )\n\n    return GLOBAL_TRACE_PROVIDER.create_trace(\n        name=workflow_name,\n        trace_id=trace_id,\n        group_id=group_id,\n        metadata=metadata,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/create/#agents.tracing.create.get_current_trace","title":"get_current_trace","text":"<pre><code>get_current_trace() -&gt; Trace | None\n</code></pre> <p>Returns the currently active trace, if present.</p> Source code in <code>src/agents/tracing/create.py</code> <pre><code>def get_current_trace() -&gt; Trace | None:\n    \"\"\"Returns the currently active trace, if present.\"\"\"\n    return GLOBAL_TRACE_PROVIDER.get_current_trace()\n</code></pre>"},{"location":"ref/tracing/create/#agents.tracing.create.get_current_span","title":"get_current_span","text":"<pre><code>get_current_span() -&gt; Span[Any] | None\n</code></pre> <p>Returns the currently active span, if present.</p> Source code in <code>src/agents/tracing/create.py</code> <pre><code>def get_current_span() -&gt; Span[Any] | None:\n    \"\"\"Returns the currently active span, if present.\"\"\"\n    return GLOBAL_TRACE_PROVIDER.get_current_span()\n</code></pre>"},{"location":"ref/tracing/create/#agents.tracing.create.agent_span","title":"agent_span","text":"<pre><code>agent_span(\n    name: str,\n    handoffs: list[str] | None = None,\n    tools: list[str] | None = None,\n    output_type: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[AgentSpanData]\n</code></pre> <p>Create a new agent span. The span will not be started automatically, you should either do <code>with agent_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the agent.</p> required <code>handoffs</code> <code>list[str] | None</code> <p>Optional list of agent names to which this agent could hand off control.</p> <code>None</code> <code>tools</code> <code>list[str] | None</code> <p>Optional list of tool names available to this agent.</p> <code>None</code> <code>output_type</code> <code>str | None</code> <p>Optional name of the output type produced by the agent.</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> <p>Returns:</p> Type Description <code>Span[AgentSpanData]</code> <p>The newly created agent span.</p> Source code in <code>src/agents/tracing/create.py</code> <pre><code>def agent_span(\n    name: str,\n    handoffs: list[str] | None = None,\n    tools: list[str] | None = None,\n    output_type: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[AgentSpanData]:\n    \"\"\"Create a new agent span. The span will not be started automatically, you should either do\n    `with agent_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    Args:\n        name: The name of the agent.\n        handoffs: Optional list of agent names to which this agent could hand off control.\n        tools: Optional list of tool names available to this agent.\n        output_type: Optional name of the output type produced by the agent.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n\n    Returns:\n        The newly created agent span.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=AgentSpanData(name=name, handoffs=handoffs, tools=tools, output_type=output_type),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/create/#agents.tracing.create.function_span","title":"function_span","text":"<pre><code>function_span(\n    name: str,\n    input: str | None = None,\n    output: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[FunctionSpanData]\n</code></pre> <p>Create a new function span. The span will not be started automatically, you should either do <code>with function_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the function.</p> required <code>input</code> <code>str | None</code> <p>The input to the function.</p> <code>None</code> <code>output</code> <code>str | None</code> <p>The output of the function.</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> <p>Returns:</p> Type Description <code>Span[FunctionSpanData]</code> <p>The newly created function span.</p> Source code in <code>src/agents/tracing/create.py</code> <pre><code>def function_span(\n    name: str,\n    input: str | None = None,\n    output: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[FunctionSpanData]:\n    \"\"\"Create a new function span. The span will not be started automatically, you should either do\n    `with function_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    Args:\n        name: The name of the function.\n        input: The input to the function.\n        output: The output of the function.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n\n    Returns:\n        The newly created function span.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=FunctionSpanData(name=name, input=input, output=output),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/create/#agents.tracing.create.generation_span","title":"generation_span","text":"<pre><code>generation_span(\n    input: Sequence[Mapping[str, Any]] | None = None,\n    output: Sequence[Mapping[str, Any]] | None = None,\n    model: str | None = None,\n    model_config: Mapping[str, Any] | None = None,\n    usage: dict[str, Any] | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[GenerationSpanData]\n</code></pre> <p>Create a new generation span. The span will not be started automatically, you should either do <code>with generation_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>This span captures the details of a model generation, including the input message sequence, any generated outputs, the model name and configuration, and usage data. If you only need to capture a model response identifier, use <code>response_span()</code> instead.</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>Sequence[Mapping[str, Any]] | None</code> <p>The sequence of input messages sent to the model.</p> <code>None</code> <code>output</code> <code>Sequence[Mapping[str, Any]] | None</code> <p>The sequence of output messages received from the model.</p> <code>None</code> <code>model</code> <code>str | None</code> <p>The model identifier used for the generation.</p> <code>None</code> <code>model_config</code> <code>Mapping[str, Any] | None</code> <p>The model configuration (hyperparameters) used.</p> <code>None</code> <code>usage</code> <code>dict[str, Any] | None</code> <p>A dictionary of usage information (input tokens, output tokens, etc.).</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> <p>Returns:</p> Type Description <code>Span[GenerationSpanData]</code> <p>The newly created generation span.</p> Source code in <code>src/agents/tracing/create.py</code> <pre><code>def generation_span(\n    input: Sequence[Mapping[str, Any]] | None = None,\n    output: Sequence[Mapping[str, Any]] | None = None,\n    model: str | None = None,\n    model_config: Mapping[str, Any] | None = None,\n    usage: dict[str, Any] | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[GenerationSpanData]:\n    \"\"\"Create a new generation span. The span will not be started automatically, you should either\n    do `with generation_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    This span captures the details of a model generation, including the\n    input message sequence, any generated outputs, the model name and\n    configuration, and usage data. If you only need to capture a model\n    response identifier, use `response_span()` instead.\n\n    Args:\n        input: The sequence of input messages sent to the model.\n        output: The sequence of output messages received from the model.\n        model: The model identifier used for the generation.\n        model_config: The model configuration (hyperparameters) used.\n        usage: A dictionary of usage information (input tokens, output tokens, etc.).\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n\n    Returns:\n        The newly created generation span.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=GenerationSpanData(\n            input=input, output=output, model=model, model_config=model_config, usage=usage\n        ),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/create/#agents.tracing.create.response_span","title":"response_span","text":"<pre><code>response_span(\n    response: Response | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[ResponseSpanData]\n</code></pre> <p>Create a new response span. The span will not be started automatically, you should either do <code>with response_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Response | None</code> <p>The OpenAI Response object.</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> Source code in <code>src/agents/tracing/create.py</code> <pre><code>def response_span(\n    response: Response | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[ResponseSpanData]:\n    \"\"\"Create a new response span. The span will not be started automatically, you should either do\n    `with response_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    Args:\n        response: The OpenAI Response object.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=ResponseSpanData(response=response),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/create/#agents.tracing.create.handoff_span","title":"handoff_span","text":"<pre><code>handoff_span(\n    from_agent: str | None = None,\n    to_agent: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[HandoffSpanData]\n</code></pre> <p>Create a new handoff span. The span will not be started automatically, you should either do <code>with handoff_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>from_agent</code> <code>str | None</code> <p>The name of the agent that is handing off.</p> <code>None</code> <code>to_agent</code> <code>str | None</code> <p>The name of the agent that is receiving the handoff.</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> <p>Returns:</p> Type Description <code>Span[HandoffSpanData]</code> <p>The newly created handoff span.</p> Source code in <code>src/agents/tracing/create.py</code> <pre><code>def handoff_span(\n    from_agent: str | None = None,\n    to_agent: str | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[HandoffSpanData]:\n    \"\"\"Create a new handoff span. The span will not be started automatically, you should either do\n    `with handoff_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    Args:\n        from_agent: The name of the agent that is handing off.\n        to_agent: The name of the agent that is receiving the handoff.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n\n    Returns:\n        The newly created handoff span.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=HandoffSpanData(from_agent=from_agent, to_agent=to_agent),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/create/#agents.tracing.create.custom_span","title":"custom_span","text":"<pre><code>custom_span(\n    name: str,\n    data: dict[str, Any] | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[CustomSpanData]\n</code></pre> <p>Create a new custom span, to which you can add your own metadata. The span will not be started automatically, you should either do <code>with custom_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the custom span.</p> required <code>data</code> <code>dict[str, Any] | None</code> <p>Arbitrary structured data to associate with the span.</p> <code>None</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> <p>Returns:</p> Type Description <code>Span[CustomSpanData]</code> <p>The newly created custom span.</p> Source code in <code>src/agents/tracing/create.py</code> <pre><code>def custom_span(\n    name: str,\n    data: dict[str, Any] | None = None,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[CustomSpanData]:\n    \"\"\"Create a new custom span, to which you can add your own metadata. The span will not be\n    started automatically, you should either do `with custom_span() ...` or call\n    `span.start()` + `span.finish()` manually.\n\n    Args:\n        name: The name of the custom span.\n        data: Arbitrary structured data to associate with the span.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n\n    Returns:\n        The newly created custom span.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=CustomSpanData(name=name, data=data or {}),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/create/#agents.tracing.create.guardrail_span","title":"guardrail_span","text":"<pre><code>guardrail_span(\n    name: str,\n    triggered: bool = False,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[GuardrailSpanData]\n</code></pre> <p>Create a new guardrail span. The span will not be started automatically, you should either do <code>with guardrail_span() ...</code> or call <code>span.start()</code> + <code>span.finish()</code> manually.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the guardrail.</p> required <code>triggered</code> <code>bool</code> <p>Whether the guardrail was triggered.</p> <code>False</code> <code>span_id</code> <code>str | None</code> <p>The ID of the span. Optional. If not provided, we will generate an ID. We recommend using <code>util.gen_span_id()</code> to generate a span ID, to guarantee that IDs are correctly formatted.</p> <code>None</code> <code>parent</code> <code>Trace | Span[Any] | None</code> <p>The parent span or trace. If not provided, we will automatically use the current trace/span as the parent.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>If True, we will return a Span but the Span will not be recorded.</p> <code>False</code> Source code in <code>src/agents/tracing/create.py</code> <pre><code>def guardrail_span(\n    name: str,\n    triggered: bool = False,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[GuardrailSpanData]:\n    \"\"\"Create a new guardrail span. The span will not be started automatically, you should either\n    do `with guardrail_span() ...` or call `span.start()` + `span.finish()` manually.\n\n    Args:\n        name: The name of the guardrail.\n        triggered: Whether the guardrail was triggered.\n        span_id: The ID of the span. Optional. If not provided, we will generate an ID. We\n            recommend using `util.gen_span_id()` to generate a span ID, to guarantee that IDs are\n            correctly formatted.\n        parent: The parent span or trace. If not provided, we will automatically use the current\n            trace/span as the parent.\n        disabled: If True, we will return a Span but the Span will not be recorded.\n    \"\"\"\n    return GLOBAL_TRACE_PROVIDER.create_span(\n        span_data=GuardrailSpanData(name=name, triggered=triggered),\n        span_id=span_id,\n        parent=parent,\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"ref/tracing/processor_interface/","title":"<code>Processor interface</code>","text":""},{"location":"ref/tracing/processor_interface/#agents.tracing.processor_interface.TracingProcessor","title":"TracingProcessor","text":"<p>               Bases: <code>ABC</code></p> <p>Interface for processing spans.</p> Source code in <code>src/agents/tracing/processor_interface.py</code> <pre><code>class TracingProcessor(abc.ABC):\n    \"\"\"Interface for processing spans.\"\"\"\n\n    @abc.abstractmethod\n    def on_trace_start(self, trace: \"Trace\") -&gt; None:\n        \"\"\"Called when a trace is started.\n\n        Args:\n            trace: The trace that started.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def on_trace_end(self, trace: \"Trace\") -&gt; None:\n        \"\"\"Called when a trace is finished.\n\n        Args:\n            trace: The trace that started.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def on_span_start(self, span: \"Span[Any]\") -&gt; None:\n        \"\"\"Called when a span is started.\n\n        Args:\n            span: The span that started.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def on_span_end(self, span: \"Span[Any]\") -&gt; None:\n        \"\"\"Called when a span is finished. Should not block or raise exceptions.\n\n        Args:\n            span: The span that finished.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def shutdown(self) -&gt; None:\n        \"\"\"Called when the application stops.\"\"\"\n        pass\n\n    @abc.abstractmethod\n    def force_flush(self) -&gt; None:\n        \"\"\"Forces an immediate flush of all queued spans/traces.\"\"\"\n        pass\n</code></pre>"},{"location":"ref/tracing/processor_interface/#agents.tracing.processor_interface.TracingProcessor.on_trace_start","title":"on_trace_start  <code>abstractmethod</code>","text":"<pre><code>on_trace_start(trace: Trace) -&gt; None\n</code></pre> <p>Called when a trace is started.</p> <p>Parameters:</p> Name Type Description Default <code>trace</code> <code>Trace</code> <p>The trace that started.</p> required Source code in <code>src/agents/tracing/processor_interface.py</code> <pre><code>@abc.abstractmethod\ndef on_trace_start(self, trace: \"Trace\") -&gt; None:\n    \"\"\"Called when a trace is started.\n\n    Args:\n        trace: The trace that started.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/processor_interface/#agents.tracing.processor_interface.TracingProcessor.on_trace_end","title":"on_trace_end  <code>abstractmethod</code>","text":"<pre><code>on_trace_end(trace: Trace) -&gt; None\n</code></pre> <p>Called when a trace is finished.</p> <p>Parameters:</p> Name Type Description Default <code>trace</code> <code>Trace</code> <p>The trace that started.</p> required Source code in <code>src/agents/tracing/processor_interface.py</code> <pre><code>@abc.abstractmethod\ndef on_trace_end(self, trace: \"Trace\") -&gt; None:\n    \"\"\"Called when a trace is finished.\n\n    Args:\n        trace: The trace that started.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/processor_interface/#agents.tracing.processor_interface.TracingProcessor.on_span_start","title":"on_span_start  <code>abstractmethod</code>","text":"<pre><code>on_span_start(span: Span[Any]) -&gt; None\n</code></pre> <p>Called when a span is started.</p> <p>Parameters:</p> Name Type Description Default <code>span</code> <code>Span[Any]</code> <p>The span that started.</p> required Source code in <code>src/agents/tracing/processor_interface.py</code> <pre><code>@abc.abstractmethod\ndef on_span_start(self, span: \"Span[Any]\") -&gt; None:\n    \"\"\"Called when a span is started.\n\n    Args:\n        span: The span that started.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/processor_interface/#agents.tracing.processor_interface.TracingProcessor.on_span_end","title":"on_span_end  <code>abstractmethod</code>","text":"<pre><code>on_span_end(span: Span[Any]) -&gt; None\n</code></pre> <p>Called when a span is finished. Should not block or raise exceptions.</p> <p>Parameters:</p> Name Type Description Default <code>span</code> <code>Span[Any]</code> <p>The span that finished.</p> required Source code in <code>src/agents/tracing/processor_interface.py</code> <pre><code>@abc.abstractmethod\ndef on_span_end(self, span: \"Span[Any]\") -&gt; None:\n    \"\"\"Called when a span is finished. Should not block or raise exceptions.\n\n    Args:\n        span: The span that finished.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/processor_interface/#agents.tracing.processor_interface.TracingProcessor.shutdown","title":"shutdown  <code>abstractmethod</code>","text":"<pre><code>shutdown() -&gt; None\n</code></pre> <p>Called when the application stops.</p> Source code in <code>src/agents/tracing/processor_interface.py</code> <pre><code>@abc.abstractmethod\ndef shutdown(self) -&gt; None:\n    \"\"\"Called when the application stops.\"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/processor_interface/#agents.tracing.processor_interface.TracingProcessor.force_flush","title":"force_flush  <code>abstractmethod</code>","text":"<pre><code>force_flush() -&gt; None\n</code></pre> <p>Forces an immediate flush of all queued spans/traces.</p> Source code in <code>src/agents/tracing/processor_interface.py</code> <pre><code>@abc.abstractmethod\ndef force_flush(self) -&gt; None:\n    \"\"\"Forces an immediate flush of all queued spans/traces.\"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/processor_interface/#agents.tracing.processor_interface.TracingExporter","title":"TracingExporter","text":"<p>               Bases: <code>ABC</code></p> <p>Exports traces and spans. For example, could log them or send them to a backend.</p> Source code in <code>src/agents/tracing/processor_interface.py</code> <pre><code>class TracingExporter(abc.ABC):\n    \"\"\"Exports traces and spans. For example, could log them or send them to a backend.\"\"\"\n\n    @abc.abstractmethod\n    def export(self, items: list[\"Trace | Span[Any]\"]) -&gt; None:\n        \"\"\"Exports a list of traces and spans.\n\n        Args:\n            items: The items to export.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"ref/tracing/processor_interface/#agents.tracing.processor_interface.TracingExporter.export","title":"export  <code>abstractmethod</code>","text":"<pre><code>export(items: list[Trace | Span[Any]]) -&gt; None\n</code></pre> <p>Exports a list of traces and spans.</p> <p>Parameters:</p> Name Type Description Default <code>items</code> <code>list[Trace | Span[Any]]</code> <p>The items to export.</p> required Source code in <code>src/agents/tracing/processor_interface.py</code> <pre><code>@abc.abstractmethod\ndef export(self, items: list[\"Trace | Span[Any]\"]) -&gt; None:\n    \"\"\"Exports a list of traces and spans.\n\n    Args:\n        items: The items to export.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/processors/","title":"<code>Processors</code>","text":""},{"location":"ref/tracing/processors/#agents.tracing.processors.ConsoleSpanExporter","title":"ConsoleSpanExporter","text":"<p>               Bases: <code>TracingExporter</code></p> <p>Prints the traces and spans to the console.</p> Source code in <code>src/agents/tracing/processors.py</code> <pre><code>class ConsoleSpanExporter(TracingExporter):\n    \"\"\"Prints the traces and spans to the console.\"\"\"\n\n    def export(self, items: list[Trace | Span[Any]]) -&gt; None:\n        for item in items:\n            if isinstance(item, Trace):\n                print(f\"[Exporter] Export trace_id={item.trace_id}, name={item.name}, \")\n            else:\n                print(f\"[Exporter] Export span: {item.export()}\")\n</code></pre>"},{"location":"ref/tracing/processors/#agents.tracing.processors.BackendSpanExporter","title":"BackendSpanExporter","text":"<p>               Bases: <code>TracingExporter</code></p> Source code in <code>src/agents/tracing/processors.py</code> <pre><code>class BackendSpanExporter(TracingExporter):\n    def __init__(\n        self,\n        api_key: str | None = None,\n        organization: str | None = None,\n        project: str | None = None,\n        endpoint: str = \"https://api.openai.com/v1/traces/ingest\",\n        max_retries: int = 3,\n        base_delay: float = 1.0,\n        max_delay: float = 30.0,\n    ):\n        \"\"\"\n        Args:\n            api_key: The API key for the \"Authorization\" header. Defaults to\n                `os.environ[\"OPENAI_API_KEY\"]` if not provided.\n            organization: The OpenAI organization to use. Defaults to\n                `os.environ[\"OPENAI_ORG_ID\"]` if not provided.\n            project: The OpenAI project to use. Defaults to\n                `os.environ[\"OPENAI_PROJECT_ID\"]` if not provided.\n            endpoint: The HTTP endpoint to which traces/spans are posted.\n            max_retries: Maximum number of retries upon failures.\n            base_delay: Base delay (in seconds) for the first backoff.\n            max_delay: Maximum delay (in seconds) for backoff growth.\n        \"\"\"\n        self.api_key = api_key or os.environ.get(\"OPENAI_API_KEY\")\n        self.organization = organization or os.environ.get(\"OPENAI_ORG_ID\")\n        self.project = project or os.environ.get(\"OPENAI_PROJECT_ID\")\n        self.endpoint = endpoint\n        self.max_retries = max_retries\n        self.base_delay = base_delay\n        self.max_delay = max_delay\n\n        # Keep a client open for connection pooling across multiple export calls\n        self._client = httpx.Client(timeout=httpx.Timeout(timeout=60, connect=5.0))\n\n    def set_api_key(self, api_key: str):\n        \"\"\"Set the OpenAI API key for the exporter.\n\n        Args:\n            api_key: The OpenAI API key to use. This is the same key used by the OpenAI Python\n                client.\n        \"\"\"\n        self.api_key = api_key\n\n    def export(self, items: list[Trace | Span[Any]]) -&gt; None:\n        if not items:\n            return\n\n        if not self.api_key:\n            logger.warning(\"OPENAI_API_KEY is not set, skipping trace export\")\n            return\n\n        data = [item.export() for item in items if item.export()]\n        payload = {\"data\": data}\n\n        headers = {\n            \"Authorization\": f\"Bearer {self.api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"traces=v1\",\n        }\n\n        # Exponential backoff loop\n        attempt = 0\n        delay = self.base_delay\n        while True:\n            attempt += 1\n            try:\n                response = self._client.post(url=self.endpoint, headers=headers, json=payload)\n\n                # If the response is successful, break out of the loop\n                if response.status_code &lt; 300:\n                    logger.debug(f\"Exported {len(items)} items\")\n                    return\n\n                # If the response is a client error (4xx), we wont retry\n                if 400 &lt;= response.status_code &lt; 500:\n                    logger.error(f\"Tracing client error {response.status_code}: {response.text}\")\n                    return\n\n                # For 5xx or other unexpected codes, treat it as transient and retry\n                logger.warning(f\"Server error {response.status_code}, retrying.\")\n            except httpx.RequestError as exc:\n                # Network or other I/O error, we'll retry\n                logger.warning(f\"Request failed: {exc}\")\n\n            # If we reach here, we need to retry or give up\n            if attempt &gt;= self.max_retries:\n                logger.error(\"Max retries reached, giving up on this batch.\")\n                return\n\n            # Exponential backoff + jitter\n            sleep_time = delay + random.uniform(0, 0.1 * delay)  # 10% jitter\n            time.sleep(sleep_time)\n            delay = min(delay * 2, self.max_delay)\n\n    def close(self):\n        \"\"\"Close the underlying HTTP client.\"\"\"\n        self._client.close()\n</code></pre>"},{"location":"ref/tracing/processors/#agents.tracing.processors.BackendSpanExporter.__init__","title":"__init__","text":"<pre><code>__init__(\n    api_key: str | None = None,\n    organization: str | None = None,\n    project: str | None = None,\n    endpoint: str = \"https://api.openai.com/v1/traces/ingest\",\n    max_retries: int = 3,\n    base_delay: float = 1.0,\n    max_delay: float = 30.0,\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str | None</code> <p>The API key for the \"Authorization\" header. Defaults to <code>os.environ[\"OPENAI_API_KEY\"]</code> if not provided.</p> <code>None</code> <code>organization</code> <code>str | None</code> <p>The OpenAI organization to use. Defaults to <code>os.environ[\"OPENAI_ORG_ID\"]</code> if not provided.</p> <code>None</code> <code>project</code> <code>str | None</code> <p>The OpenAI project to use. Defaults to <code>os.environ[\"OPENAI_PROJECT_ID\"]</code> if not provided.</p> <code>None</code> <code>endpoint</code> <code>str</code> <p>The HTTP endpoint to which traces/spans are posted.</p> <code>'https://api.openai.com/v1/traces/ingest'</code> <code>max_retries</code> <code>int</code> <p>Maximum number of retries upon failures.</p> <code>3</code> <code>base_delay</code> <code>float</code> <p>Base delay (in seconds) for the first backoff.</p> <code>1.0</code> <code>max_delay</code> <code>float</code> <p>Maximum delay (in seconds) for backoff growth.</p> <code>30.0</code> Source code in <code>src/agents/tracing/processors.py</code> <pre><code>def __init__(\n    self,\n    api_key: str | None = None,\n    organization: str | None = None,\n    project: str | None = None,\n    endpoint: str = \"https://api.openai.com/v1/traces/ingest\",\n    max_retries: int = 3,\n    base_delay: float = 1.0,\n    max_delay: float = 30.0,\n):\n    \"\"\"\n    Args:\n        api_key: The API key for the \"Authorization\" header. Defaults to\n            `os.environ[\"OPENAI_API_KEY\"]` if not provided.\n        organization: The OpenAI organization to use. Defaults to\n            `os.environ[\"OPENAI_ORG_ID\"]` if not provided.\n        project: The OpenAI project to use. Defaults to\n            `os.environ[\"OPENAI_PROJECT_ID\"]` if not provided.\n        endpoint: The HTTP endpoint to which traces/spans are posted.\n        max_retries: Maximum number of retries upon failures.\n        base_delay: Base delay (in seconds) for the first backoff.\n        max_delay: Maximum delay (in seconds) for backoff growth.\n    \"\"\"\n    self.api_key = api_key or os.environ.get(\"OPENAI_API_KEY\")\n    self.organization = organization or os.environ.get(\"OPENAI_ORG_ID\")\n    self.project = project or os.environ.get(\"OPENAI_PROJECT_ID\")\n    self.endpoint = endpoint\n    self.max_retries = max_retries\n    self.base_delay = base_delay\n    self.max_delay = max_delay\n\n    # Keep a client open for connection pooling across multiple export calls\n    self._client = httpx.Client(timeout=httpx.Timeout(timeout=60, connect=5.0))\n</code></pre>"},{"location":"ref/tracing/processors/#agents.tracing.processors.BackendSpanExporter.set_api_key","title":"set_api_key","text":"<pre><code>set_api_key(api_key: str)\n</code></pre> <p>Set the OpenAI API key for the exporter.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>The OpenAI API key to use. This is the same key used by the OpenAI Python client.</p> required Source code in <code>src/agents/tracing/processors.py</code> <pre><code>def set_api_key(self, api_key: str):\n    \"\"\"Set the OpenAI API key for the exporter.\n\n    Args:\n        api_key: The OpenAI API key to use. This is the same key used by the OpenAI Python\n            client.\n    \"\"\"\n    self.api_key = api_key\n</code></pre>"},{"location":"ref/tracing/processors/#agents.tracing.processors.BackendSpanExporter.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Close the underlying HTTP client.</p> Source code in <code>src/agents/tracing/processors.py</code> <pre><code>def close(self):\n    \"\"\"Close the underlying HTTP client.\"\"\"\n    self._client.close()\n</code></pre>"},{"location":"ref/tracing/processors/#agents.tracing.processors.BatchTraceProcessor","title":"BatchTraceProcessor","text":"<p>               Bases: <code>TracingProcessor</code></p> <p>Some implementation notes: 1. Using Queue, which is thread-safe. 2. Using a background thread to export spans, to minimize any performance issues. 3. Spans are stored in memory until they are exported.</p> Source code in <code>src/agents/tracing/processors.py</code> <pre><code>class BatchTraceProcessor(TracingProcessor):\n    \"\"\"Some implementation notes:\n    1. Using Queue, which is thread-safe.\n    2. Using a background thread to export spans, to minimize any performance issues.\n    3. Spans are stored in memory until they are exported.\n    \"\"\"\n\n    def __init__(\n        self,\n        exporter: TracingExporter,\n        max_queue_size: int = 8192,\n        max_batch_size: int = 128,\n        schedule_delay: float = 5.0,\n        export_trigger_ratio: float = 0.7,\n    ):\n        \"\"\"\n        Args:\n            exporter: The exporter to use.\n            max_queue_size: The maximum number of spans to store in the queue. After this, we will\n                start dropping spans.\n            max_batch_size: The maximum number of spans to export in a single batch.\n            schedule_delay: The delay between checks for new spans to export.\n            export_trigger_ratio: The ratio of the queue size at which we will trigger an export.\n        \"\"\"\n        self._exporter = exporter\n        self._queue: queue.Queue[Trace | Span[Any]] = queue.Queue(maxsize=max_queue_size)\n        self._max_queue_size = max_queue_size\n        self._max_batch_size = max_batch_size\n        self._schedule_delay = schedule_delay\n        self._shutdown_event = threading.Event()\n\n        # The queue size threshold at which we export immediately.\n        self._export_trigger_size = int(max_queue_size * export_trigger_ratio)\n\n        # Track when we next *must* perform a scheduled export\n        self._next_export_time = time.time() + self._schedule_delay\n\n        self._shutdown_event = threading.Event()\n        self._worker_thread = threading.Thread(target=self._run, daemon=True)\n        self._worker_thread.start()\n\n    def on_trace_start(self, trace: Trace) -&gt; None:\n        try:\n            self._queue.put_nowait(trace)\n        except queue.Full:\n            logger.warning(\"Queue is full, dropping trace.\")\n\n    def on_trace_end(self, trace: Trace) -&gt; None:\n        # We send traces via on_trace_start, so we don't need to do anything here.\n        pass\n\n    def on_span_start(self, span: Span[Any]) -&gt; None:\n        # We send spans via on_span_end, so we don't need to do anything here.\n        pass\n\n    def on_span_end(self, span: Span[Any]) -&gt; None:\n        try:\n            self._queue.put_nowait(span)\n        except queue.Full:\n            logger.warning(\"Queue is full, dropping span.\")\n\n    def shutdown(self, timeout: float | None = None):\n        \"\"\"\n        Called when the application stops. We signal our thread to stop, then join it.\n        \"\"\"\n        self._shutdown_event.set()\n        self._worker_thread.join(timeout=timeout)\n\n    def force_flush(self):\n        \"\"\"\n        Forces an immediate flush of all queued spans.\n        \"\"\"\n        self._export_batches(force=True)\n\n    def _run(self):\n        while not self._shutdown_event.is_set():\n            current_time = time.time()\n            queue_size = self._queue.qsize()\n\n            # If it's time for a scheduled flush or queue is above the trigger threshold\n            if current_time &gt;= self._next_export_time or queue_size &gt;= self._export_trigger_size:\n                self._export_batches(force=False)\n                # Reset the next scheduled flush time\n                self._next_export_time = time.time() + self._schedule_delay\n            else:\n                # Sleep a short interval so we don't busy-wait.\n                time.sleep(0.2)\n\n        # Final drain after shutdown\n        self._export_batches(force=True)\n\n    def _export_batches(self, force: bool = False):\n        \"\"\"Drains the queue and exports in batches. If force=True, export everything.\n        Otherwise, export up to `max_batch_size` repeatedly until the queue is empty or below a\n        certain threshold.\n        \"\"\"\n        while True:\n            items_to_export: list[Span[Any] | Trace] = []\n\n            # Gather a batch of spans up to max_batch_size\n            while not self._queue.empty() and (\n                force or len(items_to_export) &lt; self._max_batch_size\n            ):\n                try:\n                    items_to_export.append(self._queue.get_nowait())\n                except queue.Empty:\n                    # Another thread might have emptied the queue between checks\n                    break\n\n            # If we collected nothing, we're done\n            if not items_to_export:\n                break\n\n            # Export the batch\n            self._exporter.export(items_to_export)\n</code></pre>"},{"location":"ref/tracing/processors/#agents.tracing.processors.BatchTraceProcessor.__init__","title":"__init__","text":"<pre><code>__init__(\n    exporter: TracingExporter,\n    max_queue_size: int = 8192,\n    max_batch_size: int = 128,\n    schedule_delay: float = 5.0,\n    export_trigger_ratio: float = 0.7,\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>exporter</code> <code>TracingExporter</code> <p>The exporter to use.</p> required <code>max_queue_size</code> <code>int</code> <p>The maximum number of spans to store in the queue. After this, we will start dropping spans.</p> <code>8192</code> <code>max_batch_size</code> <code>int</code> <p>The maximum number of spans to export in a single batch.</p> <code>128</code> <code>schedule_delay</code> <code>float</code> <p>The delay between checks for new spans to export.</p> <code>5.0</code> <code>export_trigger_ratio</code> <code>float</code> <p>The ratio of the queue size at which we will trigger an export.</p> <code>0.7</code> Source code in <code>src/agents/tracing/processors.py</code> <pre><code>def __init__(\n    self,\n    exporter: TracingExporter,\n    max_queue_size: int = 8192,\n    max_batch_size: int = 128,\n    schedule_delay: float = 5.0,\n    export_trigger_ratio: float = 0.7,\n):\n    \"\"\"\n    Args:\n        exporter: The exporter to use.\n        max_queue_size: The maximum number of spans to store in the queue. After this, we will\n            start dropping spans.\n        max_batch_size: The maximum number of spans to export in a single batch.\n        schedule_delay: The delay between checks for new spans to export.\n        export_trigger_ratio: The ratio of the queue size at which we will trigger an export.\n    \"\"\"\n    self._exporter = exporter\n    self._queue: queue.Queue[Trace | Span[Any]] = queue.Queue(maxsize=max_queue_size)\n    self._max_queue_size = max_queue_size\n    self._max_batch_size = max_batch_size\n    self._schedule_delay = schedule_delay\n    self._shutdown_event = threading.Event()\n\n    # The queue size threshold at which we export immediately.\n    self._export_trigger_size = int(max_queue_size * export_trigger_ratio)\n\n    # Track when we next *must* perform a scheduled export\n    self._next_export_time = time.time() + self._schedule_delay\n\n    self._shutdown_event = threading.Event()\n    self._worker_thread = threading.Thread(target=self._run, daemon=True)\n    self._worker_thread.start()\n</code></pre>"},{"location":"ref/tracing/processors/#agents.tracing.processors.BatchTraceProcessor.shutdown","title":"shutdown","text":"<pre><code>shutdown(timeout: float | None = None)\n</code></pre> <p>Called when the application stops. We signal our thread to stop, then join it.</p> Source code in <code>src/agents/tracing/processors.py</code> <pre><code>def shutdown(self, timeout: float | None = None):\n    \"\"\"\n    Called when the application stops. We signal our thread to stop, then join it.\n    \"\"\"\n    self._shutdown_event.set()\n    self._worker_thread.join(timeout=timeout)\n</code></pre>"},{"location":"ref/tracing/processors/#agents.tracing.processors.BatchTraceProcessor.force_flush","title":"force_flush","text":"<pre><code>force_flush()\n</code></pre> <p>Forces an immediate flush of all queued spans.</p> Source code in <code>src/agents/tracing/processors.py</code> <pre><code>def force_flush(self):\n    \"\"\"\n    Forces an immediate flush of all queued spans.\n    \"\"\"\n    self._export_batches(force=True)\n</code></pre>"},{"location":"ref/tracing/processors/#agents.tracing.processors.BatchTraceProcessor._export_batches","title":"_export_batches","text":"<pre><code>_export_batches(force: bool = False)\n</code></pre> <p>Drains the queue and exports in batches. If force=True, export everything. Otherwise, export up to <code>max_batch_size</code> repeatedly until the queue is empty or below a certain threshold.</p> Source code in <code>src/agents/tracing/processors.py</code> <pre><code>def _export_batches(self, force: bool = False):\n    \"\"\"Drains the queue and exports in batches. If force=True, export everything.\n    Otherwise, export up to `max_batch_size` repeatedly until the queue is empty or below a\n    certain threshold.\n    \"\"\"\n    while True:\n        items_to_export: list[Span[Any] | Trace] = []\n\n        # Gather a batch of spans up to max_batch_size\n        while not self._queue.empty() and (\n            force or len(items_to_export) &lt; self._max_batch_size\n        ):\n            try:\n                items_to_export.append(self._queue.get_nowait())\n            except queue.Empty:\n                # Another thread might have emptied the queue between checks\n                break\n\n        # If we collected nothing, we're done\n        if not items_to_export:\n            break\n\n        # Export the batch\n        self._exporter.export(items_to_export)\n</code></pre>"},{"location":"ref/tracing/processors/#agents.tracing.processors.default_exporter","title":"default_exporter","text":"<pre><code>default_exporter() -&gt; BackendSpanExporter\n</code></pre> <p>The default exporter, which exports traces and spans to the backend in batches.</p> Source code in <code>src/agents/tracing/processors.py</code> <pre><code>def default_exporter() -&gt; BackendSpanExporter:\n    \"\"\"The default exporter, which exports traces and spans to the backend in batches.\"\"\"\n    return _global_exporter\n</code></pre>"},{"location":"ref/tracing/processors/#agents.tracing.processors.default_processor","title":"default_processor","text":"<pre><code>default_processor() -&gt; BatchTraceProcessor\n</code></pre> <p>The default processor, which exports traces and spans to the backend in batches.</p> Source code in <code>src/agents/tracing/processors.py</code> <pre><code>def default_processor() -&gt; BatchTraceProcessor:\n    \"\"\"The default processor, which exports traces and spans to the backend in batches.\"\"\"\n    return _global_processor\n</code></pre>"},{"location":"ref/tracing/scope/","title":"<code>Scope</code>","text":""},{"location":"ref/tracing/setup/","title":"<code>Setup</code>","text":""},{"location":"ref/tracing/setup/#agents.tracing.setup.SynchronousMultiTracingProcessor","title":"SynchronousMultiTracingProcessor","text":"<p>               Bases: <code>TracingProcessor</code></p> <p>Forwards all calls to a list of TracingProcessors, in order of registration.</p> Source code in <code>src/agents/tracing/setup.py</code> <pre><code>class SynchronousMultiTracingProcessor(TracingProcessor):\n    \"\"\"\n    Forwards all calls to a list of TracingProcessors, in order of registration.\n    \"\"\"\n\n    def __init__(self):\n        # Using a tuple to avoid race conditions when iterating over processors\n        self._processors: tuple[TracingProcessor, ...] = ()\n        self._lock = threading.Lock()\n\n    def add_tracing_processor(self, tracing_processor: TracingProcessor):\n        \"\"\"\n        Add a processor to the list of processors. Each processor will receive all traces/spans.\n        \"\"\"\n        with self._lock:\n            self._processors += (tracing_processor,)\n\n    def set_processors(self, processors: list[TracingProcessor]):\n        \"\"\"\n        Set the list of processors. This will replace the current list of processors.\n        \"\"\"\n        with self._lock:\n            self._processors = tuple(processors)\n\n    def on_trace_start(self, trace: Trace) -&gt; None:\n        \"\"\"\n        Called when a trace is started.\n        \"\"\"\n        for processor in self._processors:\n            processor.on_trace_start(trace)\n\n    def on_trace_end(self, trace: Trace) -&gt; None:\n        \"\"\"\n        Called when a trace is finished.\n        \"\"\"\n        for processor in self._processors:\n            processor.on_trace_end(trace)\n\n    def on_span_start(self, span: Span[Any]) -&gt; None:\n        \"\"\"\n        Called when a span is started.\n        \"\"\"\n        for processor in self._processors:\n            processor.on_span_start(span)\n\n    def on_span_end(self, span: Span[Any]) -&gt; None:\n        \"\"\"\n        Called when a span is finished.\n        \"\"\"\n        for processor in self._processors:\n            processor.on_span_end(span)\n\n    def shutdown(self) -&gt; None:\n        \"\"\"\n        Called when the application stops.\n        \"\"\"\n        for processor in self._processors:\n            logger.debug(f\"Shutting down trace processor {processor}\")\n            processor.shutdown()\n\n    def force_flush(self):\n        \"\"\"\n        Force the processors to flush their buffers.\n        \"\"\"\n        for processor in self._processors:\n            processor.force_flush()\n</code></pre>"},{"location":"ref/tracing/setup/#agents.tracing.setup.SynchronousMultiTracingProcessor.add_tracing_processor","title":"add_tracing_processor","text":"<pre><code>add_tracing_processor(tracing_processor: TracingProcessor)\n</code></pre> <p>Add a processor to the list of processors. Each processor will receive all traces/spans.</p> Source code in <code>src/agents/tracing/setup.py</code> <pre><code>def add_tracing_processor(self, tracing_processor: TracingProcessor):\n    \"\"\"\n    Add a processor to the list of processors. Each processor will receive all traces/spans.\n    \"\"\"\n    with self._lock:\n        self._processors += (tracing_processor,)\n</code></pre>"},{"location":"ref/tracing/setup/#agents.tracing.setup.SynchronousMultiTracingProcessor.set_processors","title":"set_processors","text":"<pre><code>set_processors(processors: list[TracingProcessor])\n</code></pre> <p>Set the list of processors. This will replace the current list of processors.</p> Source code in <code>src/agents/tracing/setup.py</code> <pre><code>def set_processors(self, processors: list[TracingProcessor]):\n    \"\"\"\n    Set the list of processors. This will replace the current list of processors.\n    \"\"\"\n    with self._lock:\n        self._processors = tuple(processors)\n</code></pre>"},{"location":"ref/tracing/setup/#agents.tracing.setup.SynchronousMultiTracingProcessor.on_trace_start","title":"on_trace_start","text":"<pre><code>on_trace_start(trace: Trace) -&gt; None\n</code></pre> <p>Called when a trace is started.</p> Source code in <code>src/agents/tracing/setup.py</code> <pre><code>def on_trace_start(self, trace: Trace) -&gt; None:\n    \"\"\"\n    Called when a trace is started.\n    \"\"\"\n    for processor in self._processors:\n        processor.on_trace_start(trace)\n</code></pre>"},{"location":"ref/tracing/setup/#agents.tracing.setup.SynchronousMultiTracingProcessor.on_trace_end","title":"on_trace_end","text":"<pre><code>on_trace_end(trace: Trace) -&gt; None\n</code></pre> <p>Called when a trace is finished.</p> Source code in <code>src/agents/tracing/setup.py</code> <pre><code>def on_trace_end(self, trace: Trace) -&gt; None:\n    \"\"\"\n    Called when a trace is finished.\n    \"\"\"\n    for processor in self._processors:\n        processor.on_trace_end(trace)\n</code></pre>"},{"location":"ref/tracing/setup/#agents.tracing.setup.SynchronousMultiTracingProcessor.on_span_start","title":"on_span_start","text":"<pre><code>on_span_start(span: Span[Any]) -&gt; None\n</code></pre> <p>Called when a span is started.</p> Source code in <code>src/agents/tracing/setup.py</code> <pre><code>def on_span_start(self, span: Span[Any]) -&gt; None:\n    \"\"\"\n    Called when a span is started.\n    \"\"\"\n    for processor in self._processors:\n        processor.on_span_start(span)\n</code></pre>"},{"location":"ref/tracing/setup/#agents.tracing.setup.SynchronousMultiTracingProcessor.on_span_end","title":"on_span_end","text":"<pre><code>on_span_end(span: Span[Any]) -&gt; None\n</code></pre> <p>Called when a span is finished.</p> Source code in <code>src/agents/tracing/setup.py</code> <pre><code>def on_span_end(self, span: Span[Any]) -&gt; None:\n    \"\"\"\n    Called when a span is finished.\n    \"\"\"\n    for processor in self._processors:\n        processor.on_span_end(span)\n</code></pre>"},{"location":"ref/tracing/setup/#agents.tracing.setup.SynchronousMultiTracingProcessor.shutdown","title":"shutdown","text":"<pre><code>shutdown() -&gt; None\n</code></pre> <p>Called when the application stops.</p> Source code in <code>src/agents/tracing/setup.py</code> <pre><code>def shutdown(self) -&gt; None:\n    \"\"\"\n    Called when the application stops.\n    \"\"\"\n    for processor in self._processors:\n        logger.debug(f\"Shutting down trace processor {processor}\")\n        processor.shutdown()\n</code></pre>"},{"location":"ref/tracing/setup/#agents.tracing.setup.SynchronousMultiTracingProcessor.force_flush","title":"force_flush","text":"<pre><code>force_flush()\n</code></pre> <p>Force the processors to flush their buffers.</p> Source code in <code>src/agents/tracing/setup.py</code> <pre><code>def force_flush(self):\n    \"\"\"\n    Force the processors to flush their buffers.\n    \"\"\"\n    for processor in self._processors:\n        processor.force_flush()\n</code></pre>"},{"location":"ref/tracing/setup/#agents.tracing.setup.TraceProvider","title":"TraceProvider","text":"Source code in <code>src/agents/tracing/setup.py</code> <pre><code>class TraceProvider:\n    def __init__(self):\n        self._multi_processor = SynchronousMultiTracingProcessor()\n        self._disabled = os.environ.get(\"OPENAI_AGENTS_DISABLE_TRACING\", \"false\").lower() in (\n            \"true\",\n            \"1\",\n        )\n\n    def register_processor(self, processor: TracingProcessor):\n        \"\"\"\n        Add a processor to the list of processors. Each processor will receive all traces/spans.\n        \"\"\"\n        self._multi_processor.add_tracing_processor(processor)\n\n    def set_processors(self, processors: list[TracingProcessor]):\n        \"\"\"\n        Set the list of processors. This will replace the current list of processors.\n        \"\"\"\n        self._multi_processor.set_processors(processors)\n\n    def get_current_trace(self) -&gt; Trace | None:\n        \"\"\"\n        Returns the currently active trace, if any.\n        \"\"\"\n        return Scope.get_current_trace()\n\n    def get_current_span(self) -&gt; Span[Any] | None:\n        \"\"\"\n        Returns the currently active span, if any.\n        \"\"\"\n        return Scope.get_current_span()\n\n    def set_disabled(self, disabled: bool) -&gt; None:\n        \"\"\"\n        Set whether tracing is disabled.\n        \"\"\"\n        self._disabled = disabled\n\n    def create_trace(\n        self,\n        name: str,\n        trace_id: str | None = None,\n        group_id: str | None = None,\n        metadata: dict[str, Any] | None = None,\n        disabled: bool = False,\n    ) -&gt; Trace:\n        \"\"\"\n        Create a new trace.\n        \"\"\"\n        if self._disabled or disabled:\n            logger.debug(f\"Tracing is disabled. Not creating trace {name}\")\n            return NoOpTrace()\n\n        trace_id = trace_id or util.gen_trace_id()\n\n        logger.debug(f\"Creating trace {name} with id {trace_id}\")\n\n        return TraceImpl(\n            name=name,\n            trace_id=trace_id,\n            group_id=group_id,\n            metadata=metadata,\n            processor=self._multi_processor,\n        )\n\n    def create_span(\n        self,\n        span_data: TSpanData,\n        span_id: str | None = None,\n        parent: Trace | Span[Any] | None = None,\n        disabled: bool = False,\n    ) -&gt; Span[TSpanData]:\n        \"\"\"\n        Create a new span.\n        \"\"\"\n        if self._disabled or disabled:\n            logger.debug(f\"Tracing is disabled. Not creating span {span_data}\")\n            return NoOpSpan(span_data)\n\n        if not parent:\n            current_span = Scope.get_current_span()\n            current_trace = Scope.get_current_trace()\n            if current_trace is None:\n                logger.error(\n                    \"No active trace. Make sure to start a trace with `trace()` first\"\n                    \"Returning NoOpSpan.\"\n                )\n                return NoOpSpan(span_data)\n            elif isinstance(current_trace, NoOpTrace) or isinstance(current_span, NoOpSpan):\n                logger.debug(\n                    f\"Parent {current_span} or {current_trace} is no-op, returning NoOpSpan\"\n                )\n                return NoOpSpan(span_data)\n\n            parent_id = current_span.span_id if current_span else None\n            trace_id = current_trace.trace_id\n\n        elif isinstance(parent, Trace):\n            if isinstance(parent, NoOpTrace):\n                logger.debug(f\"Parent {parent} is no-op, returning NoOpSpan\")\n                return NoOpSpan(span_data)\n            trace_id = parent.trace_id\n            parent_id = None\n        elif isinstance(parent, Span):\n            if isinstance(parent, NoOpSpan):\n                logger.debug(f\"Parent {parent} is no-op, returning NoOpSpan\")\n                return NoOpSpan(span_data)\n            parent_id = parent.span_id\n            trace_id = parent.trace_id\n\n        logger.debug(f\"Creating span {span_data} with id {span_id}\")\n\n        return SpanImpl(\n            trace_id=trace_id,\n            span_id=span_id,\n            parent_id=parent_id,\n            processor=self._multi_processor,\n            span_data=span_data,\n        )\n\n    def shutdown(self) -&gt; None:\n        try:\n            logger.debug(\"Shutting down trace provider\")\n            self._multi_processor.shutdown()\n        except Exception as e:\n            logger.error(f\"Error shutting down trace provider: {e}\")\n</code></pre>"},{"location":"ref/tracing/setup/#agents.tracing.setup.TraceProvider.register_processor","title":"register_processor","text":"<pre><code>register_processor(processor: TracingProcessor)\n</code></pre> <p>Add a processor to the list of processors. Each processor will receive all traces/spans.</p> Source code in <code>src/agents/tracing/setup.py</code> <pre><code>def register_processor(self, processor: TracingProcessor):\n    \"\"\"\n    Add a processor to the list of processors. Each processor will receive all traces/spans.\n    \"\"\"\n    self._multi_processor.add_tracing_processor(processor)\n</code></pre>"},{"location":"ref/tracing/setup/#agents.tracing.setup.TraceProvider.set_processors","title":"set_processors","text":"<pre><code>set_processors(processors: list[TracingProcessor])\n</code></pre> <p>Set the list of processors. This will replace the current list of processors.</p> Source code in <code>src/agents/tracing/setup.py</code> <pre><code>def set_processors(self, processors: list[TracingProcessor]):\n    \"\"\"\n    Set the list of processors. This will replace the current list of processors.\n    \"\"\"\n    self._multi_processor.set_processors(processors)\n</code></pre>"},{"location":"ref/tracing/setup/#agents.tracing.setup.TraceProvider.get_current_trace","title":"get_current_trace","text":"<pre><code>get_current_trace() -&gt; Trace | None\n</code></pre> <p>Returns the currently active trace, if any.</p> Source code in <code>src/agents/tracing/setup.py</code> <pre><code>def get_current_trace(self) -&gt; Trace | None:\n    \"\"\"\n    Returns the currently active trace, if any.\n    \"\"\"\n    return Scope.get_current_trace()\n</code></pre>"},{"location":"ref/tracing/setup/#agents.tracing.setup.TraceProvider.get_current_span","title":"get_current_span","text":"<pre><code>get_current_span() -&gt; Span[Any] | None\n</code></pre> <p>Returns the currently active span, if any.</p> Source code in <code>src/agents/tracing/setup.py</code> <pre><code>def get_current_span(self) -&gt; Span[Any] | None:\n    \"\"\"\n    Returns the currently active span, if any.\n    \"\"\"\n    return Scope.get_current_span()\n</code></pre>"},{"location":"ref/tracing/setup/#agents.tracing.setup.TraceProvider.set_disabled","title":"set_disabled","text":"<pre><code>set_disabled(disabled: bool) -&gt; None\n</code></pre> <p>Set whether tracing is disabled.</p> Source code in <code>src/agents/tracing/setup.py</code> <pre><code>def set_disabled(self, disabled: bool) -&gt; None:\n    \"\"\"\n    Set whether tracing is disabled.\n    \"\"\"\n    self._disabled = disabled\n</code></pre>"},{"location":"ref/tracing/setup/#agents.tracing.setup.TraceProvider.create_trace","title":"create_trace","text":"<pre><code>create_trace(\n    name: str,\n    trace_id: str | None = None,\n    group_id: str | None = None,\n    metadata: dict[str, Any] | None = None,\n    disabled: bool = False,\n) -&gt; Trace\n</code></pre> <p>Create a new trace.</p> Source code in <code>src/agents/tracing/setup.py</code> <pre><code>def create_trace(\n    self,\n    name: str,\n    trace_id: str | None = None,\n    group_id: str | None = None,\n    metadata: dict[str, Any] | None = None,\n    disabled: bool = False,\n) -&gt; Trace:\n    \"\"\"\n    Create a new trace.\n    \"\"\"\n    if self._disabled or disabled:\n        logger.debug(f\"Tracing is disabled. Not creating trace {name}\")\n        return NoOpTrace()\n\n    trace_id = trace_id or util.gen_trace_id()\n\n    logger.debug(f\"Creating trace {name} with id {trace_id}\")\n\n    return TraceImpl(\n        name=name,\n        trace_id=trace_id,\n        group_id=group_id,\n        metadata=metadata,\n        processor=self._multi_processor,\n    )\n</code></pre>"},{"location":"ref/tracing/setup/#agents.tracing.setup.TraceProvider.create_span","title":"create_span","text":"<pre><code>create_span(\n    span_data: TSpanData,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[TSpanData]\n</code></pre> <p>Create a new span.</p> Source code in <code>src/agents/tracing/setup.py</code> <pre><code>def create_span(\n    self,\n    span_data: TSpanData,\n    span_id: str | None = None,\n    parent: Trace | Span[Any] | None = None,\n    disabled: bool = False,\n) -&gt; Span[TSpanData]:\n    \"\"\"\n    Create a new span.\n    \"\"\"\n    if self._disabled or disabled:\n        logger.debug(f\"Tracing is disabled. Not creating span {span_data}\")\n        return NoOpSpan(span_data)\n\n    if not parent:\n        current_span = Scope.get_current_span()\n        current_trace = Scope.get_current_trace()\n        if current_trace is None:\n            logger.error(\n                \"No active trace. Make sure to start a trace with `trace()` first\"\n                \"Returning NoOpSpan.\"\n            )\n            return NoOpSpan(span_data)\n        elif isinstance(current_trace, NoOpTrace) or isinstance(current_span, NoOpSpan):\n            logger.debug(\n                f\"Parent {current_span} or {current_trace} is no-op, returning NoOpSpan\"\n            )\n            return NoOpSpan(span_data)\n\n        parent_id = current_span.span_id if current_span else None\n        trace_id = current_trace.trace_id\n\n    elif isinstance(parent, Trace):\n        if isinstance(parent, NoOpTrace):\n            logger.debug(f\"Parent {parent} is no-op, returning NoOpSpan\")\n            return NoOpSpan(span_data)\n        trace_id = parent.trace_id\n        parent_id = None\n    elif isinstance(parent, Span):\n        if isinstance(parent, NoOpSpan):\n            logger.debug(f\"Parent {parent} is no-op, returning NoOpSpan\")\n            return NoOpSpan(span_data)\n        parent_id = parent.span_id\n        trace_id = parent.trace_id\n\n    logger.debug(f\"Creating span {span_data} with id {span_id}\")\n\n    return SpanImpl(\n        trace_id=trace_id,\n        span_id=span_id,\n        parent_id=parent_id,\n        processor=self._multi_processor,\n        span_data=span_data,\n    )\n</code></pre>"},{"location":"ref/tracing/span_data/","title":"<code>Span data</code>","text":""},{"location":"ref/tracing/spans/","title":"<code>Spans</code>","text":""},{"location":"ref/tracing/spans/#agents.tracing.spans.Span","title":"Span","text":"<p>               Bases: <code>ABC</code>, <code>Generic[TSpanData]</code></p> Source code in <code>src/agents/tracing/spans.py</code> <pre><code>class Span(abc.ABC, Generic[TSpanData]):\n    @property\n    @abc.abstractmethod\n    def trace_id(self) -&gt; str:\n        pass\n\n    @property\n    @abc.abstractmethod\n    def span_id(self) -&gt; str:\n        pass\n\n    @property\n    @abc.abstractmethod\n    def span_data(self) -&gt; TSpanData:\n        pass\n\n    @abc.abstractmethod\n    def start(self, mark_as_current: bool = False):\n        \"\"\"\n        Start the span.\n\n        Args:\n            mark_as_current: If true, the span will be marked as the current span.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def finish(self, reset_current: bool = False) -&gt; None:\n        \"\"\"\n        Finish the span.\n\n        Args:\n            reset_current: If true, the span will be reset as the current span.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def __enter__(self) -&gt; Span[TSpanData]:\n        pass\n\n    @abc.abstractmethod\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        pass\n\n    @property\n    @abc.abstractmethod\n    def parent_id(self) -&gt; str | None:\n        pass\n\n    @abc.abstractmethod\n    def set_error(self, error: SpanError) -&gt; None:\n        pass\n\n    @property\n    @abc.abstractmethod\n    def error(self) -&gt; SpanError | None:\n        pass\n\n    @abc.abstractmethod\n    def export(self) -&gt; dict[str, Any] | None:\n        pass\n\n    @property\n    @abc.abstractmethod\n    def started_at(self) -&gt; str | None:\n        pass\n\n    @property\n    @abc.abstractmethod\n    def ended_at(self) -&gt; str | None:\n        pass\n</code></pre>"},{"location":"ref/tracing/spans/#agents.tracing.spans.Span.start","title":"start  <code>abstractmethod</code>","text":"<pre><code>start(mark_as_current: bool = False)\n</code></pre> <p>Start the span.</p> <p>Parameters:</p> Name Type Description Default <code>mark_as_current</code> <code>bool</code> <p>If true, the span will be marked as the current span.</p> <code>False</code> Source code in <code>src/agents/tracing/spans.py</code> <pre><code>@abc.abstractmethod\ndef start(self, mark_as_current: bool = False):\n    \"\"\"\n    Start the span.\n\n    Args:\n        mark_as_current: If true, the span will be marked as the current span.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/spans/#agents.tracing.spans.Span.finish","title":"finish  <code>abstractmethod</code>","text":"<pre><code>finish(reset_current: bool = False) -&gt; None\n</code></pre> <p>Finish the span.</p> <p>Parameters:</p> Name Type Description Default <code>reset_current</code> <code>bool</code> <p>If true, the span will be reset as the current span.</p> <code>False</code> Source code in <code>src/agents/tracing/spans.py</code> <pre><code>@abc.abstractmethod\ndef finish(self, reset_current: bool = False) -&gt; None:\n    \"\"\"\n    Finish the span.\n\n    Args:\n        reset_current: If true, the span will be reset as the current span.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/spans/#agents.tracing.spans.NoOpSpan","title":"NoOpSpan","text":"<p>               Bases: <code>Span[TSpanData]</code></p> Source code in <code>src/agents/tracing/spans.py</code> <pre><code>class NoOpSpan(Span[TSpanData]):\n    __slots__ = (\"_span_data\", \"_prev_span_token\")\n\n    def __init__(self, span_data: TSpanData):\n        self._span_data = span_data\n        self._prev_span_token: contextvars.Token[Span[TSpanData] | None] | None = None\n\n    @property\n    def trace_id(self) -&gt; str:\n        return \"no-op\"\n\n    @property\n    def span_id(self) -&gt; str:\n        return \"no-op\"\n\n    @property\n    def span_data(self) -&gt; TSpanData:\n        return self._span_data\n\n    @property\n    def parent_id(self) -&gt; str | None:\n        return None\n\n    def start(self, mark_as_current: bool = False):\n        if mark_as_current:\n            self._prev_span_token = Scope.set_current_span(self)\n\n    def finish(self, reset_current: bool = False) -&gt; None:\n        if reset_current and self._prev_span_token is not None:\n            Scope.reset_current_span(self._prev_span_token)\n            self._prev_span_token = None\n\n    def __enter__(self) -&gt; Span[TSpanData]:\n        self.start(mark_as_current=True)\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        reset_current = True\n        if exc_type is GeneratorExit:\n            logger.debug(\"GeneratorExit, skipping span reset\")\n            reset_current = False\n\n        self.finish(reset_current=reset_current)\n\n    def set_error(self, error: SpanError) -&gt; None:\n        pass\n\n    @property\n    def error(self) -&gt; SpanError | None:\n        return None\n\n    def export(self) -&gt; dict[str, Any] | None:\n        return None\n\n    @property\n    def started_at(self) -&gt; str | None:\n        return None\n\n    @property\n    def ended_at(self) -&gt; str | None:\n        return None\n</code></pre>"},{"location":"ref/tracing/spans/#agents.tracing.spans.SpanImpl","title":"SpanImpl","text":"<p>               Bases: <code>Span[TSpanData]</code></p> Source code in <code>src/agents/tracing/spans.py</code> <pre><code>class SpanImpl(Span[TSpanData]):\n    __slots__ = (\n        \"_trace_id\",\n        \"_span_id\",\n        \"_parent_id\",\n        \"_started_at\",\n        \"_ended_at\",\n        \"_error\",\n        \"_prev_span_token\",\n        \"_processor\",\n        \"_span_data\",\n    )\n\n    def __init__(\n        self,\n        trace_id: str,\n        span_id: str | None,\n        parent_id: str | None,\n        processor: TracingProcessor,\n        span_data: TSpanData,\n    ):\n        self._trace_id = trace_id\n        self._span_id = span_id or util.gen_span_id()\n        self._parent_id = parent_id\n        self._started_at: str | None = None\n        self._ended_at: str | None = None\n        self._processor = processor\n        self._error: SpanError | None = None\n        self._prev_span_token: contextvars.Token[Span[TSpanData] | None] | None = None\n        self._span_data = span_data\n\n    @property\n    def trace_id(self) -&gt; str:\n        return self._trace_id\n\n    @property\n    def span_id(self) -&gt; str:\n        return self._span_id\n\n    @property\n    def span_data(self) -&gt; TSpanData:\n        return self._span_data\n\n    @property\n    def parent_id(self) -&gt; str | None:\n        return self._parent_id\n\n    def start(self, mark_as_current: bool = False):\n        if self.started_at is not None:\n            logger.warning(\"Span already started\")\n            return\n\n        self._started_at = util.time_iso()\n        self._processor.on_span_start(self)\n        if mark_as_current:\n            self._prev_span_token = Scope.set_current_span(self)\n\n    def finish(self, reset_current: bool = False) -&gt; None:\n        if self.ended_at is not None:\n            logger.warning(\"Span already finished\")\n            return\n\n        self._ended_at = util.time_iso()\n        self._processor.on_span_end(self)\n        if reset_current and self._prev_span_token is not None:\n            Scope.reset_current_span(self._prev_span_token)\n            self._prev_span_token = None\n\n    def __enter__(self) -&gt; Span[TSpanData]:\n        self.start(mark_as_current=True)\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        reset_current = True\n        if exc_type is GeneratorExit:\n            logger.debug(\"GeneratorExit, skipping span reset\")\n            reset_current = False\n\n        self.finish(reset_current=reset_current)\n\n    def set_error(self, error: SpanError) -&gt; None:\n        self._error = error\n\n    @property\n    def error(self) -&gt; SpanError | None:\n        return self._error\n\n    @property\n    def started_at(self) -&gt; str | None:\n        return self._started_at\n\n    @property\n    def ended_at(self) -&gt; str | None:\n        return self._ended_at\n\n    def export(self) -&gt; dict[str, Any] | None:\n        return {\n            \"object\": \"trace.span\",\n            \"id\": self.span_id,\n            \"trace_id\": self.trace_id,\n            \"parent_id\": self._parent_id,\n            \"started_at\": self._started_at,\n            \"ended_at\": self._ended_at,\n            \"span_data\": self.span_data.export(),\n            \"error\": self._error,\n        }\n</code></pre>"},{"location":"ref/tracing/traces/","title":"<code>Traces</code>","text":""},{"location":"ref/tracing/traces/#agents.tracing.traces.Trace","title":"Trace","text":"<p>A trace is the root level object that tracing creates. It represents a logical \"workflow\".</p> Source code in <code>src/agents/tracing/traces.py</code> <pre><code>class Trace:\n    \"\"\"\n    A trace is the root level object that tracing creates. It represents a logical \"workflow\".\n    \"\"\"\n\n    @abc.abstractmethod\n    def __enter__(self) -&gt; Trace:\n        pass\n\n    @abc.abstractmethod\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        pass\n\n    @abc.abstractmethod\n    def start(self, mark_as_current: bool = False):\n        \"\"\"\n        Start the trace.\n\n        Args:\n            mark_as_current: If true, the trace will be marked as the current trace.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def finish(self, reset_current: bool = False):\n        \"\"\"\n        Finish the trace.\n\n        Args:\n            reset_current: If true, the trace will be reset as the current trace.\n        \"\"\"\n        pass\n\n    @property\n    @abc.abstractmethod\n    def trace_id(self) -&gt; str:\n        \"\"\"\n        The trace ID.\n        \"\"\"\n        pass\n\n    @property\n    @abc.abstractmethod\n    def name(self) -&gt; str:\n        \"\"\"\n        The name of the workflow being traced.\n        \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def export(self) -&gt; dict[str, Any] | None:\n        \"\"\"\n        Export the trace as a dictionary.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"ref/tracing/traces/#agents.tracing.traces.Trace.trace_id","title":"trace_id  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>trace_id: str\n</code></pre> <p>The trace ID.</p>"},{"location":"ref/tracing/traces/#agents.tracing.traces.Trace.name","title":"name  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the workflow being traced.</p>"},{"location":"ref/tracing/traces/#agents.tracing.traces.Trace.start","title":"start  <code>abstractmethod</code>","text":"<pre><code>start(mark_as_current: bool = False)\n</code></pre> <p>Start the trace.</p> <p>Parameters:</p> Name Type Description Default <code>mark_as_current</code> <code>bool</code> <p>If true, the trace will be marked as the current trace.</p> <code>False</code> Source code in <code>src/agents/tracing/traces.py</code> <pre><code>@abc.abstractmethod\ndef start(self, mark_as_current: bool = False):\n    \"\"\"\n    Start the trace.\n\n    Args:\n        mark_as_current: If true, the trace will be marked as the current trace.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/traces/#agents.tracing.traces.Trace.finish","title":"finish  <code>abstractmethod</code>","text":"<pre><code>finish(reset_current: bool = False)\n</code></pre> <p>Finish the trace.</p> <p>Parameters:</p> Name Type Description Default <code>reset_current</code> <code>bool</code> <p>If true, the trace will be reset as the current trace.</p> <code>False</code> Source code in <code>src/agents/tracing/traces.py</code> <pre><code>@abc.abstractmethod\ndef finish(self, reset_current: bool = False):\n    \"\"\"\n    Finish the trace.\n\n    Args:\n        reset_current: If true, the trace will be reset as the current trace.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/traces/#agents.tracing.traces.Trace.export","title":"export  <code>abstractmethod</code>","text":"<pre><code>export() -&gt; dict[str, Any] | None\n</code></pre> <p>Export the trace as a dictionary.</p> Source code in <code>src/agents/tracing/traces.py</code> <pre><code>@abc.abstractmethod\ndef export(self) -&gt; dict[str, Any] | None:\n    \"\"\"\n    Export the trace as a dictionary.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"ref/tracing/traces/#agents.tracing.traces.NoOpTrace","title":"NoOpTrace","text":"<p>               Bases: <code>Trace</code></p> <p>A no-op trace that will not be recorded.</p> Source code in <code>src/agents/tracing/traces.py</code> <pre><code>class NoOpTrace(Trace):\n    \"\"\"\n    A no-op trace that will not be recorded.\n    \"\"\"\n\n    def __init__(self):\n        self._started = False\n        self._prev_context_token: contextvars.Token[Trace | None] | None = None\n\n    def __enter__(self) -&gt; Trace:\n        if self._started:\n            if not self._prev_context_token:\n                logger.error(\"Trace already started but no context token set\")\n            return self\n\n        self._started = True\n        self.start(mark_as_current=True)\n\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.finish(reset_current=True)\n\n    def start(self, mark_as_current: bool = False):\n        if mark_as_current:\n            self._prev_context_token = Scope.set_current_trace(self)\n\n    def finish(self, reset_current: bool = False):\n        if reset_current and self._prev_context_token is not None:\n            Scope.reset_current_trace(self._prev_context_token)\n            self._prev_context_token = None\n\n    @property\n    def trace_id(self) -&gt; str:\n        return \"no-op\"\n\n    @property\n    def name(self) -&gt; str:\n        return \"no-op\"\n\n    def export(self) -&gt; dict[str, Any] | None:\n        return None\n</code></pre>"},{"location":"ref/tracing/traces/#agents.tracing.traces.TraceImpl","title":"TraceImpl","text":"<p>               Bases: <code>Trace</code></p> <p>A trace that will be recorded by the tracing library.</p> Source code in <code>src/agents/tracing/traces.py</code> <pre><code>class TraceImpl(Trace):\n    \"\"\"\n    A trace that will be recorded by the tracing library.\n    \"\"\"\n\n    __slots__ = (\n        \"_name\",\n        \"_trace_id\",\n        \"group_id\",\n        \"metadata\",\n        \"_prev_context_token\",\n        \"_processor\",\n        \"_started\",\n    )\n\n    def __init__(\n        self,\n        name: str,\n        trace_id: str | None,\n        group_id: str | None,\n        metadata: dict[str, Any] | None,\n        processor: TracingProcessor,\n    ):\n        self._name = name\n        self._trace_id = trace_id or util.gen_trace_id()\n        self.group_id = group_id\n        self.metadata = metadata\n        self._prev_context_token: contextvars.Token[Trace | None] | None = None\n        self._processor = processor\n        self._started = False\n\n    @property\n    def trace_id(self) -&gt; str:\n        return self._trace_id\n\n    @property\n    def name(self) -&gt; str:\n        return self._name\n\n    def start(self, mark_as_current: bool = False):\n        if self._started:\n            return\n\n        self._started = True\n        self._processor.on_trace_start(self)\n\n        if mark_as_current:\n            self._prev_context_token = Scope.set_current_trace(self)\n\n    def finish(self, reset_current: bool = False):\n        if not self._started:\n            return\n\n        self._processor.on_trace_end(self)\n\n        if reset_current and self._prev_context_token is not None:\n            Scope.reset_current_trace(self._prev_context_token)\n            self._prev_context_token = None\n\n    def __enter__(self) -&gt; Trace:\n        if self._started:\n            if not self._prev_context_token:\n                logger.error(\"Trace already started but no context token set\")\n            return self\n\n        self.start(mark_as_current=True)\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.finish(reset_current=exc_type is not GeneratorExit)\n\n    def export(self) -&gt; dict[str, Any] | None:\n        return {\n            \"object\": \"trace\",\n            \"id\": self.trace_id,\n            \"workflow_name\": self.name,\n            \"group_id\": self.group_id,\n            \"metadata\": self.metadata,\n        }\n</code></pre>"},{"location":"ref/tracing/util/","title":"<code>Util</code>","text":""},{"location":"ref/tracing/util/#agents.tracing.util.time_iso","title":"time_iso","text":"<pre><code>time_iso() -&gt; str\n</code></pre> <p>Returns the current time in ISO 8601 format.</p> Source code in <code>src/agents/tracing/util.py</code> <pre><code>def time_iso() -&gt; str:\n    \"\"\"Returns the current time in ISO 8601 format.\"\"\"\n    return datetime.now(timezone.utc).isoformat()\n</code></pre>"},{"location":"ref/tracing/util/#agents.tracing.util.gen_trace_id","title":"gen_trace_id","text":"<pre><code>gen_trace_id() -&gt; str\n</code></pre> <p>Generates a new trace ID.</p> Source code in <code>src/agents/tracing/util.py</code> <pre><code>def gen_trace_id() -&gt; str:\n    \"\"\"Generates a new trace ID.\"\"\"\n    return f\"trace_{uuid.uuid4().hex}\"\n</code></pre>"},{"location":"ref/tracing/util/#agents.tracing.util.gen_span_id","title":"gen_span_id","text":"<pre><code>gen_span_id() -&gt; str\n</code></pre> <p>Generates a new span ID.</p> Source code in <code>src/agents/tracing/util.py</code> <pre><code>def gen_span_id() -&gt; str:\n    \"\"\"Generates a new span ID.\"\"\"\n    return f\"span_{uuid.uuid4().hex[:24]}\"\n</code></pre>"}]}